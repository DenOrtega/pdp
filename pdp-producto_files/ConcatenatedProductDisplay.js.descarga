//-----------------------------------------------------------------
// Licensed Materials - Property of IBM
//
// WebSphere Commerce
//
// (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.
//
// US Government Users Restricted Rights - Use, duplication or
// disclosure restricted by GSA ADP Schedule Contract with
// IBM Corp.
//-----------------------------------------------------------------
//PAR1144-concatenated MessageHelper.js,CategoryDisplay.js,CatalogEntryThumbnailDisplay.js in to MessageHelperCategoryDisplayCatalogEntryThumbnailDisplay.js in productdisplay.jsp

/**
 *@fileOverview This javascript file defines all the javascript functions used to display
 *and handle the information messages, error messages.
 */

if(typeof(MessageHelper) == "undefined" || !MessageHelper || !MessageHelper.topicNamespace){

/**
 * @class The MessageHelper class contains variables and functions that are used
 * to initialize, display and handle informational and error message.
 */
	MessageHelper = {
			
		/**A variable that contains all the messages to be displayed*/
		timoutDelay: 10000,
			
		/**A variable that contains all the messages to be displayed*/
		messages: {},
		
		/**
     * internal variable to keep track of the current element id that has
     * an error tooltip assigned to it */
		identifier: "",
		
    /**
     * returns the current year
     * @return (int) the current year
     */
		getCurrentYear: function(){
			return new Date().getFullYear();
		}, 

     /**
     * returns the current month. January is 1, and December is 12.
     * @return (int) the current month
     */
		getCurrentMonth: function(){
       return new Date().getMonth()+1;
		}, 

     /**
     * returns the current day of the current month, starting from 1.
     * @return (int) the current day
     */
		getCurrentDay: function(){
       return new Date().getDate();
		}, 

    /**
     *
     *summary: retrieves the value of the property from a render context
		 *description: This function retrieves the value of the property whose name is propertName
		 *from the given context.
     *
     * @param (wc.render.Content) content The context in which the properties
     * belong to.
     * @param (string) propertyName The property to be retrieved
		 * @return (string) null if the context is null. undefined if the property is not found.
		 * otherwise, the value of the property int he given context.
     */
		getRenderContextProperty : function(/*wc.render.Context*/context, /*String*/propertyName){
			
			console.debug("enter getRenderContextProperty with propertyName = "+propertyName);
			if(context == null){
				console.debug("context is null. Return null...");
				return null;
			}
			
			var result = context.properties[propertyName]
			console.debug("the found property value is: "+result);
			
			return result;	
		}, 
				
		/**
     * This function is used to initialize the messages object with all the 
     * required messages. It is used to setup a JS object with any key/value.
     * @param (string) key The key used to access this message.
     * @param (string) msg The message in the correct language.
     *
     */
		setMessage:function(key, msg) {
			this.messages[key] = msg;
		},

	
	
	/**
	 * Use dojo.fadeIn and dojo.fadeOut to display error and informative messages in the store.
	 * @param (int) topOffset how far from the top the message display area will be displayed. 
	 */
		showHideMessageArea:function(topOffset){
			cursor_clear();
			if (topOffset==null || topOffset==undefined) {
				topOffset = 0;
			}
			var node = dojo.byId("MessageArea");
			
			// place the display section at a location relative to the 'page' element
			var page = dojo.byId("page");
			if(page != null){
				var coords = dojo.coords(page, true);
				var width = coords.w;
				if(dojo.isSafari || dojo.isChrome){
					width = dojo.style('page', 'width');
				}
				dojo.style(node, {
					"width": width + 20 + "px",
					"left": coords.x - 10 + "px",
					"top": "0px"
				});
			}
			
			var fadeInAnimArgsArray = new Array();
			fadeInAnimArgsArray["node"] = node;
			fadeInAnimArgsArray["duration"] = 200;
			fadeInAnimArgsArray["delay"] = 0;
			
			var fadeOutAnimArgsArray = new Array();
			fadeOutAnimArgsArray["node"] = node;
			fadeOutAnimArgsArray["duration"] = 500;
			fadeOutAnimArgsArray["delay"] = 0;
			fadeOutAnimArgsArray["onEnd"] = function(){
				dojo.style(node, "display", "none");
				dojo.style(node, "opacity", 100);
			};
			
			// set message area to alpha and then make it display block
			dojo.style(node, "opacity", 0);
			dojo.style(node, "display", "block");
			
			// fade in
			var fadeInAnim = dojo.fadeIn(fadeInAnimArgsArray);
			
			// fade out and when end the display set to none and opacity set to 100
			var fadeOutAnim = dojo.fadeOut(fadeOutAnimArgsArray);
			
			fadeInAnim.play();
			fadeOutTimer = setTimeout(function(){dojo.fadeOut(fadeOutAnimArgsArray).play();},this.timoutDelay);		
			hideOverView();
		},
		
		
	
	/**
	 * Use dojo.fadeOut to hide error and informative messages in the store.
	 */
		hideMessageArea:function(){
			cursor_clear();
			var node = dojo.byId("MessageArea");
			var fadeOutAnimArgsArray = new Array();
			fadeOutAnimArgsArray["node"] = node;
			fadeOutAnimArgsArray["duration"] = 500;
			fadeOutAnimArgsArray["onEnd"] = function(){
				dojo.style(node, "display", "none");
				dojo.style(node, "opacity", 100);
			};
			dojo.fadeOut(fadeOutAnimArgsArray).play();
			dojo.byId('ErrorMessageText').innerHTML = "";
			hideOverView();
		},
		
    /**
     * This function is used to display the error messages to the user. 
     * @param (string) msg The error/information message to be displayed
     * @param (int) topOffset how far from the top the message display area will be displayed. 
     * @param (boolean) showType whether or not the message type should be appended to the actual message
     *
     * @return (element) a HTML element that contains the error message. 
     *
     */
		displayErrorMessage:function(msg, topOffset,showType){	
			if (topOffset==null || topOffset==undefined) {
				topOffset = 0;
			}
			
			if (showType == undefined || showType==null || showType==true){
				//if showType is undefined, keep the FEP1 behaviour.  
				if(this.messages["ERROR_MESSAGE_TYPE"]!=null && this.messages["ERROR_MESSAGE_TYPE"]!='undefined'){
					var MsgType = this.messages["ERROR_MESSAGE_TYPE"]; 
					msg = MsgType + msg;
				}				
			}
			
			this.setMessageAreaStyle('2');
			dojo.byId('ErrorMessageText').innerHTML = msg;
			this.showHideMessageArea(topOffset);
			dojo.byId('MessageArea').focus();
			setTimeout("dojo.byId('ErrorMessageText').focus()", 1000);
		},

	
	/**
	 * Sets the style for the message area on the page.
	 * @param (String) styleId The style Id.
	 */
		setMessageAreaStyle:function(styleId){
			if(dojo.byId('MessageArea') != null){dojo.byId('MessageArea').className = 'msgpopup' + styleId;}
			
			var errorImg = document.createElement("IMG");
			if(dojo.byId('imageDir') && dojo.byId('ErrorIcon')){
				
				var errorIcon = dojo.byId('ErrorIcon');
				while (errorIcon.hasChildNodes()) {
					errorIcon.removeChild(errorIcon.lastChild);
				}
				
				if(styleId == '1'){
					errorImg.src = document.getElementById('imageDir').value+"check-mark.png";
					errorIcon.appendChild(errorImg);
				}else if(styleId == '2'){
					errorImg.src = document.getElementById('imageDir').value+"error_x.png";
					errorIcon.appendChild(errorImg);
				}
			}
		},

		
    /**
     * This function is used to display the informative messages to the user.
     * @param (string) msg The status message to be displayed.
     * @param (int) topOffset how far from the top of the browser the message will be displayed. 
     * @return (element) a HTML element that contains the status message.
     */
		displayStatusMessage:function(msg,topOffset){
			if (topOffset==null || topOffset==undefined) {
				topOffset = 0;
			}
			this.setMessageAreaStyle('1');
			dojo.byId('ErrorMessageText').innerHTML = msg;
			this.showHideMessageArea(topOffset);
			dojo.byId('MessageArea').focus();
			setTimeout("dojo.byId('ErrorMessageText').focus()",1000);		
		},

    /**
     * This function is used to hide and clear the message display area in
     * the page.
     */
		hideAndClearMessage:function(){
			dojo.byId('ErrorMessageText').innerHTML = "";
			dojo.byId('MessageArea').style.display = "none";
		},
	
	/**
	 * This function is used to re-adjust the coordinates of the message display area on the page. Its location is relative to the "page" element.
	 * @param (int) topOffset how far from the top the message display area will be displayed. 
	 */
		adjustCoordinates:function(topOffset){
			if(dojo.style("MessageArea", "display") != "none"){
				var page = dojo.byId("page");
				var node = dojo.byId("MessageArea");
				if(page != null && node != null){
					var coords = dojo.coords(page, true);
					var width = coords.w;
					if(dojo.isSafari){
						width = dojo.style('page', 'width');
					}
					
					if (topOffset==null || topOffset==undefined) {
						topOffset = 0;
					}
					
					dojo.style(node, {
						"width": width + 20+ "px",
						"left": coords.x - 10 + "px",
						"top": (coords.y + topOffset) + "px"
					});
				}
			}
		},

    /**
     * This function will show the an error message tooltip
     * around the input field with the problem.
     *
     * The function assumes the "serviceResponse" is the
     * JSON object from a WebSphere Commerce exception. The error
     * field is in the serviceResponse.errorMessageParam and the
     * error message is in the serviceResponse.errorMessage.
     *
     * @see MessageHelper.formErrorHandleClient
     * @param (object) serviceResponse The JSON object with the error data.
     * @param (string) formName The name of the form where the error field is.
     * 
     */
		formErrorHandle:function(serviceResponse,formName){

			this.formErrorHandleClient(serviceResponse.errorMessageParam, serviceResponse.errorMessage);

	  	},


		/**
     * This function will show the an error message tooltip
     * around the input field with the problem.
     *
     * This function will check for the emptiness of the required
     * filed and displays the "errorMessage" related to that field as a tooltip.
     * The tooltip will be closed on focus lost.
     *
     * @param (string) id The identifier for the filed in the form.
     * @param (string) errorMessage The message that should be displayed to the user.
     */
		formErrorHandleClient:function(id,errorMessage){
			
			var element = dojo.byId(id);
			if (errorMessage == null){	
				console.debug("formErrorHandleClient: The error message is null.");
				return;
			}
			if(element){
				if (this.identifier != (id + "_tooltip")) {
					this.identifier = id + "_tooltip";
					var node = document.createElement('span');
					var imgDirPath = getImageDirectoryPath();
					if(dojo.isIE < 7)
					{
						node.innerHTML = errorMessage + "<iframe id='errorMessageIFrame' scrolling='no' frameborder='0' src='" + imgDirPath + "images/empty.gif' height='2' width='2'></iframe>";
					}
					else
					{
						node.innerHTML = errorMessage;
					}											
					var tooltip = new dijit.Tooltip({connectId: [id]}, node);
					tooltip.startup();
					console.log("created", tooltip, tooltip.id);
					element.focus();
					tooltip.open(element); // force to have this for IE if the error is on a link (i.e. <a>)
					dojo.connect(element, "onblur",  tooltip, "close"); // force to have this for IE if the error is on a link (i.e. <a>)
					dojo.connect(element, "onblur",  tooltip, "destroy");
					dojo.connect(element, "onblur",  this, "clearCurrentIdentifier");
					/* Tooltip widget connects onmouseover event of the above element to _onMouseOver function. 
					When tooltip is associated with the dropdown select box, tooltip will be displayed initially next to the 
					select box. But when user expands the dropdown box and moves the mouse over the options in the select box,
					onmouseover event will be triggered which calls _onMouserOver function.._onMouseOver function will display the tooltip
					again next to the cursor. So when user keeps moving the mouse over the options in select box
					the tooltip widget also moves along with the cursor. To avoid this override _onMouseOver function
					with empty implementation. 
					*/
					tooltip._onMouseOver = this.emptyFunc;
				}
			}
		},


		/**
     * This function clears the internal variable that has the element id
     * with the error tooltip.
     * 
     */
		clearCurrentIdentifier:function(){
		
			this.identifier = "";
	  },

     /**
      * This function is used to override any of the default functions
      * associated with the events. Ex: Tooltip widget tracks onMouseOver event
      * and display the tooltip. To remove this association,
      * tooltip widgets onMouseOver function will be overridden by this empty
      * function.
      * 
      * It is an empty implementation which does nothing.
      *
      * @param (string) event  The event which triggers this function. 
      */
	  emptyFunc:function(event){
		 
	  },



    /**
     * Checks whether a string contains a double byte character.
     *
     * @param (string) target the string to be checked
     * @return (boolean) true if target contains a double byte char;
     * false otherwise
     */
		containsDoubleByte:function (target) {
		
				var str = new String(target);
				var oneByteMax = 0x007F;

				for (var i=0; i < str.length; i++){
					chr = str.charCodeAt(i);
					if (chr > oneByteMax) {
						return true;
					}
				}
				return false;
		},

    /**
     * This function validate email address. It does not allow double byte
     * characters in the email address.
     *
     * @return (boolean) true if the email address is valid; false otherwise
     *
     * @param (string) strEmail the email address string to be validated
     */
		isValidEmail:function(strEmail){
			
			if (this.containsDoubleByte(strEmail)){
				return false;
			}
		
			if(strEmail.length == 0) {
				return true;
			} else if (strEmail.length < 5) {
					 return false;
				}else{
					if (strEmail.indexOf(" ") > 0){
								return false;
						}else{
							if (strEmail.indexOf("@") < 1) {
										return false;
								}else{
									if (strEmail.lastIndexOf(".") < (strEmail.indexOf("@") + 2)){
												return false;
										}else{
												if (strEmail.lastIndexOf(".") >= strEmail.length-2){
													return false;
												}
										}
								}
						}
				}
				return true;
		},

		/**
     * This function will check if the number of bytes of the string
     * is within the maxlength specified.
     *
     * @param (string) UTF16String the UTF-16 string
     * @param (int) maxlength the maximum number of bytes allowed in your input
     *
     * @return (boolean) false is this input string is larger than maxlength
		 */
		isValidUTF8length: function(UTF16String, maxlength) {
			if (this.utf8StringByteLength(UTF16String) > maxlength) return false;
			else return true;
		},

    /**
     * This function will count the number of bytes represented in a UTF-8
     * string.
     *
     * @param (string) UTF16String the UTF-16 string you want a byte count of
     * @return (int) the integer number of bytes represented in a UTF-8 string
     */
		utf8StringByteLength: function(UTF16String) {

			if (UTF16String === null) return 0;
			
			var str = String(UTF16String);
			var oneByteMax = 0x007F;
			var twoByteMax = 0x07FF;
			var byteSize = str.length;
			
			for (i = 0; i < str.length; i++) {
				chr = str.charCodeAt(i);
				if (chr > oneByteMax) byteSize = byteSize + 1;
				if (chr > twoByteMax) byteSize = byteSize + 1;
			}  
			return byteSize;
		},

    /**
     * this function will check whether the text is a numeric or not.
     * 
     * @param allowDot is a boolean wich specifies whether to consider
     * the '.' or not.
     *
     * @return (boolean) true if text is numeric
     */
		IsNumeric : function (text,allowDot)
		{
			if(allowDot) var ValidChars = "0123456789.";
			else var ValidChars = "0123456789";
		  
			var IsNumber=true;
			var Char;

		 
			for (i = 0; i < text.length && IsNumber == true; i++) 
			{ 
				Char = text.charAt(i); 
				if (ValidChars.indexOf(Char) == -1) 
				{
					IsNumber = false;
				}
			}
			return IsNumber;   
		},

    /**
     *
     *This function will check for a valid Phone Number
     *
     *@param (string) text The string to check
     *
     *@return (boolean) true if text is a phone number, ie if each character of
     *input is one of 0123456789() -+ 
     */
		IsValidPhone : function (text)
		{
		
			var ValidChars = "0123456789()-+ ";
		  
			var IsValid=true;
			var Char;
		 
			for (i = 0; i < text.length && IsValid == true; i++) 
			{ 
				Char = text.charAt(i); 
				if (ValidChars.indexOf(Char) == -1) 
				{
					IsValid = false;
				}
			}
			return IsValid;   
		}
	}
}




//-----------------------------------------------------------------
// Licensed Materials - Property of IBM
//
// WebSphere Commerce
//
// (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.
//
// US Government Users Restricted Rights - Use, duplication or
// disclosure restricted by GSA ADP Schedule Contract with
// IBM Corp.
//-----------------------------------------------------------------

//
//

/**
* @fileOverview This file holds methods to perform client side operations in relation to catalog browsing, usually at the category level.<b> 
* 			For example, this file holds methods to add items to the shopping cart, wish list and compare zone and to resolve SKUs.<b> 
*			This file is referenced in a collection of JSPs including all of the catalog entry display JSPs such as
*			CachedBundleDisplay.jsp, CachedItemDisplay.jsp , CachedPackageDisplay.jsp, CachedProductOnlyDisplay.jsp.
*			As well this file is included in CategoryOnlyResultsDisplay.jsp and in none catalog browsing pages such as 
*			CatalogSearchDisplay.jsp and MyAccountDisplay.jsp.
*
* @version 1.0
**/

/**
* @class categoryDisplayJS This class defines all the variables and functions used by the CategoryDisplay.js. Any page that will use a function in this file
*		can access that function thru this class. Pages that use categoryDisplayJS include CachedProductOnlyDisplay.jsp which is responsible for
*		displaying product details. As well CategoryOnlyResultsDisplay.jsp uses this page to facilitate the category browsing functionality such as add to cart, 
*		wish list and compare zone.
*
**/
categoryDisplayJS={
	
	/** An array of entitled items which is used in various methods throughout CategoryDisplay.js **/
	entitledItems:[],
	
	entitledItemsArray:[],
	
	/** An map which holds the attributes of a set of products **/
	selectedProducts:new Object(),
	
	/** A map of attribute name value pairs for the currently selected attribute values **/
	selectedAttributes:new Object(),
	
	/** Can be used to hold a map of error messages **/
	errorMessages: new Object(),
	
	/** The language ID currently in use **/
	langId: "-1",
	
	/** The store ID currently in use **/
	storeId: "",
	
	/** The catalog ID currently in use **/
	catalogId: "",
	
	/** The order ID currently in use if being called from the pending order details page.**/
	orderId: "",
	
	/** Holds a boolean value indicating whether or not AJAX shopping cart is enabled or not. **/
	ajaxShopCart:true,
	
	/** Holds a boolean value indicating whether or not AJAX My Account is enabled or not. **/
	ajaxMyAccount:true,
	
	/** Can be used to indicate whether or not there has been a context change event **/
	contextChanged:false, 
	
	/** Set to true in the goBack and goForward methods **/
	isHistory:false,
	
	isSkuResolved:false,
	
	/** Holds an array of  JSON objects representing properties of merchandising associations **/
	merchandisingAssociationItems:[],
	
	/** Holds an array of JSON objects holding information about the parent catalog entries of merchandising associations **/
	baseCatalogEntryDetails:[],
	
	/** Used to determine the index of the next association to display and is used as a global storage variable to share data between methods. **/
	associationThumbnailIndex:1,
	
	/** A count of the number of merchandising associations available. **/
	totalAssociationCount:0,
	
	/** A boolean used in a variety of the add to cart methods to tell whether or not the base item was added to the cart. **/
	baseItemAddedToCart:false,
	
	/** A boolean used to determine whether or not to add merchandising associations to the cart **/
	merchandisingProductAssociationAddToCart:false,
	
	/** The form which holds information about merchandising associations to be added to the cart **/
	merchandisingProductAssociationForm:"",
	
	/** A boolean used to determine whether or not the parent catalog entry is a bundle bean. **/
	isParentBundleBean:false,
	
	/** Holds the current user type such as guest or registered user. Allowed values are 'G' for guest and 'R' for registered.**/
	userType:"",
	
	/** A variable used to form the url dynamically for the more info link in the Quickinfo popup */
	moreInfoUrl :"",
	/** The text to display as an alt to the image used on the MerchandisingAssociationDisplay.jsp to show the previous assoication **/
	displayPrevAssociation:"",
	
	/** The text to display as an alt to the image used on the MerchandisingAssociationDisplay.jsp to show the next assoication **/
	displayNextAssociation:"",
	
	/** A map holding a mapping between product IDs as its key and the first entitled item ID of that product as its value **/
	defaultItemArray:[],

	/** The type of the catalog page that the user is currently viewing **/
	currentPageType:"",

	/** The identifier of the catalog entry that the current page is displaying **/
	currentCatalogEntryId:"",
	
    /** a JSON object that holds attributes of an entitled item **/
    entitledItemJsonObject: null,

	/**
	* A boolean used to to determine is it from a Qick info popup or not. 
	**/
	isPopup : false,

	/**
	* A boolean used to to determine whether or not to diplay the price range when the catEntry is selected. 
	**/
	displayPriceRange : true,

	/**
	* This array holds the json object retured from the service, holding the price information of the catEntry.
	**/
	itemPriceJsonOject : [],
	
	/**
	* This is the id of the bazaar voice comments container within the Product Display Page
	**/
	bazaarVoiceDivId : '#bazaarvoice-comments',
	
	/**
	 * Scene7 Viewer Object
	 */
	flyout:new Object(),
	
	/**
	 * Scene7 Store Name
	 */
	storeName: "",

	/* START :REQ#725 Swatches */
	/** A map of attribute name value pairs for the currently selected attribute values **/
	selectedAttributesList:new Object(),
	fromPLP:false,
	selectedAttributeValueForQuickView:"",
	currentProductDivId:"",
	
	selectedColor:"",
	selectedSize:"",
	//Req-1079 Pending
	selectedSizeForQuickView:"",//selectedSizeForQuickView
	mainProductId:"",
	setMainProductId : function(productId){
	this.mainProductId = productId;
},
	/* END :REQ#725 Swatches */
	
	/**
	* initHistory This function will take elementId and changeUrl as inputs and create a new history tracker object and sets the initial state.
	*			  This is used on CategoriesDisplay.jsp to initialize the page history to the CategoryDisplay URL of the category you are on.
	* @param {String} elementId  HistoryTracker elementId.
	* @param {String} changeUrl HistoryTracker URL.
	*
	**/
	initHistory:function(elementId, changeUrl){
		var historyObject = new categoryDisplayJS.HistoryTracker(elementId, changeUrl);
		dojo.back.setInitialState(historyObject);	
	},


	/* This function processes the category URL and loads the content based on what is present after the hash in the URL.
	*/
	processCategoryURL:function(){
		var hashString = location.hash;		
		var needContextUpdate = false;	
		var wholeUrl;
		if(hashString){
			hashString = hashString.substring(1, hashString.length);
			/* Remove the identifier attached*/ 
			wholeUrl = hashString;
			var indexOfIdentifier = hashString.indexOf("identifier", 0);
			if(indexOfIdentifier >= 0){
				wholeUrl = hashString.substring(0, indexOfIdentifier);
			}
			needContextUpdate = true;
			wholeUrl = unescape(wholeUrl);
		 }
		if(needContextUpdate){			
			isHistory=true;
			wc.render.getRefreshControllerById("CategoryDisplay_Controller").url = wholeUrl;
			wc.render.updateContext("CategoryDisplay_Context");
		}
	},

	/**
	* setAjaxShopCart This function will set the flag "ajaxShopCart" which is used to determine if the shopping cart is using the Ajax flow or not.
	*
	* @param {Boolean} ajaxShopCart Flag which indicates whther to use AJAX shopping cart or not.
	*
	**/
	setAjaxShopCart:function(ajaxShopCart){
		this.ajaxShopCart = ajaxShopCart;
	},
	
	/**
	* setAjaxMyAccount This function will set the flag "ajaxMyAccount" which is used to determine if the My Account page is using the Ajax flow or not.
	*
	* @param {Boolean} ajaxMyAccount Flag which indicates whether to use AJAX My Account or not.
	*
	**/	
	setAjaxMyAccount:function(ajaxMyAccount){
		this.ajaxMyAccount = ajaxMyAccount;
	},	
	
	/**
	* setCommonParameters This function initializes storeId, catalogId, and langId.
	*
	* @param {String} langId The language id to use.
	* @param {String} storeId The store id to use.
	* @param {String} catalogId The catalog id to use.
	* @param {String} userType The type of user. G for Guest user.
	* 
	**/
	setCommonParameters:function(langId,storeId,catalogId,userType){
		this.langId = langId;
		this.storeId = storeId;
		this.catalogId = catalogId;
		this.userType = userType;
	},
	
	/**
	* setEntitledItems Sets an array of entitled items for a product. 
	*				   This function is used in CachedBundleDisplay.jsp to add all the entitled SKUs of the products in a particular bundle to this array.
	*				   The array that is generated is used later in {@link fastFinderJS.resolveSKU}.
	* 
	* @param {Object} entitledItemArray An object which holds both the catalog entry ID as well as an array of attributes for the entitled items of a product.
	*
	**/
	setEntitledItems : function(entitledItemArray){
		this.entitledItems = entitledItemArray;
	},

	/**
	* setEntitledItemsArray Sets an array of entitled items for a bundle with multiple products. 
	*				   This function is used in CachedBundleDisplay.jsp to add all the entitled SKUs of the products in a particular bundle to this array.
	*				   The array that is generated is used later in {@link fastFinderJS.resolveSKU}.
	* 
	* @param {Object} entitledItemArray An object which holds both the catalog entry ID as well as an array of attributes for the entitled items of a product.
	*
	**/
	setEntitledItemsArray : function(productId, entitledItemArray){
		this.entitledItemsArray[productId] = entitledItemArray;
	},

	/**
	* setSelectedAttribute Sets the selected attribute value for a particular attribute not in reference to any catalog entry.
	*					   One place this function is used is on CachedProductOnlyDisplay.jsp where there is a drop down box of attributes.
	*					   When an attribute is selected from that drop down this method is called to update the selected value for that attribute.
	*
	* @param {String} selectedAttributeName The name of the attribute.
	* @param {String} selectedAttributeValue The value of the selected attribute.
	*
	**/
	setSelectedAttribute : function(selectedAttributeName , selectedAttributeValue){ 
		console.debug(selectedAttributeName +" : "+ selectedAttributeValue);
		this.selectedAttributes[selectedAttributeName] = selectedAttributeValue.replace(/\u00a0/g," ").replace(/&nbsp;/g," ");//modified for swatches 1022 req 
		this.moreInfoUrl=this.moreInfoUrl+'&'+selectedAttributeName+'='+selectedAttributeValue.replace(/\u00a0/g," ").replace(/&nbsp;/g," ");//modified for swatches 1022 req 
		this.resolveBuyable();
	},

	/**
	* setSelectedAttributeJS Sets the selected attribute value for a particular attribute not in reference to any catalog entry.
	*					   One place this function is used is on the quick info pop up where there is a drop down box of attributes.
	*					   When an attribute is selected from that drop down this method is called to update the selected value for that attribute.
	*
	* @param {String} selectedAttributeName The name of the attribute.
	* @param {String} selectedAttributeValue The value of the selected attribute.
	*
	**/
	setSelectedAttributeJS : function(selectedAttributeName , selectedAttributeValue){ 
		console.debug(selectedAttributeName.replace(/'/g,"&#039;") +" : "+ selectedAttributeValue.replace(/'/g,"&#039;"));
		this.selectedAttributes[selectedAttributeName.replace(/'/g,"&#039;")] = selectedAttributeValue.replace(/'/g,"&#039;").replace(/\u00a0/g," ").replace(/&nbsp;/g," ");//modified for swatches 1022 req 
		this.moreInfoUrl=this.moreInfoUrl+'&'+selectedAttributeName.replace(/'/g,"&#039;") +'='+selectedAttributeValue.replace(/'/g,"&#039;").replace(/\u00a0/g," ").replace(/&nbsp;/g," ");//modified for swatches 1022 req 
		this.resolveBuyable();
	},
	

	/**
	* This function is used to change the price displayed in the Product Display Page on change of  a attribute of the product using an AJAX call. 
	* This function will resolve the catentryId using entitledItemId and displays the price of the catentryId.
	*				
	* @param {Object} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {Boolean} isPopup If the value is true, then this implies that the function was called from a quick info pop-up.
	* @param {Boolean} displayPriceRange If the value is true, then display the price range. If it is false then donot display the price range.
	*
	**/
	changePrice : function(entitledItemId,isPopup,displayPriceRange){
		this.displayPriceRange = displayPriceRange;
		this.isPopup = isPopup;
		categoryDisplayJS.isSkuResolved = false;
		var entitledItemJSON;
		document.getElementById('limitedstockdisplayid').style.display = "none";
		//document.getElementById('outofstockstockdisplayid').style.display = "none";
		if (dojo.byId(entitledItemId)!=null && !this.isPopup) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		
		this.setEntitledItems(entitledItemJSON);
//Req-1079 Pending
		if(isPopup && (this.selectedSizeForQuickView != "" && this.selectedSizeForQuickView != undefined && this.selectedSizeForQuickView != null  )){
			var catalogEntryId = this.getCatalogEntryIdForQuickView();
			this.selectedSizeForQuickView ="";
		}else{
			var catalogEntryId = this.getCatalogEntryId();
		}
		
		
		
		if((catalogEntryId!=null)&&(catalogEntryId!="")){
			//check if the json object is already present for the catEntry.
			if(this.itemPriceJsonOject[catalogEntryId] != null && this.itemPriceJsonOject[catalogEntryId] != 'undefined'){
				this.displayPrice(this.itemPriceJsonOject[catalogEntryId].catalogEntry);
				console.debug("CategoryDisplay.changePrice: using stored json object.");

				if(document.getElementById('nectarpoints')){
					var offerprice = this.itemPriceJsonOject[catalogEntryId].catalogEntry.offerPrice;
					var listprice = this.itemPriceJsonOject[catalogEntryId].catalogEntry.listPrice;			
					var points = categoryDisplayJS.calculateNectarPoints (offerprice) ;
					document.getElementById('nectarpoints').innerHTML = points +" Puntos Nectar";		
				}				
				
				// MHTN : hide default OO Stock,Limited Stock message
				if(document.getElementById('ooStock')){
					document.getElementById('ooStock').style.display = "none";
				}
				if(document.getElementById('limitedStock')){
					document.getElementById('limitedStock').style.display = "none";
				}
				// MHTN : hide default OO Stock,Limited Stock message
				
				if(!isPopup){
					// MHTN: Don't display this message
					/*if(document.getElementById('inventoryMsg')){
						if(this.itemPriceJsonOject[catalogEntryId].catalogEntry.inventoryMsg != null 
						   && this.itemPriceJsonOject[catalogEntryId].catalogEntry.inventoryMsg != 'undefined'){
							document.getElementById('inventoryMsg').innerHTML =  this.itemPriceJsonOject[catalogEntryId].catalogEntry.inventoryMsg;
						}else{
							document.getElementById('inventoryMsg').innerHTML = "";
						}
					}*/
					if(dojo.trim(this.itemPriceJsonOject[catalogEntryId].catalogEntry.displayAddToCartButton)=="false" || (this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg != "" && 
							this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg == 'Producto sin stock')){
						document.getElementById('ajaxAddToCart_pdp').style.display = "none";
						document.getElementById('availability_msg').style.display = "block";
						document.getElementById('productQty').style.display = "none";
						document.getElementById('limitedstockdisplayid').style.display = "none";
						
						document.getElementById('availability_msg').innerHTML = this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg;
					}else{						
						if(this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg != null 
								   && this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg != 'undefined'){
							document.getElementById('availability_msg').innerHTML = this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg;
						}else{
							document.getElementById('availability_msg').style.display = "none";
						}
						
						document.getElementById('ajaxAddToCart_pdp').style.display = "block";
						document.getElementById('productQty').style.display = "block";
					}
					categoryDisplayJS.updateFlyoutViewer(this.itemPriceJsonOject[catalogEntryId].catalogEntry.catalogEntryIdentifier.externalIdentifier.partNumber);
					//wc.render.updateContext("PhysicalStoreInvContext", {itemId:this.itemPriceJsonOject[catalogEntryId].catalogEntry.catalogEntryIdentifier.uniqueID});
				}else{
					// MHTN: Don't display this message
					/*if(document.getElementById('inventoryMsg_qv')){
						if(this.itemPriceJsonOject[catalogEntryId].catalogEntry.inventoryMsg != null 
						   && this.itemPriceJsonOject[catalogEntryId].catalogEntry.inventoryMsg != 'undefined'){
							document.getElementById('inventoryMsg_qv').innerHTML =  this.itemPriceJsonOject[catalogEntryId].catalogEntry.inventoryMsg;
						}else{
							document.getElementById('inventoryMsg_qv').innerHTML = "";
						}
					}*/
					
					if(dojo.trim(this.itemPriceJsonOject[catalogEntryId].catalogEntry.displayAddToCartButton)=="false" || (this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg != "" && 
							this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg == 'Producto sin stock')){
						document.getElementById('addToCartLinkAjax').style.display = "none";
						document.getElementById('availability_msg_qv').style.display = "none";
						document.getElementById('productQuantity_qv').style.display = "none";
						document.getElementById('limitedstockdisplayid').style.display = "none";
						document.getElementById('outofstockstockdisplayid').style.display="block";
						document.getElementById('availability_msg_qv').innerHTML = this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg;
					}else{
						if(!(this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg == 'Producto sin stock') && !(this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg == '')){
							document.getElementById('outofstockstockdisplayid').style.display="none";
							document.getElementById('productPopUpQty').style.display = "block";
							document.getElementById('addToCartLinkAjax').style.display = "block";
							document.getElementById('addToCartAjaxButton1').style.display = "block";
							document.getElementById('limitedstockdisplayid').style.display = "block";
							document.getElementById('availability_msg_qv').style.display = "none";	
							
						}
						if(this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg == ''){
							document.getElementById('outofstockstockdisplayid').style.display="none";
							document.getElementById('productPopUpQty').style.display = "block";
							document.getElementById('addToCartLinkAjax').style.display = "block";
							document.getElementById('addToCartAjaxButton1').style.display = "block";	
						}
						
						if(this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg != null 
								   && this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg != 'undefined' && this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg != ""){
							//document.getElementById('availability_msg_qv').innerHTML = this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg;
						}else{
							document.getElementById('availability_msg_qv').style.display = "none";
						}		
						document.getElementById('addToCartLinkAjax').style.display = "block";
						document.getElementById('productQuantity_qv').style.display = "block";
						document.getElementById('outofstockstockdisplayid').style.display="none";
						document.getElementById('limitedstockdisplayid').style.display = "block";
						if(this.itemPriceJsonOject[catalogEntryId].catalogEntry.availabe_msg == ''){
							document.getElementById('limitedstockdisplayid').style.display = "none";
						}
						
					}
					//swatches 1022 req start 
					var isdropdown=false;
					if(null!=document.getElementById('productAttributes')){
						if(null!=document.getElementById('productAttributes').children){
							for(var len=0;len<document.getElementById('productAttributes').children.length;len++){
								if(document.getElementById('productAttributes').children[len].id=='Color' || document.getElementById('productAttributes').children[len].id=='Talla'){
									isdropdown= true;
								}
							}
						}
					}
					
					if(null != document.getElementById("productQuantity")){
						if(!isdropdown){
							//document.getElementById("productQuantity").style.marginTop="-36px"; 
							document.getElementById("productQuantity").style.marginTop="0px"; 
						}else{
							document.getElementById("productQuantity").style.marginTop="10px"; 
						}
						
					}
					//swatches 1022 req end 
				}
			}
			//if json object is not present, call the service to get the details.
			else{
				var parameters = {};
				parameters.storeId = this.storeId;
				parameters.langId= this.langId;
				parameters.catalogId= this.catalogId;
				parameters.productId= catalogEntryId;
				parameters.onlyCatalogEntryPrice = 'false';

				dojo.xhrPost({
					url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",				
					handleAs: "json-comment-filtered",
					content: parameters,
					service: this,
					load: categoryDisplayJS.displayPriceServiceResponse,
					error: function(errObj,ioArgs) {
						console.debug("CategoryDisplay.changePrice: Unexpected error occurred during an xhrPost request.");
					}
				});
			}
		}
		else if(isPopup){
			for(var index = 0; index <= entitledItemJSON.length; index++){
				if(this.entitledItems[index] && this.entitledItems[index].Attributes){
					for(entitledItem in this.entitledItems[index].Attributes){
						var objAttr = dojo.trim(entitledItem);
						if(objAttr != ""){
							if(objAttr == 'Color_'+dojo.trim(this.selectedAttributeValueForQuickView))
							{
								catentryId = this.entitledItems[index].catentry_id;
								break;
							}
							if(objAttr == 'Talla_'+dojo.trim(this.selectedSize))
							{
								catentryId = this.entitledItems[index].catentry_id;
								break;
							}
						}				
					}
					
				}
			}
			
			var parameters = {};
			parameters.storeId = this.storeId;
			parameters.langId= this.langId;
			parameters.catalogId= this.catalogId;
			parameters.productId= catentryId;
			parameters.onlyCatalogEntryPrice = 'false';

			dojo.xhrPost({
				url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",				
				handleAs: "json-comment-filtered",
				content: parameters,
				service: this,
				load: categoryDisplayJS.displayQuickViewImage,
				error: function(errObj,ioArgs) {
					console.debug("CategoryDisplay.changePrice: Unexpected error occurred during an xhrPost request.");
				}
			});
		
		}
		else{
			console.debug("CategoryDisplay.changePrice: all attributes are not selected.");
		}
		this.req84ProductsWithDifferentLT();		
	},
	/**
	 * to display images in quickview when swatches are changed
	 */
	displayQuickViewImage:function(serviceResponse){
		if(serviceResponse.catalogEntry.description[0]!=null){
			if(serviceResponse.catalogEntry.description[0].fullImage !=null){
				var image =serviceResponse.catalogEntry.description[0].fullImage;
				var element = document.getElementById("productFullImage_quickInfo")
				element.src = image;
			}
			
		}
		
	},
	/**
	 * to display swatches in case of mobile plp
	 */
	displaySwatchesForMobilePLP:function(swatchName){
		var swatchelements= document.getElementsByName(swatchName);
		for(var i=0;i< swatchelements.length ;i++){
		if(swatchelements.item(i)!=null){
			if(swatchelements.item(i).children.length>4){
				for(var j=4; j<swatchelements.item(i).children.length;j++){//reverted the change for UI issue in mobile PLP
					swatchelements.item(i).children[j].style.display='none';
				}
				if(swatchelements.item(i).id=="swatches"){
					swatchelements.item(i).id="swatches_more";
				}
			}
		}	
		}
		
	},
	/**
	 * to display more swatches in case of mobile plp
	 */
	displayMoreSwatchesForMobilePLP:function(swatchName){
		var swatchelements= document.getElementsByName(swatchName);
		if(swatchelements.item(0)!=null && swatchelements.item(0).id=="swatches_more"){
		var innerHTML=document.getElementsByName(swatchName).item(0).innerHTML;
		//innerHTML= innerHTML+'<span class="more_dots">...</span><div id="more_swatches" onClick="updateSwatchesMore();"';
		//innerHTML=innerHTML+'" ">+</div>';
		//Fix for regression issue on clicking + symbol in swatches in PDP redirection not proper : start
		//var dummy= document.getElementById('swatchForMobileDummy').innerHTML;
		var name = swatchName+'_swatchForMobileDummy';
		var dummy= document.getElementById(name).innerHTML;
		//Fix for regression issue on clicking + symbol in swatches in PDP redirection not proper : end
		innerHTML=innerHTML+dummy;
		document.getElementsByName(swatchName).item(0).innerHTML = innerHTML;
		}
		
	},
	/**
	 * Req.84 -> Products with different LT for their children do not update this value in modal Dispatch PDP
	 * 1) If the customer does not select the attributes to simulate the shipping cost of the 
	 * first child published like of the family (same price rule) and display a set of words of 
	 * the son that being calculated. 
	 * 2) If the client selected attributes definition, simulate the selected Sku.
	 * */
	req84PrepareSelectionDefault: function(entitledItemId){
		console.debug("this.entitledItems = ",this.entitledItems);
		var entitledItemJSON;
		if((this.entitledItems == null || this.entitledItems.length == 0)){			
			if (dojo.byId(entitledItemId)!= null) {
				//the json object for entitled items are already in the HTML. 
				 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
			}else{
				//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
				//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
				entitledItemJSON = this.getEntitledItemJsonObject(); 
			}			
			this.setEntitledItems(entitledItemJSON);
		}
		if(this.entitledItems != null && this.entitledItems.length > 0){
			console.debug("this.selectedAttributes = ",this.selectedAttributes);
			var attributeArray = [];
			for(attribute in this.selectedAttributes){
				if(dojo.trim(this.selectedAttributes[attribute]) != ""){
					attributeArray.push(attribute + "_" + this.selectedAttributes[attribute]);
				}
			}
			if(attributeArray.length == 0){
				var titleElement = dojo.byId("calculateShippingText");
				var titlePattern = dojo.byId("calculateShippingTextHidden"); 
				var SEPARATE = "| ";
				if(titleElement != null && titlePattern != null && !(typeof titleElement === 'undefined') && !(typeof titlePattern === 'undefined')){
					var text = dojo.trim(titlePattern.innerHTML);
					if(this.entitledItems[0] && this.entitledItems[0].Attributes){
						var attrText = "";
						for(attribute in this.selectedAttributes){
							attrText += this.getAttributeValue(this.entitledItems[0].Attributes, attribute, SEPARATE);
						}
						this.prepareMessage(titleElement, text, attrText, this.entitledItems[0]);
					}
					// MHTN: CLICK AND COLLECT
					if(null == this.getCatalogEntryId())
						this.prepareAttrButton(this.entitledItems[0].catentry_id);
					else
						this.prepareAttrButton(this.getCatalogEntryId());
				}
			}
			// fix for displaying product description,colour and size 
			else{
				this.req84ProductsWithDifferentLT();
			}
		}
	},
	
	
	prepareMessage: function (titleElement, text, attrText, objItem){
		/*MTHN DEFECT : 238 */		
		var first = text.substring(0, text.indexOf("{1}"))+" ";	
		/*MTHN DEFECT : 238 */	
		var productName = "";
		var element = dojo.byId("parentProductName");
		if(element != null && !(typeof element === 'undefined')){
			productName = " <b>"+ dojo.trim(element.innerHTML).replace(".","") + "</b> "; 
		}
		first += productName;
		//calculateShippingText_2_Hidden;
		var second = "", second2 = "", tmp = "";		
		if(attrText != ""){
			var elem = dojo.byId("calculateShippingText_2_Hidden");
			var pElem = dojo.byId("calculateShippingText_2_Nota");
			if(elem != null && !(typeof elem === 'undefined') && pElem != null && !(typeof pElem === 'undefined')){
				second = dojo.trim(elem.innerHTML);
				second2 = second.substring(second.indexOf("{2}")+3, second.length);
				var textTemp = second.substring(0, second.indexOf("{2}"));
				// Nota text is removed in new wireframe, so no need the below lines.
				//second = "<b>" + textTemp.substring(textTemp.indexOf("Nota:"), textTemp.indexOf("Nota:")+"Nota:".length);
				//textTemp = "</b>" + textTemp.substring(textTemp.indexOf("Nota:")+"Nota:".length, textTemp.length);
				//second += textTemp;
				second = textTemp;
				for(attribute in this.selectedAttributes){
					if(attribute.indexOf("_") > 0){
						tmp+= attribute.toLowerCase().substring(0, attribute.indexOf("_")) + "/";
					}else{
						tmp+= attribute.toLowerCase() + "/";
					}
				}
				if(tmp.length > 0)
					tmp = tmp.substring(0, tmp.length - 1);
				//tmp += "tama\u00F1o";
				pElem.innerHTML = second + tmp + second2;
				pElem.style.display = "block";
			}
		}
		second = text.substring(text.indexOf("{1}")+3,text.length);
		//second +=  tmp + second2;
		if(objItem != null && objItem.weightText && second.indexOf("{0}") > 0){
			second2 = second.substring(second.indexOf("{0}")+3, second.length);
			second = second.substring(0, second.indexOf("{0}"));
			second += objItem.weightText + second2;
			titleElement.innerHTML = first + (attrText != ""?"<b>"+attrText+"</b>":attrText) + second;
		}else{
			this.req84PrepareSelectionDefault();
		}		
	},
	
	getAttributeValue: function(objAttrs, keyAttr, charSeparate, anotherWay){
		var resp = "";
		if(anotherWay){
			for(attribute in objAttrs){
				if(dojo.trim(objAttrs[attribute]) != ""){
					resp += charSeparate + attribute;
					resp += ": " + dojo.trim(objAttrs[attribute])+" ";						
				}else{
					resp += charSeparate + attribute;
					resp += ": - " ;
				}
			}
		}else{
			if(keyAttr != null){
				for(entitledItem in objAttrs){
					if(entitledItem.indexOf(keyAttr) >= 0){
						resp += charSeparate + entitledItem.substring(0, entitledItem.indexOf("_"));
						resp += ": " + entitledItem.substring(entitledItem.indexOf("_") + 1, entitledItem.length);
						break;
					}
				}
			}
		}		
		return resp;
	},
	
	
	prepareAttrButton: function(catentryId){
		//alert("catentryId = "+catentryId);
		var buttonElem = dojo.byId("despachoPriceCheckButton");
		//productDisplayJS.despachoPriceCheck('${defaultItemId}'); return false;
		if(catentryId != null && buttonElem != null && !(typeof buttonElem === 'undefined')){
			var text = buttonElem.getAttribute("onclick");
			if(dojo.trim(text)!= "" ){
			//Start CenReqNum#796
				//buttonElem.setAttribute("onclick","javascript:productDisplayJS.despachoPriceCheck('"+catentryId+"'); return false;");
				buttonElem.setAttribute("onclick","javascript:CENPrepareSubmit(document.despachoAddressEntryForm,'"+catentryId+"'); return false;");
			//End CenReqNum#796
			}
			//despachoPriceInfo
			buttonElem = dojo.byId("despachoPriceInfo");
			if(buttonElem != null && !(typeof buttonElem === 'undefined')){
				buttonElem.style.display = "none";
			}
		}
	},
	
	
	/**
	* Req.84 -> Productos con diferentes LT para sus hijos no actualizan ese valor en modal de Despacho de la PDP 
	* req84ProductsWithDifferentLT Sets an array of entitled items for a product. 
	*				   This function is used in CachedBundleDisplay.jsp to add all the entitled SKUs of the products in a particular bundle to this array.
	*				   The array that is generated is used later in {@link fastFinderJS.resolveSKU}.
	* 
	* @param {Object} entitledItemArray An object which holds both the catalog entry ID as well as an array of attributes for the entitled items of a product.
	*
	**/
	req84ProductsWithDifferentLT : function(){
		//selectedAttributes
		if(this.entitledItems != null && this.entitledItems.length > 0){
			var titleElement = dojo.byId("calculateShippingText");
			var titlePattern = dojo.byId("calculateShippingTextHidden"); 
			var catentryId = null;
			var found = false;
			var objItem = null;
			for(var index = 0; index <= this.entitledItems.length; index++){
				if(this.entitledItems[index] && this.entitledItems[index].Attributes){
					for(entitledItem in this.entitledItems[index].Attributes){
						var objAttr = dojo.trim(entitledItem);
						if(objAttr != ""){
							for(attribute in this.selectedAttributes){
								var attrValue = dojo.trim(this.selectedAttributes[attribute]);
								found |= attrValue != "" && objAttr === attribute+"_"+attrValue;
							}
							if(found){
								catentryId = this.entitledItems[index].catentry_id;
								objItem = this.entitledItems[index];
								break;
							}
						}				
					}
					if(found){
						break;
					}
				}
			}
			this.prepareAttrButton(catentryId);
			if(titleElement != null && titlePattern != null && !(typeof titleElement === 'undefined') && !(typeof titlePattern === 'undefined')){
				var text = dojo.trim(titlePattern.innerHTML);
				var attrText = this.getAttributeValue(this.selectedAttributes, null, "| ", true);				
				this.prepareMessage(titleElement, text, attrText, objItem);
			}			
		}
	},
	
	
	/**
	 * Req.84 -> Products with different LT for their children do not update this value in modal Dispatch PDP
	 * 1) If the customer does not select the attributes to simulate the shipping cost of the 
	 * first child published like of the family (same price rule) and display a set of words of 
	 * the son that being calculated. 
	 * 2) If the client selected attributes definition, simulate the selected Sku.
	 * 3) This is callled on click of chie express logo avaialable on PDP
	 * */
	
	
	req84PrepareSelectionDefaultCE: function(entitledItemId){
		console.debug("this.entitledItems = ",this.entitledItems);
		var entitledItemJSON;
		if((this.entitledItems == null || this.entitledItems.length == 0)){			
			if (dojo.byId(entitledItemId)!= null) {
				//the json object for entitled items are already in the HTML. 
				 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
			}else{
				//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
				//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
				entitledItemJSON = this.getEntitledItemJsonObject(); 
			}			
			this.setEntitledItems(entitledItemJSON);
		}
		if(this.entitledItems != null && this.entitledItems.length > 0){
			console.debug("this.selectedAttributes = ",this.selectedAttributes);
			var attributeArray = [];
			for(attribute in this.selectedAttributes){
				if(dojo.trim(this.selectedAttributes[attribute]) != ""){
					attributeArray.push(attribute + "_" + this.selectedAttributes[attribute]);
				}
			}
			if(attributeArray.length == 0){
				var titleElement = dojo.byId("calculateShippingTextCE");
				var titlePattern = dojo.byId("calculateShippingTextHiddenCE"); 
				var SEPARATE = "| ";
				if(titleElement != null && titlePattern != null && !(typeof titleElement === 'undefined') && !(typeof titlePattern === 'undefined')){
					var text = dojo.trim(titlePattern.innerHTML);
					if(this.entitledItems[0] && this.entitledItems[0].Attributes){
						var attrText = "";
						for(attribute in this.selectedAttributes){
							attrText += this.getAttributeValue(this.entitledItems[0].Attributes, attribute, SEPARATE);
						}
						this.prepareMessageCE(titleElement, text, attrText, this.entitledItems[0]);
					}
					// 1148 Chile Express
					if(null == this.getCatalogEntryId())
						this.prepareAttrButtonCE(this.entitledItems[0].catentry_id);
					else
						this.prepareAttrButtonCE(this.getCatalogEntryId());
				}
			}
			// fix for displaying product description,colour and size 
			else{
				this.req84ProductsWithDifferentLTCE();
			}
		}
	},
	
	
	
	prepareMessageCE: function (titleElement, text, attrText, objItem){
		/*MTHN DEFECT : 238 */		
		var first = text.substring(0, text.indexOf("{1}"))+" ";	
		/*MTHN DEFECT : 238 */	
		var productName = "";
		var element = dojo.byId("parentProductName");
		if(element != null && !(typeof element === 'undefined')){
			productName = " <b>"+ dojo.trim(element.innerHTML).replace(".","") + "</b> "; 
		}
		first += productName;
		//calculateShippingText_2_Hidden;
		var second = "", second2 = "", tmp = "";		
		if(attrText != ""){
			var elem = dojo.byId("calculateShippingText_2_Hidden_CE");
			var pElem = dojo.byId("calculateShippingText_2_Nota_CE");
			if(elem != null && !(typeof elem === 'undefined') && pElem != null && !(typeof pElem === 'undefined')){
				second = dojo.trim(elem.innerHTML);
				second2 = second.substring(second.indexOf("{2}")+3, second.length);
				var textTemp = second.substring(0, second.indexOf("{2}"));
				// Nota text is removed in new wireframe, so no need the below lines.
				//second = "<b>" + textTemp.substring(textTemp.indexOf("Nota:"), textTemp.indexOf("Nota:")+"Nota:".length);
				//textTemp = "</b>" + textTemp.substring(textTemp.indexOf("Nota:")+"Nota:".length, textTemp.length);
				//second += textTemp;
				second = textTemp;
				for(attribute in this.selectedAttributes){
					if(attribute.indexOf("_") > 0){
						tmp+= attribute.toLowerCase().substring(0, attribute.indexOf("_")) + "/";
					}else{
						tmp+= attribute.toLowerCase() + "/";
					}
				}
				if(tmp.length > 0)
					tmp = tmp.substring(0, tmp.length - 1);
				//tmp += "tama\u00F1o";
				pElem.innerHTML = second + tmp + second2;
				pElem.style.display = "block";
			}
		}
		second = text.substring(text.indexOf("{1}")+3,text.length);
		//second +=  tmp + second2;
		if(objItem != null && objItem.weightText && second.indexOf("{0}") > 0){
			second2 = second.substring(second.indexOf("{0}")+3, second.length);
			second = second.substring(0, second.indexOf("{0}"));
			second += objItem.weightText + second2;
			titleElement.innerHTML = first + (attrText != ""?"<b>"+attrText+"</b>":attrText) + second;
		}else{
			this.req84PrepareSelectionDefaultCE();
		}		
	},

		prepareAttrButtonCE: function(catentryId){
		//alert("catentryId = "+catentryId);
		var buttonElem = dojo.byId("chileExpressPriceCheckButton");
		//productDisplayJS.despachoPriceCheck('${defaultItemId}'); return false;
		if(catentryId != null && buttonElem != null && !(typeof buttonElem === 'undefined')){
			var text = buttonElem.getAttribute("onclick");
			if(dojo.trim(text)!= "" ){
			//Start CenReqNum#796
				//buttonElem.setAttribute("onclick","javascript:productDisplayJS.despachoPriceCheck('"+catentryId+"'); return false;");
				buttonElem.setAttribute("onclick","javascript:productDisplayJS.CENPrepareCESubmit(document.chileExpressAddressEntryForm,'"+catentryId+"'); return false;");
			//End CenReqNum#796
			}
			//despachoPriceInfo
			buttonElem = dojo.byId("chileExpPriceInfo");
			if(buttonElem != null && !(typeof buttonElem === 'undefined')){
				buttonElem.style.display = "none";
			}
		}
	},
	
	/**
	* Req.84 -> Productos con diferentes LT para sus hijos no actualizan ese valor en modal de Despacho de la PDP 
	* req84ProductsWithDifferentLT Sets an array of entitled items for a product. 
	*				   This function is used in CachedBundleDisplay.jsp to add all the entitled SKUs of the products in a particular bundle to this array.
	*				   The array that is generated is used later in {@link fastFinderJS.resolveSKU}.
	* 
	* @param {Object} entitledItemArray An object which holds both the catalog entry ID as well as an array of attributes for the entitled items of a product.
	*
	**/
	
	req84ProductsWithDifferentLTCE : function(){
		//selectedAttributes
		if(this.entitledItems != null && this.entitledItems.length > 0){
			var titleElement = dojo.byId("calculateShippingTextCE");
			var titlePattern = dojo.byId("calculateShippingTextHiddenCE"); 
			var catentryId = null;
			var found = false;
			var objItem = null;
			for(var index = 0; index <= this.entitledItems.length; index++){
				if(this.entitledItems[index] && this.entitledItems[index].Attributes){
					for(entitledItem in this.entitledItems[index].Attributes){
						var objAttr = dojo.trim(entitledItem);
						if(objAttr != ""){
							for(attribute in this.selectedAttributes){
								var attrValue = dojo.trim(this.selectedAttributes[attribute]);
								found |= attrValue != "" && objAttr === attribute+"_"+attrValue;
							}
							if(found){
								catentryId = this.entitledItems[index].catentry_id;
								objItem = this.entitledItems[index];
								break;
							}
						}				
					}
					if(found){
						break;
					}
				}
			}
			this.prepareAttrButtonCE(catentryId);
			if(titleElement != null && titlePattern != null && !(typeof titleElement === 'undefined') && !(typeof titlePattern === 'undefined')){
				var text = dojo.trim(titlePattern.innerHTML);
				var attrText = this.getAttributeValue(this.selectedAttributes, null, "| ", true);				
				this.prepareMessageCE(titleElement, text, attrText, objItem);
			}			
		}
	},
	

	/** 
	 * Displays price of the catEntry selected with the JSON object returned from the server.
	 * 
	 * @param {object} serviceRepsonse The JSON response from the service.
	 * @param {object} ioArgs The arguments from the service call.
	 */	
	 displayPriceServiceResponse : function(serviceResponse, ioArgs){
		
		if(categoryDisplayJS.isSkuResolved){
			//stores the json object, so that the service is not called when same catEntry is selected.
			categoryDisplayJS.itemPriceJsonOject[serviceResponse.catalogEntry.catalogEntryIdentifier.uniqueID] = serviceResponse;
			 
			if(document.getElementById('nectarpoints') != null){
				var offerprice = serviceResponse.catalogEntry.offerPrice;
				var listprice = serviceResponse.catalogEntry.listPrice;			
				var points = categoryDisplayJS.calculateNectarPoints (offerprice) ;
				document.getElementById('nectarpoints').innerHTML =  points +" Puntos Nectar";			
			}
			// MHTN : hide default OO Stock,Limited Stock message
			if(document.getElementById('ooStock')){
				document.getElementById('ooStock').style.display = "none";
			}
			if(document.getElementById('limitedStock')){
				document.getElementById('limitedStock').style.display = "none";
			}
			// MHTN : hide default OO Stock,Limited Stock message
			
			if(!categoryDisplayJS.isPopup){
				// MHTN : Don't display this message
				/*if(document.getElementById('inventoryMsg')){
					if(serviceResponse.catalogEntry.inventoryMsg != null && serviceResponse.catalogEntry.inventoryMsg != 'undefined'){
						document.getElementById('inventoryMsg').innerHTML =  serviceResponse.catalogEntry.inventoryMsg;
					}else{
						document.getElementById('inventoryMsg').innerHTML = "";
					}
				}*/
				
				if(dojo.trim(serviceResponse.catalogEntry.displayAddToCartButton)=="false" || (serviceResponse.catalogEntry.availabe_msg != "" && 
						serviceResponse.catalogEntry.availabe_msg == 'Producto sin stock') ){
					document.getElementById('ajaxAddToCart_pdp').style.display = "none";
					document.getElementById('availability_msg').style.display = "block";
					document.getElementById('productQty').style.display = "none";
					document.getElementById('availability_msg').innerHTML = serviceResponse.catalogEntry.availabe_msg;
				}
				else if(dojo.trim(serviceResponse.catalogEntry.displayAddToCartButton)=="false" || !(serviceResponse.catalogEntry.availabe_msg != "" && 
						serviceResponse.catalogEntry.availabe_msg == 'Producto sin stock') ){
					document.getElementById('ajaxAddToCart_pdp').style.display = "block";
					document.getElementById('availability_msg').style.display = "block";
					document.getElementById('productQty').style.display = "block";
					document.getElementById('availability_msg').innerHTML = serviceResponse.catalogEntry.availabe_msg;
				}
				
				else{					
					if(serviceResponse.catalogEntry.availabe_msg != null 
							   && serviceResponse.catalogEntry.availabe_msg != 'undefined'){
						document.getElementById('availability_msg').innerHTML = serviceResponse.catalogEntry.availabe_msg;
					}
					else{
						document.getElementById('availability_msg').style.display = "none";
					}					
					document.getElementById('ajaxAddToCart_pdp').style.display = "block";
					document.getElementById('productQty').style.display = "block";
				}
				//wc.render.updateContext("PhysicalStoreInvContext", {itemId:serviceResponse.catalogEntry.catalogEntryIdentifier.uniqueID});
			}else{
				// MHTN : Don't display this message
				/*if(document.getElementById('inventoryMsg_qv')){
					if(serviceResponse.catalogEntry.inventoryMsg != null && serviceResponse.catalogEntry.inventoryMsg != 'undefined'){
						document.getElementById('inventoryMsg_qv').innerHTML =  serviceResponse.catalogEntry.inventoryMsg;
					}else{
						document.getElementById('inventoryMsg_qv').innerHTML = "";
					}
				}*/
				if(dojo.trim(serviceResponse.catalogEntry.displayAddToCartButton)=="false" || (serviceResponse.catalogEntry.availabe_msg != "" && 
						serviceResponse.catalogEntry.availabe_msg == 'Producto sin stock')){
					document.getElementById('addToCartLinkAjax').style.display = "none";
					document.getElementById('availability_msg_qv').style.display = "block";
					document.getElementById('productQuantity_qv').style.display = "none";
					//document.getElementById('availability_msg_qv').innerHTML = serviceResponse.catalogEntry.availabe_msg;
					document.getElementById('outofstockstockdisplayid').style.display="block";
				}
				else if(serviceResponse.catalogEntry.availabe_msg == ''){
					document.getElementById('outofstockstockdisplayid').style.display="none";
					document.getElementById('productPopUpQty').style.display = "block";
					document.getElementById('addToCartLinkAjax').style.display = "block";
					document.getElementById('addToCartAjaxButton1').style.display = "block";
					document.getElementById('productPopUpQty').style.display = "block";
					document.getElementById('productQuantity_qv').style.display = "block";
					document.getElementById('availability_msg_qv').style.display = "none";
					document.getElementById('limitedstockdisplayid').style.display = "none";	
				}
				else if(!(serviceResponse.catalogEntry.availabe_msg == 'Producto sin stock') && !(serviceResponse.catalogEntry.availabe_msg == '')){
					document.getElementById('outofstockstockdisplayid').style.display="none";
					document.getElementById('availability_msg_qv').style.display = "none";
					document.getElementById('productPopUpQty').style.display = "block";
					document.getElementById('productQuantity_qv').style.display = "block";
					document.getElementById('addToCartLinkAjax').style.display = "block";
					document.getElementById('addToCartAjaxButton1').style.display = "block";
					document.getElementById('limitedstockdisplayid').style.display = "block";	

					
				}
				else{
					if(serviceResponse.catalogEntry.availabe_msg != null 
							   && serviceResponse.catalogEntry.availabe_msg != 'undefined' && serviceResponse.catalogEntry.availabe_msg != ""){
						document.getElementById('availability_msg_qv').innerHTML = serviceResponse.catalogEntry.availabe_msg;
					}
					
					else{
						document.getElementById('availability_msg_qv').style.display = "none";
					}					
					document.getElementById('addToCartLinkAjax').style.display = "block";
					document.getElementById('productQuantity_qv').style.display = "block";
				}
			}
			categoryDisplayJS.displayPrice(serviceResponse.catalogEntry);
		}
		if(!categoryDisplayJS.isPopup){
			categoryDisplayJS.updateFlyoutViewer(serviceResponse.catalogEntry.catalogEntryIdentifier.externalIdentifier.partNumber);
		}
	 },

	 calculateNectarPoints: function(offerprice){
			var removeDollarFromOffer = offerprice.split('$');
			var finalPrice = 0 ;
			if(removeDollarFromOffer[1] != null && removeDollarFromOffer[1] != undefined){
				finalPrice = removeDollarFromOffer[1];
			}
			
			var pointsFactor = 200 ;
			if(document.getElementById('pointsFactorId') != null  && document.getElementById('pointsFactorId') != undefined){
				pointsFactor = document.getElementById('pointsFactorId').value;
			}
			var modVal = finalPrice % pointsFactor ;
			var points = 0;
			if(modVal != 0 ){
				var add = 0;
				if(modVal > pointsFactor/2)
					add = 1;			
				points = ((finalPrice - modVal)  / pointsFactor ) + add;
			}else{
				points = finalPrice / pointsFactor;
			}
			
			return points;
	 },
	 
	 
	/** 
	 * Displays price of the attribute selected with the JSON oject.
	 * 
	 * @param {object} catEntry The JSON object with catalog entry details.
	 */	
	 displayPrice : function(catEntry){

		var tempString;
		var popup = categoryDisplayJS.isPopup;
		var shipModeId = catEntry.shipModeId;
		/*MTHN: CLICK AND COLLECT  functionality in Product Details page mady by Murugan:START*/
		if(document.getElementById('shipModeIcon') && document.getElementById('shipModeIcon1')){
			if(shipModeId == "false"){
				//document.getElementById('shipModeIcon').style.display = 'none';
				//document.getElementById('shipModeIcon1').style.display = 'none';
				jQuery('#despacho_d2').click();
				jQuery('#retiro_t').hide();
				jQuery('#shipModeIcon1').addClass('oculta_icon');
				jQuery('#shipModeIcon').addClass('oculta_icon');
			}else{
				//document.getElementById('shipModeIcon').style = 'padding-left:50px; margin-top: -50px;';
				//document.getElementById('shipModeIcon').style.display = 'block';
				//document.getElementById('shipModeIcon1').style.display = 'block';
				jQuery('#despacho_d2').click();
				jQuery('#retiro_t').show();
				jQuery('#retiro_t').removeClass('oculta_icon');
				jQuery('#retiro_t2').removeClass('oculta_icon');
				jQuery('#shipModeIcon1').removeClass('oculta_icon');
				jQuery('#shipModeIcon').removeClass('oculta_icon');
			}
		}
		/*MTHN: CLICK AND COLLECT  functionality in Product Details page mady by Murugan:END*/
		if(popup == true){
			
			document.getElementById('productSKUValue').innerHTML = catEntry.catalogEntryIdentifier.externalIdentifier.partNumber;
			document.getElementById('productName').innerHTML = catEntry.description[0].name;
			
			var innerHTML = "";
			/*START REQ 291: 3rd Price*/
			var elem = dojo.byId("productQuantity");
			if(elem)elem.style.marginTop="0px";
			/*END REQ 291: 3rd Price*/
			if(catEntry.isTarjetaMas){
				var tmp = "";
				/*START REQ 291: 3rd Price*/
				if((catEntry.listPriced) && parseFloat(catEntry.listPriceAmount) > parseFloat(catEntry.offerPriceAmount)){
					tmp = "margin-bottom: 2px;";
				}
				/*END REQ 291: 3rd Price style='"+tmp+"'*/
				innerHTML = "<span class='price-first'>" + catEntry.tarjetaPrice + "</span>"+
							"<span class='tarjeta_mas_img'></span>"+
							"<div class='price-second precio_internet'>" + MessageHelper.messages['INTERNET_PRICE'] + catEntry.offerPrice + "</div>";
				/*START REQ 291: 3rd Price*/
				if((catEntry.listPriced) && parseFloat(catEntry.listPriceAmount) > parseFloat(catEntry.offerPriceAmount)){
    				innerHTML += "<div class='price-second precio_normal'>" + MessageHelper.messages['NORMAL_PRICE'] + catEntry.listPrice + "</div>";
    				var elem = dojo.byId("productQuantity");
    				//if(elem)elem.style.marginTop="15px";
    				if(elem)elem.style.marginTop="5px";
    			}
				/*END REQ 291: 3rd Price*/
			}
			else if((catEntry.listPriced) && parseFloat(catEntry.listPriceAmount) > parseFloat(catEntry.offerPriceAmount)){
				innerHTML = "<span class='price-first'>" + catEntry.offerPrice + "</span>"+
							"<div class='price-second precio_normal'>" + MessageHelper.messages['NORMAL_PRICE'] + catEntry.listPrice + "</div>";
			}
			else{
				innerHTML = "<span class='price-first'>" + catEntry.offerPrice + "</span>";
			}
			innerHTML = innerHTML + "<br />";
			document.getElementById('productPrice').innerHTML = innerHTML;
			
			if ((catEntry.description[0].fullImage != null) && (catEntry.description[0].fullImage != undefined)){
				if(document.getElementById('productFullImage_quickInfo') != null  && document.getElementById('productFullImage_quickInfo') !=  undefined)
					document.getElementById('productFullImage_quickInfo').src = catEntry.description[0].fullImage;
			}
			
		}
		
		if(popup == false){
			var innerHTML = "";
			if(catEntry.isTarjetaMas){
				//updated for 1099 begins
				innerHTML = "<div class='price offerPrice bold'>" + catEntry.tarjetaPrice +"&nbsp;" + 
							"<span class='tarjeta_mas_img'></span>"+"</div>"+
							"<div class='sub-price precio_internet'>" + MessageHelper.messages['INTERNET_PRICE']  /*+"&nbsp;"*/ + catEntry.offerPrice + "</div>";
				if((catEntry.listPriced) &&  parseFloat(catEntry.listPriceAmount) > parseFloat(catEntry.offerPriceAmount)){
					innerHTML += "<div class='sub-price precio_normal'>" + MessageHelper.messages['NORMAL_PRICE'] /*+ "&nbsp;"*/ + catEntry.listPrice + "</div>";
				}
			}
			else if((catEntry.listPriced) &&  parseFloat(catEntry.listPriceAmount) > parseFloat(catEntry.offerPriceAmount)){
				innerHTML = "<div class='price offerPrice bold'>" + catEntry.offerPrice + "</div>"+
							"<div class='sub-price precio_normal'>" + MessageHelper.messages['NORMAL_PRICE'] /*+ "&nbsp;"*/ + catEntry.listPrice + "</div>";
			}
			else{
				innerHTML = "<div class='price offerPrice bold'>" + catEntry.offerPrice + "</div>";
			}

			//innerHTML = innerHTML +	"<br />"; updated for 1099 ends
			
			if(categoryDisplayJS.displayPriceRange == true){
				for(var i in catEntry.priceRange){
					if(catEntry.priceRange[i].endingNumberOfUnits != 'null'){
						tempString = MessageHelper.messages['TieredPricingDisp'];
						tempString = tempString.replace('{0}',catEntry.priceRange[i].startingNumberOfUnits);
						tempString = tempString.replace('{1}',catEntry.priceRange[i].endingNumberOfUnits);
						tempString = tempString.replace('{2}',catEntry.priceRange[i].localizedPrice);
						innerHTML = innerHTML + "<span class='price bold'>" + tempString + "</span>";;
					}
					else{
						tempString = MessageHelper.messages['TieredPricingDispLast'];
						tempString = tempString.replace('{0}',catEntry.priceRange[i].startingNumberOfUnits);
						tempString = tempString.replace('{1}',catEntry.priceRange[i].localizedPrice);
						innerHTML = innerHTML + "<span class='price bold'>" + tempString + "</span>";;
					}
					innerHTML = innerHTML + "<br />";
				}
			}
			
			
			var currPartNumber = catEntry.catalogEntryIdentifier.externalIdentifier.partNumber;
			if((currPartNumber.substring(currPartNumber.length-1,currPartNumber.length)) == '-'){
				currPartNumber = currPartNumber.substring(0,currPartNumber.length-1);
			}
			
			document.getElementById('WC_CachedProductOnlyDisplay_div_4').innerHTML = innerHTML;
			document.getElementById('catalog_link').innerHTML = catEntry.description[0].name;
		}
		
		if ((typeof installmentsTooltip != 'undefined') && (installmentsTooltip)){
			document.getElementById('normalInstallmentProductPrice').value = catEntry.isTarjetaMas ? catEntry.tarjetaPriceAmount : catEntry.offerPriceAmount;
			installmentsTooltip.recalculateInstallments(dojo.query("#productQty input")[0].value, catEntry.catalogEntryIdentifier.uniqueID);
		}
	 },	
	
	/**
	* setSelectedAttributeOfProduct Sets the selected attribute value for an attribute of a specified product.
	*								This function is used to set the assigned value of defining attributes to specific 
	*								products which will be stored in the selectedProducts map.
	*
	* @param {String} productId The catalog entry ID of the catalog entry to use.
	* @param {String} selectedAttributeName The name of the attribute.
	* @param {String} selectedAttributeValue The value of the selected attribute.
	*
	**/
	setSelectedAttributeOfProduct : function(productId,selectedAttributeName,selectedAttributeValue){
		
		selectedAttributesForProduct = new Object();

		if(this.selectedProducts[productId]) selectedAttributesForProduct = this.selectedProducts[productId];
		
		selectedAttributesForProduct[selectedAttributeName] = selectedAttributeValue;
		this.selectedProducts[productId] = selectedAttributesForProduct;
		
	},
	
	// Function for subcategory display pagination	
	
	/**
	* gotoASubCategoryDisplayPage  This function is used to validate the entered page number and loads the page if valid or displays an error message otherwise.
	*
	* @param {String} pageNum The page number entered.
	* @param {String} totalPages The total number of pages.
	* @param {String} pageSize The page size.
	* @param {String} subCatDispUrl The sub category display URL.
	*
	**/
	gotoASubCategoryDisplayPage : function(pageNum, totalPages, pageSize, subCatDispUrl) {
		pageNum = trim(pageNum);
		if (pageNum == "") {	
			 MessageHelper.formErrorHandleClient(document.getElementById('subCategoriesListDisplayPageNum').id,MessageHelper.messages['ERROR_EMPTY_NUM']);
			return;
		}
		
		if (MessageHelper.IsNumeric(pageNum,false) == false){ 
			 MessageHelper.formErrorHandleClient(document.getElementById('subCategoriesListDisplayPageNum').id,MessageHelper.messages['ERROR_PAGE_NUM']);

			return;
		}	
		
		if (pageNum >= 1 && pageNum <= totalPages) {
		    MessageHelper.hideAndClearMessage();
			var url = subCatDispUrl + "&beginIndex=" + ((pageNum-1) * pageSize);
			this.loadSubCategoryContentURL(url)
		} else {
			MessageHelper.formErrorHandleClient(document.getElementById('subCategoriesListDisplayPageNum').id,MessageHelper.messages['ERROR_PAGE_NUM']);
			
			return;
		}
	}, 

	/**
	* getCatalogEntryId Returns the catalog entry ID of the catalog entry with the selected attributes as specified in the {@link fastFinderJS.selectedAttributes} value.
	*					This method uses {@link fastFinderJS.resolveSKU} to find the SKU with the selected attributes values.
	*
	* @see fastFinderJS.resolveSKU
	*
	* @return {String} catalog entry ID.
	*
	**/
	getCatalogEntryId : function(){
		var attributeArray = [];
		for(attribute in this.selectedAttributes){
			if(dojo.trim(this.selectedAttributes[attribute]) != ""){
				attributeArray.push(attribute + "_" + this.selectedAttributes[attribute]);
			}
		}
		return this.resolveSKU(attributeArray);
	},
	
	/**
	* getCatalogEntryIdforProduct Returns the catalog entry ID for a catalog entry that has the same attribute values as a specified product's selected attributes as passed in via the selectedAttributes parameter.
	*
	* @param {String[]} selectedAttributes The array of selected attributes upon which to resolve the SKU.
	*
	* @return {String} catalog entry ID of the SKU.
	*
	**/
	getCatalogEntryIdforProduct : function(selectedAttributes){
		var attributeArray = [];
		for(attribute in selectedAttributes){
			attributeArray.push(attribute + "_" + selectedAttributes[attribute]);
		}
		return this.resolveSKU(attributeArray);
	},

	/**
	* getCatalogEntryIdforBundleProduct Returns the catalog entry ID for a catalog entry that has the same attribute values as a specified product's selected attributes as passed in via the selectedAttributes parameter.
	*
	* @param {String[]} selectedAttributes The array of selected attributes upon which to resolve the SKU.
	*
	* @return {String} catalog entry ID of the SKU.
	*
	**/
	getCatalogEntryIdforBundleProduct : function(productId, selectedAttributes){
		var attributeArray = [];
		for(attribute in selectedAttributes){
			attributeArray.push(attribute + "_" + selectedAttributes[attribute]);
		}
		return this.resolveSKUForBundleProduct(productId, attributeArray);
	},


	/**
	* resolveSKU Resolves a SKU using an array of defining attributes.
	*
	* @param {String[]} attributeArray An array of defining attributes upon which to resolve a SKU.
	*
	* @return {String} catentry_id The catalog entry ID of the SKU.
	*
	**/
	resolveSKU : function(attributeArray){
	
		var catentry_id = "";
		var maxMatchPartNum = "";
		var attributeArrayCount = attributeArray.length;
		var maxMatchCount = 0;
		
		for(x in this.entitledItems){
			var catentry_id = this.entitledItems[x].catentry_id;
			var partnumber = this.entitledItems[x].partnumber;
			var Attributes = this.entitledItems[x].Attributes;
			var attributeCount = 0;
			for(index in Attributes){
				attributeCount ++;
			}

			if (attributeArrayCount == 0 && attributeCount == 0){ //Handle special case where a catalog entry has one sku with no attributes
				return catentry_id;
			} else if ((attributeCount != 0) && (attributeArrayCount >= attributeCount)){ //If the number of selected attributes matches the required.
				var matchedAttributeCount = 0;
				for(attributeName in attributeArray){
					var attributeValue = attributeArray[attributeName];
					if(attributeValue in Attributes){
						matchedAttributeCount ++;
					}
				}
				
				if(attributeCount == matchedAttributeCount){ //sku has been resolved. Return the SKU's catentry id 
					categoryDisplayJS.isSkuResolved=true;
					return catentry_id;
				}
			} else if ((!this.isPopup) && (attributeCount != 0) && (attributeArrayCount < attributeCount)) { //If the number of selected attributes does not match the required
				
				var attrCount = 0;
				for(attributeName in attributeArray){
					var attrVal = attributeArray[attributeName];
					if(attrVal in Attributes){
						attrCount++;
					}
				}
				
				if(attrCount>maxMatchCount){
					maxMatchCount=attrCount;
					maxMatchPartNum=partnumber;
				}
			}
		}
		
		if(!this.isPopup && !this.fromPLP){ //if on the PDP update the s7 viewer with the most matched sku
			categoryDisplayJS.updateFlyoutViewer(maxMatchPartNum);
		}
		
		//if a sku could not be resolved return null
		return null;
	},

	/**
	* resolveSKUForBundleProduct Resolves a SKU using an array of defining attributes. Function to be used for bundles since there can be multiple products in the bundle.
	*
	* @param {String} productId One of product id from the bundle.
	* @param {String[]} attributeArray An array of defining attributes upon which to resolve a SKU.
	*
	* @return {String} catentry_id The catalog entry ID of the SKU.
	*
	**/
	resolveSKUForBundleProduct : function(productId, attributeArray){
	
		console.debug("Resolving SKU >> " + attributeArray +">>"+ this.entitledItemsArray[productId]);
		var catentry_id = "";
		var attributeArrayCount = attributeArray.length;
		
		for(x in this.entitledItemsArray[productId]){
			var catentry_id = this.entitledItemsArray[productId][x].catentry_id;
			var Attributes = this.entitledItemsArray[productId][x].Attributes;
			var attributeCount = 0;
			for(index in Attributes){
				attributeCount ++;
			}

			// Handle special case where a catalog entry has one sku with no attributes
			if (attributeArrayCount == 0 && attributeCount == 0){
				return catentry_id;
			}
			if(attributeCount != 0 && attributeArrayCount >= attributeCount){
				var matchedAttributeCount = 0;

				for(attributeName in attributeArray){
					var attributeValue = attributeArray[attributeName];
					if(attributeValue in Attributes){
						matchedAttributeCount ++;
					}
				}
				
				if(attributeCount == matchedAttributeCount){
					console.debug("CatEntryId:" + catentry_id + " for Attribute: " + attributeArray);
					return catentry_id;
				}
			}
		}
		return null;
	},

	/**
	* updateParamObject This function updates the given params object with a key to value pair mapping.
	*				    If the toArray value is true, It creates an Array for duplicate entries otherwise it overwrites the old value.
	*			        This is useful while making a service call which accepts a few parameters of type array.
	*					This function is used to prepare a a map of parameters which can be passed to XMLHttpRequests. 
	* 					The keys in this parameter map will be the name of the parameter to send and the value is the corresponding value for each parameter key.
	* @param {Object} params The parameters object to add name value pairs to.
	* @param {String} key The new key to add.
	* @param {String} value The new value to add to the specified key.
	* @param {Boolean} toArray Set to true to turn duplicate keys into an array, or false to override previous values for a specified key.
	* @param {int} index The index in an array of values for a specified key in which to place a new value.
	*
	* @return {Object} params A parameters object holding name value pairs.
	*
	**/
	updateParamObject:function(params, key, value, toArray, index){
	
	   if(params == null){
		   params = [];
	   }

	   if(params[key] != null && toArray)
	   {
			if(dojo.lang.isArrayLike(params[key]))
			{
				//3rd time onwards
			    if(index != null && index != "")
				{
					//overwrite the old value at specified index
				     params[key][index] = value;
				}
				else
				{
				    params[key].push(value);
			     }
		    }
			else
			{
			     //2nd time
			     var tmpValue = params[key];
			     params[key] = [];
			     params[key].push(tmpValue);
			     params[key].push(value);
		    }
	   }
	   else
	   {
			//1st time
		   if(index != null && index != "" && index != -1)
		   {
		      //overwrite the old value at specified index
		      params[key+"_"+index] = value;
		   }
		   else if(index == -1)
		   {
		      var i = 1;
		      while(params[key + "_" + i] != null)
			  {
			       i++;
		      }
		      params[key + "_" + i] = value;
		   }
		   else
		   {
		      params[key] = value;
		    }
	   }
	   return params;
	 },
	 
	 /**
	  *  This function associates the product id with its first entitledItemId.
	  *  @param {String} productId The id of the product.
	  *  @param {String} entitledItemId The id of the first entitledItem of the product.
	  */
	 setDefaultItem : function(productId,entitledItemId){
		this.defaultItemArray[productId] = entitledItemId;
		
},
	/*
     *	This function retrieves the first entitledItemId of the product.
	 *  @param {String} productId The id of the product.
	 *  
	 *  @return {String} The id of the first entitledItem of the product.
	 */
getDefaultItem : function(productId){
		return this.defaultItemArray[productId];
},


	/**
	* AddBundle2ShopCartAjax This function is used to add a bundle to the shopping cart. This is for the ajax flow which will take a form as input and retrieves all the items catentry IDs and adds them to the form.
	*						 
	* @param {form} form The form which contains all the inputs for the bundle.
	*					 The form is expected to have the following values: 
	*						numberOfProducts The number of products in the bundle.
	*						catEntryId_<index> where index is between 1 and numberOfProduct.
	*						quantity_<index> where index is between 1 and numberOfProduct.
	**/
	AddBundle2ShopCartAjax : function(form){
		
		var params = [];
		//var queryString = dojo.io.encodeForm(dojo.byId(form));

		params.storeId		= this.storeId;
		params.catalogId	= this.catalogId;
		params.langId		= this.langId;
		params.orderId		= ".";
		params.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";
			
		var productCount = form["numberOfProduct"].value;
		for(var i = 1; i <= productCount; i++){
			var catEntryId = form["catEntryId_" + i].value;
			if(this.selectedProducts[catEntryId])
				catEntryId = this.getCatalogEntryIdforBundleProduct(catEntryId, this.selectedProducts[catEntryId]);
			var qty = form["quantity_" + i].value;
			if(qty == null || qty == "" || qty<=0){ MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']); return;}
			if(qty!=null && qty!='' && catEntryId!=null){
				this.updateParamObject(params,"catEntryId",catEntryId,false,-1);
				this.updateParamObject(params,"quantity",qty,false,-1);
				this.baseItemAddedToCart=true;
			}
			else{
				MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
				return;
			}
			var contractIdElements = document.getElementsByName('contractSelectForm_contractId_' + catEntryId);
			if (contractIdElements != null && contractIdElements != "undefined") {
				for (j=0; j<contractIdElements.length; j++) {
					if (contractIdElements[j].checked) {
						form["contractId_" + i].value = contractIdElements[j].value;
						break;
					}
				}
			}
			var contractId = form["contractId_" + i].value;
			if (contractId != null && contractId != '') {
				this.updateParamObject(params,"contractId",contractId,false,-1);
			}
		}
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   		
		cursor_wait();		
		wc.service.invoke("AjaxAddOrderItem", params);

	},


	/**
	* AddBundle2ShopCart This function is used to add a bundle to the shopping cart. This is for the non ajax flow which  will take a form as input and submits the form.
	*
	* @param {form} form The form which contains all the inputs for the bundle.
	*					 The form is expected to have the following values:
	*						numberOfProducts The number of products in the bundle.
	*						catEntryId_<index> where index is between 1 and numberOfProduct.
	*						quantity_<index> where index is between 1 and numberOfProduct. 
	*
	**/
	AddBundle2ShopCart : function(form){
		
		form.URL.value = "AjaxOrderItemDisplayView";
		var productCount = form["numberOfProduct"].value;
		for(var i = 1; i <= productCount; i++){
			var catEntryId = form["catEntryId_" + i].value;
			if(this.selectedProducts[catEntryId]){
				catEntryId = this.getCatalogEntryIdforBundleProduct(catEntryId, this.selectedProducts[catEntryId]);
				if(catEntryId != null)
				form["catEntryId_" + i].value = catEntryId;
				else{
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
					return;
				}
			}
			var qty = form["quantity_" + i].value;
			if(qty == null || qty == "" || qty<=0){ MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']); return;}
			var contractIdElements = document.getElementsByName('contractSelectForm_contractId_' + catEntryId);
			if (contractIdElements != null && contractIdElements != "undefined") {
				for (j=0; j<contractIdElements.length; j++) {
					if (contractIdElements[j].checked) {
						form["contractId_" + i].value = contractIdElements[j].value;
						break;
					}
				}
			}
		}
		
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}
		
		form.submit();
	},
	
	
	/**
	* Add2ShopCart This function is used to add to a catalog entry to the shopping cart. This will resolve the catentryId using entitledItemId and adds the item to the cart.
	*			   This function will call AddItem2ShopCart after resolving the entitledItemId to a SKU.
	*
	* @param {String} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {form} form The form which contains all the inputs for the item. The catEntryId and productId values of the form you pass in
	*					 will be set to the catalog entry Id of the SKU resolved from the list of skus whos defining attributes match those in the {@link fastFinderJS.selectedAttributes} array.
	* @param {int} quantity quantity of the item.
	* @param {String} isPopup If the value is true, then this implies that the function was called from a quick info pop-up.				
	*
	**/
	Add2ShopCart : function(entitledItemId,form,quantity,isPopup){
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		if(catalogEntryId!=null){
			if(this.merchandisingProductAssociationAddToCart){
				this.AddAssociation2ShopCart(catalogEntryId,quantity);
				return;
			}
			form.catEntryId.value = catalogEntryId;
			form.productId.value = catalogEntryId;
			this.AddItem2ShopCart(form,quantity);
			hidePopup('second_level_category_popup');
		} else if (isPopup == true){
			dojo.byId('second_level_category_popup').style.zIndex = '1';
			MessageHelper.formErrorHandleClient('addToCartLink', MessageHelper.messages['ERR_RESOLVING_SKU']);		
		} else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
		}

	},
	
	
	
	/**
	* AddItem2ShopCart This function is used to add a SKU to the shopping cart.
	*
	* @param {form} form The form which contains all the inputs for the item.
    * 					The form must have the following values:
    *						quantity The quantity of the item that you want to add to the cart.
	* @param {int} quantity The quantity of the item to add to the shopping cart.
	*
	**/
	AddItem2ShopCart : function(form,quantity){
		if(!isPositiveInteger(quantity)){
			MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']);
			return;
		}
		
		form.quantity.value = quantity;
		
		var contractIdElements = document.getElementsByName('contractSelectForm_contractId');
		if (contractIdElements != null && contractIdElements != "undefined") {
			for (i=0; i<contractIdElements.length; i++) {
				if (contractIdElements[i].checked) {
					form.contractId.value = contractIdElements[i].value;
					break;
				}
			}
		}
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}
		
		form.submit();
	},


	/**
	* Add2ShopCartAjax This function is used to add a catalog entry to the shopping cart using an AJAX call. This will resolve the catentryId using entitledItemId and adds the item to the cart.
	*				This function will resolve the SKU based on the entitledItemId passed in and call {@link fastFinderJS.AddItem2ShopCartAjax}.
	* @param {String} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {int} quantity The quantity of the item to add to the cart.
	* @param {String} isPopup If the value is true, then this implies that the function was called from a quick info pop-up. 	
	* @param {Object} customParams - Any additional parameters that needs to be passed during service invocation.
	*
	**/
	Add2ShopCartAjax : function(entitledItemId,quantity,isPopup,customParams)
	{	
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		// REq-1079 Pending - error message start
		var hasColor="";
		var hasSize="";
		var otherattr="";
		var otherattrname="";
		var talla="";
		var color="";
		var allowedValues = {};
		var valueArray =[];// to store color atributes of a particular sku Req#725
		var valueSizeArray =[];
		var attributesNum = 0;//number of color attributes in a particular sku Req#725
		var tallaAttributesNum = 0;
		
		if( entitledItemJSON.length>0){
			if(entitledItemJSON[0] && entitledItemJSON[0].Attributes){
				for(entitledItem in entitledItemJSON[0].Attributes){
					var objAttr = dojo.trim(entitledItem);
					var parts = objAttr.split("_");
					var name = parts[0];
					var value = parts[1];
					if( !name.startsWith('Talla') && !name.startsWith('Color')){
						if(valueArray.indexOf(parts[1])<=-1){
							valueArray[attributesNum]=parts[1];
						attributesNum+=1;
						otherattr="true";
						   	if (otherattr == 'true'){
						otherattrname = parts[0];
					}
						}
					}
				
					
					if(objAttr != ""){
						if(objAttr.startsWith('Color') && objAttr.indexOf('Color')!=-1  ){
							hasColor="true";
							if (hasColor == 'true'){
						color = parts[0];
					}
						}
						if(objAttr.startsWith('Talla') && objAttr.indexOf('Talla')!=-1 ) {
							hasSize="true";
							if (hasSize == 'true'){
						talla = parts[0];
					}
						}
					}
				}
			
			}
		}
		
		var otherAttrSelected = this.selectedAttributes[otherattrname];
		var selectedsSize=this.selectedAttributes[talla];
		var selectedsColor = this.selectedAttributes[color];
		// REq-1079 Pending - error message end
		
		if(catalogEntryId!=null){
			
			if((typeof productDisplayJS != 'undefined') && (productDisplayJS.svAddedPromo != null) && 
					(productDisplayJS.svAddedPromo != 'undefined') && (dojo.trim(productDisplayJS.svAddedPromo) != '')){
				
				this.AddItem2ShopCartAjax([catalogEntryId,productDisplayJS.svAddedPromo], [quantity,quantity], customParams);
			}else{
				this.AddItem2ShopCartAjax(catalogEntryId , quantity,customParams);
			}
			
			
			this.baseItemAddedToCart=true;
			hidePopup('second_level_category_popup');
			/*Req -1079 Swatches
			//swatches start 
			if(null!=document.getElementById("swatches_pdp")){
				var element = document.getElementById("swatches_pdp").children;
			for(var i=0;i<element.length; i++){
				if(element[i].id=='color_btn'){
					
						element[i].className = "";
					}
				}
			}
			//swatches  end 
			//swatches 1022 req start 
			if(null!=document.getElementById("size_swatches_pdp")){
				var element = document.getElementById("size_swatches_pdp").children;
			for(var i=0;i<element.length; i++){
				if(element[i].id=='color_btn'){
						element[i].className = "";
					}
				}
			}
			*/
			//swatches 1022 req end 
		}
		else if (isPopup == true){
			// REq-1079 Pending - error message start
			//MessageHelper.formErrorHandleClient('addToCartLinkAjax', MessageHelper.messages['ERR_RESOLVING_SKU']);
			if(objAttr != "" && hasSize=='true' && hasColor==""){
				if ((selectedsSize==null || selectedsSize== "")){
					MessageHelper.formErrorHandleClient('addToCartLinkAjax',MessageHelper.messages['ERR_RESOLVING_SKU_SIZE']);
					this.baseItemAddedToCart=false;
				}
			}
			if(objAttr != "" && hasSize=="" && hasColor=='true'){
				if ((selectedsColor==null || selectedsColor== "")){
					MessageHelper.formErrorHandleClient('addToCartLinkAjax',MessageHelper.messages['ERR_RESOLVING_SKU_COLOR']);
					this.baseItemAddedToCart=false;
				}
			}
			
			if(objAttr != "" && hasSize=='true' &&  hasColor=='true'){
				if ((selectedsSize==null || selectedsSize== "") && selectedsColor != undefined ){
					MessageHelper.formErrorHandleClient('addToCartLinkAjax',MessageHelper.messages['ERR_RESOLVING_SKU_SIZE']);
					this.baseItemAddedToCart=false;
				}
			}
			if(objAttr != "" && hasColor=='true'){
				if ((selectedsColor== null || selectedsColor== "") && selectedsSize != undefined ){
					MessageHelper.formErrorHandleClient('addToCartLinkAjax',MessageHelper.messages['ERR_RESOLVING_SKU_COLOR']);
					this.baseItemAddedToCart=false;
				}
			}
			if(objAttr != "" && hasSize=='true' &&  hasColor=='true'){
				if((selectedsColor== null || selectedsColor== "")&& (selectedsSize==null || selectedsSize== "")){
					MessageHelper.formErrorHandleClient('addToCartLinkAjax',MessageHelper.messages['ERR_RESOLVING_SKU']);
					this.baseItemAddedToCart=false;
				}
			}
			if ((otherAttrSelected == "" || otherAttrSelected ==undefined) && otherattr== 'true'){
				MessageHelper.formErrorHandleClient('addToCartLinkAjax',MessageHelper.messages['ERR_RESOLVING_SKU']);
			}
		} else{
		  if(objAttr != "" && hasSize=="" && hasColor=='true'){
				if ((selectedsColor==null || selectedsColor== "")){
					MessageHelper.formErrorHandleClient('addToCartLinkAjax',MessageHelper.messages['ERR_RESOLVING_SKU_COLOR']);
					this.baseItemAddedToCart=false;
				}
			}
			
			if(objAttr != "" && hasSize=='true' && hasColor==""){
				if ((selectedsSize==null || selectedsSize== "")){
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_SIZE']);
					this.baseItemAddedToCart=false;
				}
			}
			if(objAttr != "" && hasSize=='true' &&  hasColor=='true'){
				if ((selectedsSize==null || selectedsSize== "") && selectedsColor!="" ){
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_SIZE']);
					this.baseItemAddedToCart=false;
				}
			}
			if(objAttr != "" && hasColor=='true'){
				if ((selectedsColor== null || selectedsColor== "") && selectedsSize != ""){
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_COLOR']);
					this.baseItemAddedToCart=false;
				}
			}
			if(objAttr != "" && hasSize=='true' &&  hasColor=='true'){
				if((selectedsColor== null || selectedsColor== "")&& (selectedsSize==null || selectedsSize== "")){
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
					this.baseItemAddedToCart=false;
				}
			
			}
			if ((otherAttrSelected == "" || otherAttrSelected ==undefined) && otherattr== 'true'){
				MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
			}
			// REq-1079 Pending - error message end
			//MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
			//this.baseItemAddedToCart=false;
		}
		
		
	},
	
	/**
	* CenAdd2ShopCartAjax This function is used to add a catalog entry to the shopping cart using an AJAX call. This will resolve the catentryId using entitledItemId and adds the item to the cart.
	*				This function will resolve the SKU based on the entitledItemId passed in and call {@link fastFinderJS.AddItem2ShopCartAjax}.
	* This is Cencosud custom implementation for OOTB function Add2ShopCartAjax 
	* @param {String} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {int} quantity The quantity of the item to add to the cart.
	* @param {String} isPopup If the value is true, then this implies that the function was called from a quick info pop-up. 	
	* @param {Object} customParams - Any additional parameters that needs to be passed during service invocation.
	*
	**/
	CenAdd2ShopCartAjax : function(entitledItemId,quantity,isPopup,customParams)
	{	
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		
		if(catalogEntryId!=null){
			this.AddItem2ShopCartAjax(catalogEntryId , quantity,customParams);
			this.baseItemAddedToCart=true;
			hidePopup('second_level_category_popup');
		}
		else if (isPopup == true){
			dojo.byId('second_level_category_popup').style.zIndex = '1';
			MessageHelper.formErrorHandleClient('addToCartLinkAjax', MessageHelper.messages['ERR_RESOLVING_SKU']);		
		} else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
			this.baseItemAddedToCart=false;
			return false;
		}
		return false;
	},

	/**
	 * sets the entitledItemJsonObject
	 * @param (object) jsonObject the entitled item JSON objects
	 */
    setEntitledItemJsonObject: function(jsonObject) {
        this.entitledItemJsonObject = jsonObject;
    },
    
    /**
     * retrieves the entitledItemJsonObject
     */
    getEntitledItemJsonObject: function () {
    	return this.entitledItemJsonObject;
    },

	/**
	* ReplaceItemAjax This function is used to replace an item in the shopping cart when the AJAX Checkout flow is enabled. This will be called from the shopping cart and checkout pages.
	*
	* @param {String} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {int} quantity The quantity of the item to add to the shopping cart.
	*
	**/
	ReplaceItemAjax : function(entitledItemId,quantity){
	
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		var removeOrderItemId = "";
		//if(entitledItemJSON[0] != null){
		//	removeOrderItemId = entitledItemJSON[0].orderItemId_remove;
		//}
		var removeOrderItemId = replaceOrderItemId;
		var typeId = document.getElementById("shipmentTypeId");
		var addressId = "";
		var shipModeId = "";
		if(typeId != null && typeId != ""){
			if(typeId.value == "2"){
				//Multiple shipment..each orderItem will have its own addressId and shipModeId..
				addressId = document.getElementById("MS_ShipmentAddress_"+removeOrderItemId).value;
				shipModeId = document.getElementById("MS_ShippingMode_"+removeOrderItemId).value;
			}
			else {
				//Single Shipment..get the common addressId and shipModeId..
				addressId = document.getElementById("addressId_all").value;;
				shipModeId = document.getElementById("shipModeId_all").value;
			}
		}
		if(catalogEntryId!=null){
			if(removeOrderItemId == ""){
				//Just add new catentryId to shop cart in ajax way, since this is AjaxCheckout page
				//This code will never be executed, since we dont have Add To Cart link..
				/*var params = [];
				params.storeId		= this.storeId;
				params.catalogId	= this.catalogId;
				params.langId			= this.langId;
				params.orderId		= ".";
				params.catEntryId	= catalogEntryId;
				params.quantity		= quantity;
				params.addressId = addressId;
				params.shipModeId = shipModeId;
				wc.service.invoke("AjaxAddOrderItem", params);
				*/
			}
			else{
				//Else remove existing catEntryId and then add new one...
				this.ReplaceItemAjaxHelper(catalogEntryId,quantity,removeOrderItemId,addressId,shipModeId);
			}
		}
		else{
				MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
		}
	},

	/**
	* ReplaceItemNonAjax This function is used to replace an item in the shopping cart when the Non Ajax checkout flow is enabled. This will be called from shopcart and checkout pages.
	* 
	* @param {String} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {int} quantity The quantity of the item to replace in the shopping cart.
	* @param {form} form The form which contains all the inputs for the item.
	*
	**/ 
	ReplaceItemNonAjax : function(entitledItemId,quantity,form){
	
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		var removeOrderItemId = "";
		//if(entitledItemJSON[0] != null){
		//	removeOrderItemId = entitledItemJSON[0].orderItemId_remove;
		//}
		var removeOrderItemId = replaceOrderItemId;
		if(catalogEntryId!=null){
			if(removeOrderItemId == ""){
				//Prepare form to just add this item.. This code will never be executed...
				//Needed only when we plan to show add to cart link also in the quick info..
				//form.action = "orderChangeServiceItemAdd";
				//form.submit();
			}
			else{
				//Else remove existing catEntryId and then add new one...
				form.orderItemId.value = removeOrderItemId;
				var addressId, shipModeId;
				if(quantity == 0){
					console.debug("An invalid quantity was selected");

				}
				if(form.shipmentTypeId != null && form.shipmenTypeId != ""){
					if(form.shipmentTypeId.value == "2"){
						//Multiple shipment..each orderItem will have its own addressId and shipModeId..
						addressId = document.getElementById("MS_ShipmentAddress_"+removeOrderItemId).value;;
						shipModeId = document.getElementById("MS_ShippingMode_"+removeOrderItemId).value;;
					}
					else {
						//Single Shipment..get the common addressId and shipModeId..
						addressId = document.getElementById("addressId_all").value;;
						shipModeId = document.getElementById("shipModeId_all").value;
					}
					form.URL.value = "OrderChangeServiceItemAdd?calculationUsage=-1,-2,-3,-4,-5,-6,-7&catEntryId="+catalogEntryId+"&quantity="+quantity+"&addressId="+addressId+"&shipModeId="+shipModeId+"&URL=OrderChangeServiceShipInfoUpdate?URL="+form.URL.value;
			    }
				else{
					form.URL.value = "OrderChangeServiceItemAdd?calculationUsage=-1,-2,-3,-4,-5,-6,-7&catEntryId="+catalogEntryId+"&quantity="+quantity+"&URL="+form.URL.value;
				}

				//For Handling multiple clicks
				if(!submitRequest()){
					return;
				}
				
				form.submit();
			}
		}
		else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
		}
	},

	/**
	* AddItem2ShopCartAjax This function is used to add a single or multiple items to the shopping cart using an ajax call.
							If an array is passed for catEntryIdentifier and quantity parramters, then multiple items can be added.	In this case, catEntryIdentifier[i] corresponds to quantity[i]
							Else, catEntryIdentifier  and quantity parramters represent a single catalog entry.
	*
	* @param {Array|String} catEntryIdentifier An array of catalog entry identifiers or a single catalog entry ID of the item to add to the cart.
	* @param {Array|int} quantity An array of quantities corresponding to the catEntryIdentifier array or a single quantity of the item to add to the cart.
	* @param {Object} customParams - Any additional parameters that needs to be passed during service invocation.
	*
	**/
	AddItem2ShopCartAjax : function(catEntryIdentifier, quantity, customParams)
	{
		var params = [];
		params.storeId		= this.storeId;
		params.catalogId	= this.catalogId;
		params.langId		= this.langId;
		params.orderId		= ".";
		params.productId	= catEntryIdentifier;
		params.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";
		var ajaxShopCartService = "AjaxAddOrderItem";
		var nonAjaxShopCartService = "AjaxAddOrderItem_shopCart";
		
		if(dojo.isArray(catEntryIdentifier) && dojo.isArray(quantity)){
			for(var i=0; i<catEntryIdentifier.length; i++){
				if(!isPositiveInteger(quantity[i])){
					MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']);
					return;
				}
				params["catEntryId_" + (i+1)] = catEntryIdentifier[i];
				params["quantity_" + (i+1)]	= quantity[i];
			}
		}
		else{
			if(!isPositiveInteger(quantity)){
				MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']);
				return;
			}
			params.catEntryId	= catEntryIdentifier;
			params.quantity		= quantity;
		}		

		//Pass any other customParams set by other add on features
		if(customParams != null && customParams != 'undefined'){
			for(i in customParams){
				params[i] = customParams[i];
			}
			if(customParams['catalogEntryType'] == 'dynamicKit' ){
				ajaxShopCartService = "AjaxAddPreConfigurationToCart";
				nonAjaxShopCartService = "AjaxAddPreConfigurationToCart_shopCart";
			}
			if(customParams['isWarrantyItem']) {
				ajaxShopCartService = "AjaxWarrantyItemAddService";
			}
			// PAR 1157
			if(customParams['isOneClickPayment']) {
				params.orderId		= "**";
				currentId = customParams['sourceId'];
				ajaxShopCartService = "AjaxOneClickAddOrderItem";				
			}
		}

		var contractIdElements = document.getElementsByName('contractSelectForm_contractId');
		if (contractIdElements != null && contractIdElements != "undefined") {
			for (i=0; i<contractIdElements.length; i++) {
				if (contractIdElements[i].checked) {
					params.contractId = contractIdElements[i].value;
					break;
				}
			}
		}
		
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   
		cursor_wait();		
		if(this.ajaxShopCart){
			wc.service.invoke(ajaxShopCartService, params);
			this.baseItemAddedToCart=true;
		}else{
			wc.service.invoke(nonAjaxShopCartService, params);
			this.baseItemAddedToCart=true;
		}
	},
	
	/**
	* ConfigureDynamicKit This function is used to call the configurator page for a dynamic kit.
	* @param {String} catEntryIdentifier A catalog entry ID of the item to add to the cart.
	* @param {int} quantity A quantity of the item to add to the cart.
	* @param {Object} customParams - Any additional parameters that needs to be passed to the configurator page.
	*
	**/
	ConfigureDynamicKit : function(catEntryIdentifier, quantity, customParams)
	{
		var params = [];
		params.storeId		= this.storeId;
		params.catalogId	= this.catalogId;
		params.langId		= this.langId;
		params.catEntryId	= catEntryIdentifier;
		params.quantity		= quantity;
		
		if(!isPositiveInteger(quantity)){
			MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']);
			return;
		}

		var contractIdElements = document.getElementsByName('contractSelectForm_contractId');
		if (contractIdElements != null && contractIdElements != "undefined") {
			for (i=0; i<contractIdElements.length; i++) {
				if (contractIdElements[i].checked) {
					params.contractId = contractIdElements[i].value;
					break;
				}
			}
		}
		
		//Pass any other customParams set by other add on features
		if(customParams != null && customParams != 'undefined'){
			for(i in customParams){
				params[i] = customParams[i];
			}
		}

		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   
		cursor_wait();
		
		var configureURL = "ConfigureView";
		var i =0;
		for(param in params){
			configureURL += ((i++ == 0)? "?" : "&") + param + "=" + params[param];
		}
		document.location.href = getAbsoluteURL() + configureURL;
	},
	
	/**
	* ReplaceItemAjaxHelper This function is used to replace an item in the cart. This will be called from the {@link fastFinderJS.ReplaceItemAjax} method.
	*
	* @param {String} catalogEntryId The catalog entry of the item to replace to the cart.
	* @param {int} qty The quantity of the item to add.
	* @param {String} removeOrderItemId The order item ID of the catalog entry to remove from the cart.
	* @param {String} addressId The address ID of the order item.
	* @param {String} shipModeId The shipModeId of the order item.
	*
	**/
	ReplaceItemAjaxHelper : function(catalogEntryId,qty,removeOrderItemId,addressId,shipModeId){
		
		var params = [];
		params.storeId = this.storeId;
		params.catalogId = this.catalogId;
		params.langId = this.langId;
		params.orderItemId	= removeOrderItemId;
		params.orderId = (this.orderId != null && this.orderId != 'undefined' && this.orderId != '')?this.orderId:".";
		params.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";

		var params2 = [];
		params2.storeId = this.storeId;
		params2.catalogId = this.catalogId;
		params2.langId = this.langId;
		params2.catEntryId	= catalogEntryId;
		params2.quantity = qty;
		params2.orderId = (this.orderId != null && this.orderId != 'undefined' && this.orderId != '')?this.orderId:".";
		params2.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";

		var params3 = [];
		params3.storeId = this.storeId;
		params3.catalogId = this.catalogId;
		params3.langId = this.langId;
		params3.orderId = (this.orderId != null && this.orderId != 'undefined' && this.orderId != '')?this.orderId:".";
		params3.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";
		params3.allocate="***";
		params3.backorder="***";
		params3.remerge="***";
		params3.check="*n";
		
		var shipInfoUpdateNeeded = false;
		if(addressId != null && addressId != "" && shipModeId != null && shipModeId != ""){
			params3.addressId = addressId;
			params3.shipModeId = shipModeId;
			shipInfoUpdateNeeded = true;
		}

		//Delcare service for deleting item...
		wc.service.declare({
			id: "AjaxReplaceItem",
			actionId: "AjaxReplaceItem",
			url: "AjaxOrderChangeServiceItemDelete",
			formId: ""

			,successHandler: function(serviceResponse) {
				//Now add the new item to cart..
				if(!shipInfoUpdateNeeded){
					//We dont plan to update addressId and shipMOdeId..so call AjaxAddOrderItem..
					wc.service.invoke("AjaxAddOrderItem", params2);
				}
				else{
					//We need to update the adderessId and shipModeId..so call our temp service to add..
					wc.service.invoke("AjaxAddOrderItemTemp", params2);
				}
			}

			,failureHandler: function(serviceResponse) {
				if (serviceResponse.errorMessage) {
							 MessageHelper.displayErrorMessage(serviceResponse.errorMessage);
					  } else {
							 if (serviceResponse.errorMessageKey) {
									MessageHelper.displayErrorMessage(serviceResponse.errorMessageKey);
							 }
					  }
					  cursor_clear();
			}

		});

		//Delcare service for adding item..
		wc.service.declare({
			id: "AjaxAddOrderItemTemp",
			actionId: "AjaxAddOrderItemTemp",
			url: "AjaxOrderChangeServiceItemAdd",
			formId: ""

			,successHandler: function(serviceResponse) {
				//Now item is added.. call update to set addressId and shipModeId...
				wc.service.invoke("OrderItemAddressShipMethodUpdate", params3);
			}

			,failureHandler: function(serviceResponse) {
				removeAddToCartModalCookie();
				MessageHelper.displayErrorMessage(serviceResponse.errorMessageKey);
			}
		});

		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   
		cursor_wait();
		wc.service.invoke("AjaxReplaceItem",params);
	},
		
	/**
	* AddBundle2WishList This function is used to add a bundle to the wish list and it can be called by the product/bundle/package details pages.
	*
	* @param {form} form The form which contains all the inputs for the bundle.
	*
	**/	
	AddBundle2WishList : function(form){
		if (!isAuthenticated) { 
			setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
		}
		var productCount = form["numberOfProduct"].value; 
		for(var i = 1; i <= productCount; i++){
			var catEntryId = form["catEntryId_" + i].value;
			if(this.selectedProducts[catEntryId]){
				catEntryId = this.getCatalogEntryIdforBundleProduct(catEntryId, this.selectedProducts[catEntryId]);
				if(catEntryId != null)
				form["catEntryId_" + i].value = catEntryId;
				else{
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
					return;
				}
			}
		}
			form.action="InterestItemAdd";
			form.page.value="customerlinkwishlist";
		if (this.ajaxMyAccount){
			if(this.userType=='G'){
				form.URL.value='InterestItemDisplay';
			}else {
				form.URL.value='AjaxLogonForm';
			}
		}else{
			if(this.userType=='G'){
				form.URL.value='InterestItemDisplay';
			}else {
				form.URL.value='NonAjaxAccountWishListDisplayView';
			}
		}
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}
		
		form.submit();
	},
	
	/**
	* AddBundle2WishListAjax This fuction is used to add a bundle to the wish list using the ajax flow and it is called by the product/bundle/package details pages.
	*
	* @param {form} form The form which contains all the inputs for the bundle.
	*
	**/
	AddBundle2WishListAjax : function(form){
		if (!isAuthenticated) { 
			setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
		}
		var params = [];
		//var queryString = dojo.io.encodeForm(dojo.byId(form));

		params.storeId		= this.storeId;
		params.catalogId	= this.catalogId;
		params.langId		= this.langId;
		params.updateable	= 0;
		params.orderId		= ".";
			
		var catEntryArray = [];
		catEntryArray = form.catEntryIDS.value.toString().split(",");
		
		for(var i = 0; i < catEntryArray.length; i++){
			var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
			var catEntryId = catEntryArray[i];
			if(this.selectedProducts[catEntryArray[i]])
				catEntryId = this.getCatalogEntryIdforBundleProduct(catEntryId,this.selectedProducts[catEntryArray[i]]);
			if(qty==0 || qty == null) qty = 1;
			if(qty!=null && qty!='' && catEntryId!=null){
				this.updateParamObject(params,"catEntryId",catEntryId,false,-1);
				this.updateParamObject(params,"quantity",qty,false,-1);
			}
			else{
				MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
				return;
			}
		}
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   		
		cursor_wait();		
		wc.service.invoke("AjaxInterestItemAdd", params);

	},
	
	/**
	* Add2WishListAjaxByID. This function is used to add a catalog entry to the wish list using ajax by passing in a catalog entry ID.
	*
	* @param {int} catalogEntryId The catalog entry ID of the catalog entry.
	*
	**/
	Add2WishListAjaxByID:function(catalogEntryId)
	{
		if(catalogEntryId!=null){
			if (!isAuthenticated) { 
				setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
			}
			var params = [];
			params.storeId		= this.storeId;
			params.catalogId	= this.catalogId;
			params.langId			= this.langId;
			params.catEntryId	= catalogEntryId;
			params.updateable	= 0;
			params.URL = "SuccessfulAJAXRequest";
			if(document.getElementById("controllerURLWishlist")!=null && document.getElementById("controllerURLWishlist")!='undefined')
					CommonControllersDeclarationJS.setControllerURL("WishlistDisplay_Controller",document.getElementById("controllerURLWishlist").value);

			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}   
			cursor_wait();			
			if(this.ajaxShopCart)
				wc.service.invoke("AjaxInterestItemAdd", params);
			else
				wc.service.invoke("AjaxInterestItemAdd_shopCart", params);
		}
		else MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
	},
	
	/**
	* Add2WishListAjax This function is used to add an item to the wishlist using ajax by passing in the id of an HTML element containing a JSON object representing a catalog entry.
	*				   This fuction is called by product/bundle/package detail pages.
	* 
	* @param {HTMLDivElement} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	*
	**/
	Add2WishListAjax:function(entitledItemId)
	{
		if (!isAuthenticated) { 
			setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
		}
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		this.setEntitledItems(entitledItemJSON);
		
		
		
		var catalogEntryId = this.getCatalogEntryId();
		
		this.Add2WishListAjaxByID(catalogEntryId);
		
	},
	
	/**
	* AddItem2WishListAjax. This function is used to add an item to the wishlist using AJAX by passing in its catentryId. 
	* 						This function can be called by item detail page.
	*
	* @param {String} itemId The catalog entry ID of the catalog entry to add to the wish list.
	*
	**/
	AddItem2WishListAjax:function(itemId)
	{
		if (!isAuthenticated) { 
			setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
		}
		var params = [];
		params.storeId		= this.storeId;
		params.catalogId	= this.catalogId;
		params.langId			= this.langId;
		params.catEntryId	= itemId;
		params.updateable	= 0;
		params.URL = "SuccessfulAJAXRequest";
		if(document.getElementById("controllerURLWishlist")!=null && document.getElementById("controllerURLWishlist")!='undefined')
					CommonControllersDeclarationJS.setControllerURL("WishlistDisplay_Controller",document.getElementById("controllerURLWishlist").value);

		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   		
		cursor_wait();			
		if(this.ajaxShopCart)
			wc.service.invoke("AjaxInterestItemAdd", params);
		else
			wc.service.invoke("AjaxInterestItemAdd_shopCart", params);
	},

	/**
	* Add2WishList This function is used to add a catalog entry to the wish list using the non ajax flow by passing in the ID of an HTML element containing a JSON which represents a catalog entry 
	*			   This fuction is called by the product/bundle/package detail pages.
	*
	* @param {String} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {form} form form to submit the request.
	*
	**/
	Add2WishList:function(entitledItemId,form)
	{
		if (!isAuthenticated) { 
			setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
		}
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		this.Add2WishListByID(catalogEntryId,form);
	},


	/**
	* Add2WishListByID Add a catalog entry to the wish list using the non-AJAX flow. This fuction is called by the product/bundle/package detail pages.
	*
	* @param {String} catalogEntryId The catalog entry ID of the catalog entry to be added.
	* @param {form} form  form to submit the request.
	*
	**/
	Add2WishListByID:function(catalogEntryId,form)
	{
		if (!isAuthenticated) { 
			setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
		}
		if(catalogEntryId!=null){
			form.productId.value = catalogEntryId;
			form.catEntryId.value = catalogEntryId;
			form.action="InterestItemAdd";
			form.page.value="customerlinkwishlist";
		if (this.ajaxMyAccount){
			if(this.userType=='G'){
				form.URL.value='InterestItemDisplay';
			}else {
				form.URL.value='AjaxLogonForm';
			}
		}else{
			if(this.userType=='G'){
				form.URL.value='InterestItemDisplay';
			}else {
				form.URL.value='NonAjaxAccountWishListDisplayView';
			}
		}
			form.quantity.value = "1";
			
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}
			
			form.submit();
		}
		else MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
	},
	
	
	/** 
	* AddItem2WishList Add a SKU to the wish list using the non-AJAX flow. This function is called by the item detail page.
	*
	* @param {form} form The form to submit the request.
	*
	**/
	AddItem2WishList:function(form)
	{
		if (!isAuthenticated) { 
			setWarningMessageCookie('WISHLIST_GUEST_ADDITEM');
		}
		form.action="InterestItemAdd"
		form.quantity.value = "1";
		form.page.value="customerlinkwishlist";
		if (this.ajaxMyAccount){
			if(this.userType=='G'){
				form.URL.value='InterestItemDisplay';
			}else {
				form.URL.value='AjaxLogonForm';
			}
		}else{
			if(this.userType=='G'){
				form.URL.value='InterestItemDisplay';
			}else {
				form.URL.value='NonAjaxAccountWishListDisplayView';
			}
		}
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}
			
		form.submit();
	},
	
	/**
	* loadContentURL Sets the URL of the page to load into CategoryDisplay_Controller which in turn is used to display categories
	* 				 on the CategoryDisplay.jsp and DepartmentDisplay.jsp. The HistoryTracker is also updated.
	*
	* @param {String} contentURL The URL to load contents from.
	*
	**/
	loadContentURL:function(contentURL){
		
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   		
		cursor_wait();
		CommonControllersDeclarationJS.setControllerURL('CategoryDisplay_Controller',contentURL);		
		wc.render.updateContext("CategoryDisplay_Context");
	},
	
	
	/**
	* loadSubCategoryContentURL Sets the URL of the page to load into SubCategoryDisplay_Controller which in turn is used to display sub categories 
	* 							on the CategoryDisplay.jsp and DepartmentDisplay.jsp. The HistoryTracker is also updated.
	* 
	* @param {String} contentURL The URL to display for a sub category.
	*
	**/
	loadSubCategoryContentURL:function(contentURL){
		
		MessageHelper.hideAndClearMessage();

		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}   		
		cursor_wait();
		CommonControllersDeclarationJS.setControllerURL('SubCategoryDisplay_Controller',contentURL);	
		wc.render.updateContext("SubCategoryDisplay_Context");
	},
	
	/**
	* goBack Called when the back button is clicked in the browser. 
	*		 Uses the changeUrl set by the HistoryTracker and calls the loadContentURL method so that the state of the page get 
	* 		 loaded from a previous state in the page history.
	**/
	goBack:function(){
		
		categoryDisplayJS.loadContentURL(this.changeUrl);
		categoryDisplayJS.isHistory=true;

	},


	/**
	* goForward Called when the forward button is clicked in the browser. 
	*			Uses the changeUrl set by HistoryTracker and calls the loadContentURL method so that the state of the page gets
	*           loaded from the next available point in the page history.
	**/
	goForward:function(){
		
		categoryDisplayJS.loadContentURL(this.changeUrl);
		isHistory=true;
	},


	/**
	* HistoryTracker Used to track the history for the browser back and forward buttons.
	*
	* @param {String} elementId HistoryTracker id.
	* @param {String} changeUrl The change url of the current state.
	*
	**/
	HistoryTracker:function(elementId, changeUrl){
	
		this.elementId = elementId; 
		this.changeUrl =  changeUrl;

	},
	
	/**
	* processBookmarkURL Processes the bookmark using the bookmarkId which is stored in location.hash.
	**/
	processBookmarkURL : function(){
		
			var bookmarkId = location.hash;	
			if(bookmarkId){					        
				bookmarkId = bookmarkId.substring(1, bookmarkId.length);
			}   
			if(bookmarkId){
				var indexOfIdentifier = bookmarkId.indexOf("identifier", 0);
				if ( indexOfIdentifier >= 0) {
					var realUrl = bookmarkId.substring(0, indexOfIdentifier - 1);
				}
			}

			if(bookmarkId == null || bookmarkId == ""){

			}
	},
	
	
	/**
	* initializeMerchandisingAssociation Since the merchandising associations are only displayed one at a time with a scrolling widget this method
	*									 will initialize that widget with a specified starting index represented by thumbnailIndex so that the correct 
	*									 merchandising association is displayed first.
	*									 This function is called on MerchandisingAssociationsDisplay.jsp.s
	* 
	* @param {String} thumbnailIndex The index of the association that needs to be displayed.
	*
	**/
	initializeMerchandisingAssociation:function(thumbnailIndex){
	
	var associationDisplay = document.getElementById("marchandisingAssociationDisplay");
	var totalPriceMsg = document.getElementById("totalPriceMsg").value;
	var baseCatEntryJSON = eval('('+ dojo.byId("baseCatEntryDetails").innerHTML +')');
	this.baseCatalogEntryDetails = baseCatEntryJSON;
	var basePrice=this.baseCatalogEntryDetails[0].baseCatEntry_Price;
	this.totalAssociationCount= this.baseCatalogEntryDetails[0].totalAssociations;
	var identifierJSON = "associatedCatEntries_"+thumbnailIndex;
	var associationEntryJSON = eval('('+ dojo.byId(identifierJSON).innerHTML +')');
	this.merchandisingAssociationItems = associationEntryJSON;
	var totalPrice = parseFloat(basePrice)+ parseFloat(this.merchandisingAssociationItems[0].catEntry_Price);
	var dragType = "";
		
	if(this.merchandisingAssociationItems[0].catEntry_Type =='ProductBean'){
		dragType = "product";
	}else if (this.merchandisingAssociationItems[0].catEntry_Type =='ItemBean'){
		dragType = "item";
	}else if (this.merchandisingAssociationItems[0].catEntry_Type =='PackageBean'){
		dragType = "package";
	}else if (this.merchandisingAssociationItems[0].catEntry_Type =='BundleBean'){
		dragType = "bundle";
	}
//Creates the inner HTML of the associated item determined by the thumbnailIndex which needs to be displayed in the page.
var widgetHTML = "";
if(document.getElementById('addToCartLink')){
var url = "AjaxOrderItemDisplayView?storeId="+this.storeId+"&catalogId="+this.catalogId+"&langId="+this.langId;
						widgetHTML = widgetHTML
						+"<form name='OrderItemAddForm_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' action='OrderChangeServiceItemAdd' method='post' id='OrderItemAddForm_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'>\n"
						+"<input type='hidden' name='storeId' value='"+this.storeId+"' id='OrderItemAddForm_storeId_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' name='orderId' value='.' id='OrderItemAddForm_orderId_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' name='catalogId' value='"+this.catalogId+"' id='OrderItemAddForm_orderId_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' name='URL' value='"+ url + "' id='OrderItemAddForm_url_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' name='errorViewName' value='InvalidInputErrorView' id='OrderItemAddForm_errorViewName_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' name='catEntryId' value='"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' id='OrderItemAddForm_catEntryId_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' name='productId' value='"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' id='OrderItemAddForm_productId_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' value='1' name='quantity' id='OrderItemAddForm_quantity_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' value='' name='page' id='OrderItemAddForm_page_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' value='-1,-2,-3,-4,-5,-6,-7' name='calculationUsage' id='OrderItemAddForm_calcUsage_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' value='0' name='updateable' id='OrderItemAddForm_updateable_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"<input type='hidden' value='' name='giftListId' id='OrderItemAddForm_giftListId_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'/>\n"
						+"</form>\n";
						}
widgetHTML = widgetHTML					
			+"<div class='scroller' id='WC_CategoryDisplayJS_div_1'>";
			if(this.totalAssociationCount > 1){
				if(this.associationThumbnailIndex < this.totalAssociationCount){
					widgetHTML = widgetHTML
					+"		<a href='Javascript:categoryDisplayJS.showNextAssociation()'  id='WC_ProductAssociation_UpArrow_Link_1'>";
				}
				widgetHTML = widgetHTML
				+"		<img src='"+this.baseCatalogEntryDetails[0].storeImage_Path+"i_up_arrow.png' alt='"+this.displayNextAssociation+"'/></a>";
			}
			widgetHTML = widgetHTML +" <br />"
			+"<div id='baseContent_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"'";
			if(this.merchandisingAssociationItems[0].showProductQuickView == 'true'){
				widgetHTML = widgetHTML
				+" onmouseover='showPopupButton("+this.merchandisingAssociationItems[0].catEntry_Identifier+");' onmouseout='hidePopupButton("+this.merchandisingAssociationItems[0].catEntry_Identifier+");'>";
			}else{
				widgetHTML = widgetHTML
				+" >";
			}
			if(this.merchandisingAssociationItems[0].productDragAndDrop == 'true'){
				widgetHTML = widgetHTML
					+" <div dojoType='dojo.dnd.Source' jsId='dndSource' id="+this.merchandisingAssociationItems[0].catEntry_Identifier+" copyOnly='true' dndType='"+dragType+"'>"
					+"		<div class='dojoDndItem' dndType='"+dragType+"' id='WC_CategoryDisplayJS_div_draganddrop'>";
			}
			widgetHTML = widgetHTML
			+"	<a href='"+this.merchandisingAssociationItems[0].catEntry_ProductLink+"'  id='img"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' onfocus='showPopupButton("+this.merchandisingAssociationItems[0].catEntry_Identifier+");'>";
					if(this.merchandisingAssociationItems[0].productDragAndDrop == 'true' && dojo.isIE == 6)
					{
						widgetHTML = widgetHTML
						+"<iframe class='productDnDIFrame' scrolling='no' frameborder='0' src='"+getImageDirectoryPath()+"images/empty.gif' height='2' width='2'></iframe>";
					}
			widgetHTML = widgetHTML
			+"		<img src='"+this.merchandisingAssociationItems[0].catEntry_Thumbnail+"' alt='"+this.merchandisingAssociationItems[0].catEntry_ShortDescription+"' class='img' width='70' height='70'/>"
			+"	</a><br />";
			if(this.merchandisingAssociationItems[0].productDragAndDrop == 'true'){
				widgetHTML = widgetHTML
					+"		</div>"
					+"	</div>";
			}
			if(this.merchandisingAssociationItems[0].showProductQuickView == 'true'){
				widgetHTML = widgetHTML
				+" <div id='popupButton_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' class='main_quickinfo_button'>"
					+"<span class='secondary_button' >\n"
						+"<span class='button_container' >\n"
							+"<span class='button_bg' >\n"
								+"<span class='button_top'>\n"
									+"<span class='button_bottom'>\n"
										+"<a id='QuickInfoButton_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' href='#' onclick='javaScript:var actionListImageAcct = new popupActionProperties(); actionListImageAcct.showWishList="+this.merchandisingAssociationItems[0].associationProductBuyable+"; actionListImageAcct.showAddToCart="+this.merchandisingAssociationItems[0].associationProductBuyable+"; showPopup("+this.merchandisingAssociationItems[0].catEntry_Identifier+",event,null,null,actionListImageAcct);' onkeypress='javaScript:var actionListImageAcct = new popupActionProperties(); actionListImageAcct.showWishList="+this.merchandisingAssociationItems[0].associationProductBuyable+"; actionListImageAcct.showAddToCart="+this.merchandisingAssociationItems[0].associationProductBuyable+"; showPopup("+this.merchandisingAssociationItems[0].catEntry_Identifier+",event,null,null,actionListImageAcct);' onblur='hidePopupButton("+this.merchandisingAssociationItems[0].catEntry_Identifier+");' role='wairole:button' waistate:haspopup='true'>"+this.merchandisingAssociationItems[0].showProductQuickViewLable+"</a>"
									+"</span>\n"
								+"</span>\n"
							+"</span>\n"
						+"</span>\n"
					+"</span>\n"										
				+"</div>\n";
			}
			widgetHTML = widgetHTML
			+"</div>";	
		
			if(this.totalAssociationCount > 1){
				if(this.associationThumbnailIndex > 1 ){
					widgetHTML = widgetHTML
					+"		<a href='Javascript:categoryDisplayJS.showPreviousAssociation()'  id='WC_ProductAssociation_DownArrow_Link_1'>";
				}
				widgetHTML = widgetHTML
				+"		<img src='"+this.baseCatalogEntryDetails[0].storeImage_Path+"i_down_arrow.png' alt='"+this.displayPrevAssociation+"'/></a>";
			}
			
			var comboText = this.baseCatalogEntryDetails[0].associatedProductsName.replace(/%0/, this.baseCatalogEntryDetails[0].baseCatEntry_Name);
			comboText = comboText.replace(/%1/, this.merchandisingAssociationItems[0].catEntry_Name);
			
			widgetHTML = widgetHTML
			+"</div>"
			+"<div class='combo_text' id='WC_CategoryDisplayJS_div_2'>\n"
			+"	<h1 id='maHeader' class='status_msg'>"+ comboText +"</h1>\n"
			+"	<span id='maPrice' class='grey'>"+totalPriceMsg+dojo.currency.format(totalPrice.toFixed(2), {currency: this.baseCatalogEntryDetails[0].currency})+"</span>\n"
			+"</div>\n";
			widgetHTML = widgetHTML
			+"<input type='hidden' id='compareImgPath_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' value='"+this.merchandisingAssociationItems[0].catEntry_Thumbnail_compare+"'/>"
			+"<input type='hidden' id='compareProductDetailsPath_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' value='"+this.merchandisingAssociationItems[0].catEntry_ProductLink+"'/>"
			+"<input type='hidden' id='compareImgDescription_"+this.merchandisingAssociationItems[0].catEntry_Identifier+"' value='"+this.merchandisingAssociationItems[0].catEntry_ShortDescription+"'/>";
			associationDisplay.innerHTML=null;
			associationDisplay.innerHTML=widgetHTML;
			dojo.parser.parse(associationDisplay);
},


	/**
	* showNextAssociation Displays the next association in the association array. No action is performed if it is already at the last item.
	*				      This function is used with the merchandising association widget on the MerchandisingAssociationDisplay.jsp to display the next
	*					  association available.
	**/
	showNextAssociation : function(){
		
		if(this.associationThumbnailIndex < this.totalAssociationCount){
			this.associationThumbnailIndex = this.associationThumbnailIndex+1;
			this.initializeMerchandisingAssociation(this.associationThumbnailIndex);
		}
	},

	/**
	* showPreviousAssociation Displays the previous association in the association array. No action is performed if it is already the first item.
	*				      This function is used with the merchandising association widget on the MerchandisingAssociationDisplay.jsp to display the previous
	*					  association available.
	**/
	showPreviousAssociation : function(){
		
	if(this.associationThumbnailIndex > 1 ){
			this.associationThumbnailIndex = this.associationThumbnailIndex-1;
			this.initializeMerchandisingAssociation(this.associationThumbnailIndex);
		}
	},

	/**
	* AddAssociation2ShopCartAjax Adds the associated product to the shopping cart when AjaxAddToCart is enabled.
	*
	* @param {String} baseProductId The catalog entry ID of the parent product.
	* @param {int} baseProductQuantity The quantity of the parent product to add.
	*
	**/
	AddAssociation2ShopCartAjax:function(baseProductId,baseProductQuantity){
	
		var identifierJSON = "associatedCatEntries_"+this.associationThumbnailIndex;
		//Get the associated item from the JSON object.
		var associationEntryJSON = eval('('+ dojo.byId(identifierJSON).innerHTML +')');
		this.merchandisingAssociationItems = associationEntryJSON;
		this.baseItemAddedToCart = false;
		//Add the parent product to the cart.
		if(this.merchandisingAssociationItems[0].catEntry_Type=='ProductBean'){
			this.Add2ShopCartAjax(baseProductId,baseProductQuantity);
			if(this.baseItemAddedToCart){
				//Show the pop-up to select the attributes of the associated product.
				showPopup(this.merchandisingAssociationItems[0].catEntry_Identifier,function(e){return e;},'marchandisingAssociationDisplay');
			}
		}else if (this.merchandisingAssociationItems[0].catEntry_Type=='ItemBean' || this.merchandisingAssociationItems[0].catEntry_Type=='PackageBean' || this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
			//Get the associated item from the JSON object.
			var entitledItemJSON = eval('('+ dojo.byId(baseProductId).innerHTML +')');
			this.setEntitledItems(entitledItemJSON);
			var catalogEntryId = this.getCatalogEntryId();
			var params = [];
				params.storeId		= this.storeId;
				params.catalogId	= this.catalogId;
				params.langId			= this.langId;
				params.orderId		= ".";
				params.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";
			if(catalogEntryId!=null){
				this.updateParamObject(params,"catEntryId",catalogEntryId,false,-1);
				this.updateParamObject(params,"quantity",baseProductQuantity,false,-1);
				if(this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
					var form = document.getElementById(this.merchandisingAssociationItems[0].catEntry_BundleFormId);
					var catEntryArray = [];
					// add the individual bundle items to the request.
					catEntryArray = form.catEntryIDS.value.toString().split(",");
					for(var i = 0; i < catEntryArray.length; i++){
						var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
						var catEntryId = catEntryArray[i];
						if(this.getDefaultItem(catEntryArray[i]))
							catEntryId = this.getDefaultItem(catEntryArray[i]);
						if(qty==0 || qty == null) qty = 1;
						if(qty!=null && qty!='' && catEntryId!=null){
							this.updateParamObject(params,"catEntryId",catEntryId,false,-1);
							this.updateParamObject(params,"quantity",qty,false,-1);
						}else{
							MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
							return;
						}
					}
				}else{
					this.updateParamObject(params,"catEntryId",this.merchandisingAssociationItems[0].catEntry_Identifier,false,-1);
					this.updateParamObject(params,"quantity",1,false,-1);
				}
			}else{
				MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
				return;
			}
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}   		
			cursor_wait();				
			//Invoke service to add to the cart.
			wc.service.invoke("AjaxAddOrderItem", params);
		}
	},

	/**
	* AddMarchandisingAssociation2ShopCart Adds the associated product to the shopping cart when AjaxAddToCart is disabled.
	*
	* @param {String} entitledItemId A DIV containing a JSON object which holds information about a catalog entry. You can reference CachedProductOnlyDisplay.jsp to see how that div is constructed.
	* @param {form} form The form which contains the details of the item that needs to be added to the cart. This method will set the quanitty, catEntryId_1, productId_1 as well as
	*					 quantity_2, catEntryId_2 and productId_2 values in the form based on the values from the quantity you enter into this method and the catalog entry ID 
	* 					 resolved from retrieving the catalog entry ID of the entitled item passed in.						
	* @param {int} quantity The quantity of the parent product to add.
	*
	**/
	AddMarchandisingAssociation2ShopCart : function(entitledItemId,form,quantity){
	
	var identifierJSON = "associatedCatEntries_"+this.associationThumbnailIndex;
	var associationEntryJSON = eval('('+ dojo.byId(identifierJSON).innerHTML +')');
	this.merchandisingAssociationItems = associationEntryJSON;
	//get the item form the JSON object	
	var entitledItemJSON;

	if (dojo.byId(entitledItemId)!=null) {
		//the json object for entitled items are already in the HTML. 
		 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
	}else{
		//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
		//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
		entitledItemJSON = this.getEntitledItemJsonObject(); 
	}
	this.setEntitledItems(entitledItemJSON);
	var catalogEntryId_1 = this.getCatalogEntryId();
	//Add the product to the cart if the product attributes are selected otherwise show the pop-up dialog.	
	if(this.merchandisingAssociationItems[0].catEntry_Type=='ProductBean'){
		if(catalogEntryId_1!=null){
			form.catEntryId_1.value = catalogEntryId_1;
			form.productId_1.value = catalogEntryId_1;
			form.quantity_1.value = quantity;
			this.merchandisingProductAssociationAddToCart = true;
			this.merchandisingProductAssociationForm = form;
			showPopup(this.merchandisingAssociationItems[0].catEntry_Identifier,function(e){return e;},'marchandisingAssociationDisplay');
		}else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
			return;
		}
	}else if (this.merchandisingAssociationItems[0].catEntry_Type=='ItemBean' || this.merchandisingAssociationItems[0].catEntry_Type=='PackageBean' || this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
		//Add the  items to the shop cart.
		if(catalogEntryId_1!=null){
			form.catEntryId_1.value = catalogEntryId_1;
			form.productId_1.value = catalogEntryId_1;
			form.quantity_1.value = quantity;
			if(this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
				// add the individual bundle items to the request.
				var bundleForm = document.getElementById(this.merchandisingAssociationItems[0].catEntry_BundleFormId);
				var catEntryArray = [];
				catEntryArray = bundleForm.catEntryIDS.value.toString().split(",");
				var catEntryCount = 3;
				for(var i = 0; i < catEntryArray.length; i++){
					var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
					var catEntryId = catEntryArray[i];
					if(this.getDefaultItem(catEntryArray[i]))
							catEntryId = this.getDefaultItem(catEntryArray[i]);
					if(qty==0 || qty == null) qty = 1;
					if(qty!=null && qty!='' && catEntryId!=null){
						if(i==0){
							form.catEntryId_2.value = catEntryId;
							form.productId_2.value = catEntryId;
							form.quantity_2.value = qty;	
						}else{
							var input1 = document.createElement("input");
							input1.setAttribute("id", "OrderAssociationItemAddForm_catEntryId_"+catEntryId);
							input1.setAttribute("type", "hidden");
							input1.setAttribute("name", "catEntryId_"+catEntryCount);
							input1.setAttribute("value", catEntryId);
							form.appendChild(input1);
							var input2 = document.createElement("input");
							input2.setAttribute("id", "OrderAssociationItemAddForm_productId_"+catEntryId);
							input2.setAttribute("type", "hidden");
							input2.setAttribute("name", "productId_"+catEntryCount);
							input2.setAttribute("value", catEntryId);
							form.appendChild(input2);
							var quantity1 = document.createElement("input");
							quantity1.setAttribute("id", "OrderAssociationItemAddForm_quantity_"+catEntryId);
							quantity1.setAttribute("type", "hidden");
							quantity1.setAttribute("name", "quantity_"+catEntryCount);
							quantity1.setAttribute("value", "1");
							form.appendChild(quantity1);
							catEntryCount = catEntryCount+1;
						}
						
					}else{
						MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
						return;
					}
				}
			}else{
				form.catEntryId_2.value = this.merchandisingAssociationItems[0].catEntry_Identifier;
				form.productId_2.value = this.merchandisingAssociationItems[0].catEntry_Identifier;
				form.quantity_2.value = "1";
			}
			
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}

			// submit the form to add the items to the shop cart.
			form.submit();	
		}else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
			return;
		}
		}
	},

	/** 
	* AddAssociation2ShopCart Adds an associated product to the shopping cart. This function is called by other functions in the FastFinderDisplay.js such as Add2ShopCart().
	* 
	* @param {String} associatedItemId The catalog entry ID of the associated item.
	* @param {int} quantity The quantity of the associated item to add.
	*
	**/
	AddAssociation2ShopCart:function(associatedItemId,quantity){
	
	var form = this.merchandisingProductAssociationForm;
	this.merchandisingProductAssociationAddToCart = false;
	if(this.isParentBundleBean){
		// add the individual bundle items to the request.
		var catEntryArray = [];
		catEntryArray = form.catEntryIDS.value.toString().split(",");
		var bundleItemsCount = 1;
		for(var i = 0; i < catEntryArray.length; i++){
			var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
			var catEntryId = catEntryArray[i];
			if(this.selectedProducts[catEntryArray[i]])
				catEntryId = this.getCatalogEntryIdforProduct(this.selectedProducts[catEntryArray[i]]);
			if(qty==0 || qty == null) qty = 1;
			if(qty!=null && qty!='' && catEntryId!=null){
				var input1 = document.createElement("input");
				input1.setAttribute("id", "OrderItemAddForm_catEntryId_"+catEntryId);
				input1.setAttribute("type", "hidden");
				input1.setAttribute("name", "catEntryId_"+bundleItemsCount);
				input1.setAttribute("value", catEntryId);
				bundleItemsCount = bundleItemsCount + 1;
				form.appendChild(input1);
			}else{
				MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
				return;
			}
		}
		var input2 = document.createElement("input");
		input2.setAttribute("id", "OrderItemAddForm_catEntryId_"+associatedItemId);
		input2.setAttribute("type", "hidden");
		input2.setAttribute("name", "catEntryId_"+bundleItemsCount);
		input2.setAttribute("value", associatedItemId);
		form.appendChild(input2);
		var quantity1 = document.createElement("input");
		quantity1.setAttribute("id", "OrderItemAddForm_quantity_"+associatedItemId);
		quantity1.setAttribute("type", "hidden");
		quantity1.setAttribute("name", "quantity_"+bundleItemsCount);
		quantity1.setAttribute("value", quantity);
		form.appendChild(quantity1);
		form.URL.value = "AjaxOrderItemDisplayView";
		this.isParentBundleBean = false;
	}else{
		form.catEntryId_2.value = associatedItemId;
		form.productId_2.value = associatedItemId;
		form.quantity_2.value = quantity;
	}
	
	//For Handling multiple clicks
	if(!submitRequest()){
		return;
	}
	
	// submit the form to add the items to the shop cart.
	form.submit();
	this.merchandisingProductAssociationForm = "";
	},

	/**
	* AddAssociationItem2ShopCartAjax Adds the associated item to the shopping cart when AjaxAddToCart is enabled.
	*								  This function is called from MerchandisingAssociationsDisplay.jsp to add an associated item to the shopping cart.
	*
	* @param {String} baseItemId The catalog entry ID of the item to add.
	* @param {int} baseItemQuantity The quantity to add.
	* @param {Object} customParams - Any additional parameters that needs to be passed during service invocation.
	*
	**/
	AddAssociationItem2ShopCartAjax:function(baseItemId , baseItemQuantity, customParams) {
	
	var ajaxShopCartService = "AjaxAddOrderItem";
	var identifierJSON = "associatedCatEntries_"+this.associationThumbnailIndex;
	//get the item form the JSON object	
	var associationEntryJSON = eval('('+ dojo.byId(identifierJSON).innerHTML +')');
	this.merchandisingAssociationItems = associationEntryJSON;
	this.baseItemAddedToCart = false;
	//Add the parent item to the cart and if the associated catentry is a product bean then show the pop-up dialog.
	if(this.merchandisingAssociationItems[0].catEntry_Type=='ProductBean'){
		this.AddItem2ShopCartAjax(baseItemId,baseItemQuantity,customParams);
		if(this.baseItemAddedToCart){
			showPopup(this.merchandisingAssociationItems[0].catEntry_Identifier,function(e){return e;},'marchandisingAssociationDisplay');
		}
	}else if (this.merchandisingAssociationItems[0].catEntry_Type=='ItemBean' || this.merchandisingAssociationItems[0].catEntry_Type=='PackageBean' || this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
			var params = [];
				params.storeId		= this.storeId;
				params.catalogId	= this.catalogId;
				params.langId			= this.langId;
				params.orderId		= ".";
				params.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";
			this.updateParamObject(params,"catEntryId",baseItemId,false,-1);
			this.updateParamObject(params,"quantity",baseItemQuantity,false,-1);
			// add the individual bundle items to the request.
			if(this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
				var form = document.getElementById(this.merchandisingAssociationItems[0].catEntry_BundleFormId);
				var catEntryArray = [];
				catEntryArray = form.catEntryIDS.value.toString().split(",");
				for(var i = 0; i < catEntryArray.length; i++){
					var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
					var catEntryId = catEntryArray[i];
					if(this.getDefaultItem(catEntryArray[i]))
							catEntryId = this.getDefaultItem(catEntryArray[i]);
					if(qty==0 || qty == null) qty = 1;
					if(qty!=null && qty!='' && catEntryId!=null){
						this.updateParamObject(params,"catEntryId",catEntryId,false,-1);
						this.updateParamObject(params,"quantity",qty,false,-1);
					}else{
						MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
						return;
					}
				}
			}else{
				this.updateParamObject(params,"catEntryId",this.merchandisingAssociationItems[0].catEntry_Identifier,false,-1);
				this.updateParamObject(params,"quantity",1,false,-1);
			}
			
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			} 			
			cursor_wait();			
			//Invoke service to add item to the cart.
			if(customParams != null && customParams != 'undefined'){
				if(customParams['catalogEntryType'] == 'dynamicKit' ){
					ajaxShopCartService = "AjaxAddPreConfigurationToCart";
				}
			}

			wc.service.invoke(ajaxShopCartService, params);
		}
	},

	/**
	* AddAssociationItem2ShopCart Adds the parent item with associated catentry to the shopping cart when AjaxAddToCart is disabled.
	*
	* @param {form} form The form which contains the details of the item that needs to be added to the cart. The {@link fastFinderJS.merchandisingProductAssociationForm}
	*				      is set to the the form passed in. The forms quanitity_1 and quantity_2 values are set according to the values passed in 
	*					  for quantity and the value of the quantity_<catEntryId> element for the two quantity values respectively. The catEntryId_2 and productId_2 values
	*					  are also set. 
	* @param {int} quantity The quantity of the item to add to the cart.
	*
	**/
	AddAssociationItem2ShopCart : function(form,quantity){

	var identifierJSON = "associatedCatEntries_"+this.associationThumbnailIndex;
	//Get the associated item from the JSON object.
	var associationEntryJSON = eval('('+ dojo.byId(identifierJSON).innerHTML +')');
	this.merchandisingAssociationItems = associationEntryJSON;
	//Add the parent item to the cart and if the associated catentry is a product bean then show the pop-up dialog.
	if(this.merchandisingAssociationItems[0].catEntry_Type=='ProductBean'){
		if(quantity) form.quantity_1.value = quantity;
		this.merchandisingProductAssociationAddToCart = true;
		this.merchandisingProductAssociationForm = form;
		showPopup(this.merchandisingAssociationItems[0].catEntry_Identifier,function(e){return e;},'marchandisingAssociationDisplay');
	}else if (this.merchandisingAssociationItems[0].catEntry_Type=='ItemBean' || this.merchandisingAssociationItems[0].catEntry_Type=='PackageBean' || this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
		if(quantity) form.quantity_1.value = quantity;
			// add the individual bundle items to the request.
			if(this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
				var bundleForm = document.getElementById(this.merchandisingAssociationItems[0].catEntry_BundleFormId);
				var catEntryArray = [];
				catEntryArray = bundleForm.catEntryIDS.value.toString().split(",");
				var catEntryCount = 3;
				for(var i = 0; i < catEntryArray.length; i++){
					var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
					var catEntryId = catEntryArray[i];
					if(this.getDefaultItem(catEntryArray[i]))
							catEntryId = this.getDefaultItem(catEntryArray[i]);
					if(qty==0 || qty == null) qty = 1;
						if(i==0){
							form.catEntryId_2.value = catEntryId;
							form.productId_2.value = catEntryId;
							form.quantity_2.value = qty;	    
						}else{
							var input1 = document.createElement("input");
							input1.setAttribute("id", "OrderAssociationItemAddForm_catEntryId_"+catEntryId);
							input1.setAttribute("type", "hidden");
							input1.setAttribute("name", "catEntryId_"+catEntryCount);
							input1.setAttribute("value", catEntryId);
							form.appendChild(input1);
							var input2 = document.createElement("input");
							input2.setAttribute("id", "OrderAssociationItemAddForm_productId_"+catEntryId);
							input2.setAttribute("type", "hidden");
							input2.setAttribute("name", "productId_"+catEntryCount);
							input2.setAttribute("value", catEntryId);
							form.appendChild(input2);
							var quantity1 = document.createElement("input");
							quantity1.setAttribute("id", "OrderAssociationItemAddForm_quantity_"+catEntryId);
							quantity1.setAttribute("type", "hidden");
							quantity1.setAttribute("name", "quantity_"+catEntryCount);
							quantity1.setAttribute("value", "1");
							form.appendChild(quantity1);
							catEntryCount = catEntryCount+1;
						}
					}
			}else{
				form.catEntryId_2.value = this.merchandisingAssociationItems[0].catEntry_Identifier;
				form.productId_2.value = this.merchandisingAssociationItems[0].catEntry_Identifier;
				form.quantity_2.value = "1";
			}
			
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}
			
			//submit the form to add the item to the cart.
			form.submit();	
		}
	},

	/**
	* AddAssociationBundle2ShopCartAjax Adds the parent bundle and associated products to the shopping cart when AjaxAddToCart is enabled.
	*									This function is used on MerchandisingAssociationsDisplay.jsp.
	*
	* @param {form} form The form which contains the details of the catalog entries that need to be added to the cart.
	* 				      This form is expected to have a comma separated list of catalog entry IDs of catalog entries in the bundle which should be added to the shopping cart.
	*
	**/
	AddAssociationBundle2ShopCartAjax:function(form){

	var identifierJSON = "associatedCatEntries_"+this.associationThumbnailIndex;
	//Get the associated item from the JSON object.
	var associationEntryJSON = eval('('+ dojo.byId(identifierJSON).innerHTML +')');
	this.merchandisingAssociationItems = associationEntryJSON;
	this.baseItemAddedToCart = false;
//Add the parent bundle to the cart and show the pop-up dialog for the associated product.
			
			var params = [];
			
			params.storeId		= this.storeId;
			params.catalogId	= this.catalogId;
			params.langId		= this.langId;
			params.orderId		= ".";
			params.calculationUsage = "-1,-2,-3,-4,-5,-6,-7";
		// add the individual bundle items of the parent bundle to the request.
			var catEntryArray = [];
			catEntryArray = form.catEntryIDS.value.toString().split(",");
			for(var i = 0; i < catEntryArray.length; i++){
				var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
				var catEntryId = catEntryArray[i];
				if(this.getDefaultItem(catEntryArray[i]))
							catEntryId = this.getDefaultItem(catEntryArray[i]);
				if(qty==0 || qty == null) qty = 1;
				if(qty!=null && qty!='' && catEntryId!=null){
					this.updateParamObject(params,"catEntryId",catEntryId,false,-1);
					this.updateParamObject(params,"quantity",qty,false,-1);
					this.baseItemAddedToCart = "true";
				}else{
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
					return;
				}
			}
			// add the individual bundle items of the associated bundle to the request.
			if(this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
					var bundleForm = document.getElementById(this.merchandisingAssociationItems[0].catEntry_BundleFormId);
					var innerCatEntryArray = [];
					innerCatEntryArray = bundleForm.catEntryIDS.value.toString().split(",");
					for(var i = 0; i < innerCatEntryArray.length; i++){
						var qty = document.getElementById("quantity_" + innerCatEntryArray[i]).value;
						var innerCatEntryId = innerCatEntryArray[i];
						if(this.getDefaultItem(innerCatEntryArray[i]))
							innerCatEntryId = this.getDefaultItem(innerCatEntryArray[i]);
						if(qty==0 || qty == null) qty = 1;
						if(qty!=null && qty!='' && innerCatEntryId!=null){
							this.updateParamObject(params,"catEntryId",innerCatEntryId,false,-1);
							this.updateParamObject(params,"quantity",qty,false,-1);
						}else{
							MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
							return;
						}
					}
				}else if(this.merchandisingAssociationItems[0].catEntry_Type=='PackageBean' || this.merchandisingAssociationItems[0].catEntry_Type=='ItemBean'){
					this.updateParamObject(params,"catEntryId",this.merchandisingAssociationItems[0].catEntry_Identifier,false,-1);
					this.updateParamObject(params,"quantity",1,false,-1);
				}
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}   
			cursor_wait();			
			//Invoke service to add to the cart.
			wc.service.invoke("AjaxAddOrderItem", params);
	
	   if(this.merchandisingAssociationItems[0].catEntry_Type=='ProductBean'){
		   showPopup(this.merchandisingAssociationItems[0].catEntry_Identifier,function(e){return e;},'marchandisingAssociationDisplay');
	   }
},

/** 
* Sets the orderID if it is not already set on the Current Order page. 
* The order ID is used to determine which order to act upon such as in the case of replacing an order item in an order.
* @param {String} orderId The orderID to use.
*/
setOrderId : function(orderId)
{
	this.orderId = orderId;
},

	/**
	* AddAssociationBundle2ShopCart Adds the parent bundle and associated product to the shopping cart when AjaxAddToCart is disabled.
	*								This function is used on MerchandisingAssociationsDisplay.jsp. 
	* 
	* @param {form} form The form which contains the details of the catalog entries that need to be added to the cart.
	* 						The {@link fastFinderJS.merchandisingProductAssociationForm} is set to the form passed in.
	*						The form is expected to have a value for catEntryIDS which is a list of catalog entry IDs of the catalog entries in the bundle which should be
	*						added to the shopping cart.
	*
	**/
	AddAssociationBundle2ShopCart : function(form){
	
	var identifierJSON = "associatedCatEntries_"+this.associationThumbnailIndex;
	//get the item form the JSON object	
	var associationEntryJSON = eval('('+ dojo.byId(identifierJSON).innerHTML +')');
	this.merchandisingAssociationItems = associationEntryJSON;
	this.isParentBundleBean = true;
	//Add the parent bundle to the cart and show the pop-up dialog for the associated product.
	if(this.merchandisingAssociationItems[0].catEntry_Type=='ProductBean'){
		this.merchandisingProductAssociationAddToCart = true;
		this.merchandisingProductAssociationForm = form;
		var catEntryArray = [];
		// add the individual bundle items of the parent bundle to the request.
		catEntryArray = form.catEntryIDS.value.toString().split(",");
		var bundleItemsCount = 1;
		for(var i = 0; i < catEntryArray.length; i++){
			var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
			var catEntryId = catEntryArray[i];
			if(this.getDefaultItem(catEntryArray[i]))
							catEntryId = this.getDefaultItem(catEntryArray[i]);
			if(catEntryId != null)
							form["catEntryId_" + catEntryArray[i]].value = catEntryId;				
			else{
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
					return;
			}
			bundleItemsCount = bundleItemsCount + 1;
			
		}
		showPopup(this.merchandisingAssociationItems[0].catEntry_Identifier,function(e){return e;},'marchandisingAssociationDisplay');
	}else if (this.merchandisingAssociationItems[0].catEntry_Type=='ItemBean' || this.merchandisingAssociationItems[0].catEntry_Type=='PackageBean' || this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
		var catEntryArray = [];
		// add the individual bundle items of the parent bundle to the request.
		catEntryArray = form.catEntryIDS.value.toString().split(",");
		var bundleItemsCount = 1;
		for(var i = 0; i < catEntryArray.length; i++){
			var qty = document.getElementById("quantity_" + catEntryArray[i]).value;
			var catEntryId = catEntryArray[i];
			if(this.getDefaultItem(catEntryArray[i]))
							catEntryId = this.getDefaultItem(catEntryArray[i]);
			if(catEntryId != null)
							form["catEntryId_" + catEntryArray[i]].value = catEntryId;				
			else{
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
					return;
			}
			bundleItemsCount = bundleItemsCount + 1;
			
		}
		if(this.merchandisingAssociationItems[0].catEntry_Type=='BundleBean'){
			// add the individual bundle items of the associated bundle to the request.
			var bundleForm = document.getElementById(this.merchandisingAssociationItems[0].catEntry_BundleFormId);
			var innerCatEntryArray = [];
			innerCatEntryArray = bundleForm.catEntryIDS.value.toString().split(",");
			for(var i = 0; i < innerCatEntryArray.length; i++){
				var qty = document.getElementById("quantity_" + innerCatEntryArray[i]).value;
				var innerCatEntryId = innerCatEntryArray[i];
				if(this.getDefaultItem(innerCatEntryArray[i])){
							innerCatEntryId = this.getDefaultItem(innerCatEntryArray[i]);
							}
				if(qty==0 || qty == null) qty = 1;
				if(qty!=null && qty!='' && innerCatEntryId!=null){
					var input2 = document.createElement("input");
					input2.setAttribute("id", "OrderItemAddForm_catEntryId_"+innerCatEntryId);
					input2.setAttribute("type", "hidden");
					input2.setAttribute("name", "catEntryId_"+bundleItemsCount);
					input2.setAttribute("value", innerCatEntryId);
					form.appendChild(input2);
					var quantity2 = document.createElement("input");
					quantity2.setAttribute("id", "OrderItemAddForm_quantity_"+innerCatEntryId);
					quantity2.setAttribute("type", "hidden");
					quantity2.setAttribute("name", "quantity_"+bundleItemsCount);
					quantity2.setAttribute("value", "1");
					form.appendChild(quantity2);
					bundleItemsCount = bundleItemsCount + 1;
				}else{
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU']);
					return;
				}
			}
		}else{
			var input2 = document.createElement("input");
			input2.setAttribute("id", "OrderItemAddForm_catEntryId_"+this.merchandisingAssociationItems[0].catEntry_Identifier);
			input2.setAttribute("type", "hidden");
			input2.setAttribute("name", "catEntryId_"+bundleItemsCount);
			input2.setAttribute("value", this.merchandisingAssociationItems[0].catEntry_Identifier);
			form.appendChild(input2);
			var quantity2 = document.createElement("input");
			quantity2.setAttribute("id", "OrderItemAddForm_quantity_"+this.merchandisingAssociationItems[0].catEntry_Identifier);
			quantity2.setAttribute("type", "hidden");
			quantity2.setAttribute("name", "quantity_"+bundleItemsCount);
			quantity2.setAttribute("value", "1");
			form.appendChild(quantity2);
		}
		form.URL.value = "AjaxOrderItemDisplayView";
		
		//For Handling multiple clicks
		if(!submitRequest()){
			return;
		}
		
		//submit the form to add to cart.
		form.submit();
	}
	
},

	/**
	 * Resolves the SKU and adds the item to a new requisition list.
	 *  
	 * @param {String} entitledItemId The catalog entry ID of the item to add to the requisition list.
	 * @param {String} quantityElemId The ID of the Quantity field.
	 * @param {String} currentPage The URL of the current page. When a customer clicks Cancel on the requisition list creation page, they are redirected to the current page.
	 */
	addToNewListFromProductDetail:function (entitledItemId,quantityElemId,currentPage) {
		MessageHelper.hideAndClearMessage();
		var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		if(catalogEntryId!=null){
			this.addItemToNewListFromProductDetail(catalogEntryId, quantityElemId, currentPage);
		}
		else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_REQ_LIST']);
			//Close the quick info pop-up if it exists
			if(dijit.byId('second_level_category_popup') != null){
				hidePopup('second_level_category_popup');
			}
			return;			
		}
	},
	
	/**
	 * Adds the item to a new requisition list.
	 *  
	 * @param {String} catalogEntryId The resolved catalog entry ID of the item to add to the requisition list.
	 * @param {String} quantityElemId The ID of the Quantity field.
	 * @param {String} currentPage The URL of the current page. When a customer clicks Cancel on the requisition list creation page, they are redirected to the current page.
	 */
	addItemToNewListFromProductDetail:function (catalogEntryId,quantityElemId,currentPage) {
		MessageHelper.hideAndClearMessage();
		if(catalogEntryId!=null){
			var quantity = document.getElementById(quantityElemId).value;
			if (quantity == null || quantity == "" || quantity<=0 || !RequisitionList.isNumber(quantity)) {
				MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']);
				//Close the quick info pop-up if it exists
				if(dijit.byId('second_level_category_popup') != null){
					hidePopup('second_level_category_popup');
				}
				return;
			}
			if(this.ajaxMyAccount){
				var URL = "AjaxLogonForm?page=createrequisitionlist";
			} else {
				var URL = "RequisitionListDetailView?editable=true&newList=true";
			}
			
			//using the form because the previousPage url can be very long
			var formObj = document.createElement("form");
			formObj.setAttribute("method","POST");
			
			var input = document.createElement("input");
			input.setAttribute("type", "hidden");
			input.setAttribute("value", currentPage);
			input.setAttribute("name", "previousPage");
			formObj.appendChild(input);
			
			formObj.action = URL + "&catEntryId="+catalogEntryId +"&quantity="+quantity+ "&storeId=" + this.storeId +"&catalogId=" + this.catalogId + "&langId=" + this.langId;
			
			document.body.appendChild(formObj); // have to add this form to the body node before submitting.
			formObj.submit();
		}
		else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_REQ_LIST']);
		}
	},	
	
	/**
	 * Adds the bundle to a new requisition list.
	 *  
	 * @param {form} form The form that contains all of the inputs for the bundle.
	 * @param {String} currentPage The URL of the current page. When a customer clicks Cancel on the requisition list creation page, they are redirected to the current page.
	 */
	addBundleToNewListFromProductDetail:function (form,currentPage) {
		var productCount = form["numberOfProduct"].value;
		var URL = "";
		if(this.ajaxMyAccount){
			URL = "AjaxLogonForm?page=createrequisitionlist";
		} else {
			URL = "RequisitionListDetailView?editable=true&newList=true";
		}	
		
		for(var i = 1; i <= productCount; i++){
			var catEntryId = form["catEntryId_" + i].value;
			if(this.selectedProducts[catEntryId]) {
				catEntryId = this.getCatalogEntryIdforBundleProduct(catEntryId, this.selectedProducts[catEntryId]);
			}
			
			var qty = form["quantity_" + i].value;
			if(qty == null || qty == "" || qty<=0 || !RequisitionList.isNumber(qty)){ 
				MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']); 
				return;
			} else if(catEntryId!=null){			
				URL = URL + "&catEntryId=" + catEntryId + "&quantity=" + qty;
			} else{
				MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_REQ_LIST']);
				return;
			}
		}
		
		var input = document.createElement("input");
		input.setAttribute("type", "hidden");
		input.setAttribute("value", currentPage);
		input.setAttribute("name", "previousPage");
		form.appendChild(input);		
		
		URL = URL +"&numberOfProduct="+form.numberOfProduct.value+ "&storeId=" + this.storeId +"&catalogId=" + this.catalogId + "&langId=" + this.langId; 
		form.action=URL;
		form.submit();
	},	
	
	/**
	* Resolves the SKU and adds the item to an existing requisition list.
	*
	* @param {string} entitledItemId The catalog entry ID of the item to add to the requisition list.
	* @param {string} quantityElemId The ID of the Quantity field.
	* @param {boolean} ajaxAddToCart Indicates whether the AJAX Add to Cart flexflow is enabled.
	*/
	addToExistingRequisitionList:function (entitledItemId,quantityElemId,ajaxAddToCart) {
		//resolve the SKU for the product
				var entitledItemJSON;

		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		this.setEntitledItems(entitledItemJSON);
		var catalogEntryId = this.getCatalogEntryId();
		
		if(catalogEntryId!=null){
			//Add the resolved SKU to the selected requisition list
			this.addItemToExistingRequisitionList(catalogEntryId,quantityElemId,ajaxAddToCart);
		} else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_REQ_LIST']);
		}
	},	
	
	/** 
	* Adds the bundle to an existing requisition list.
	*
	* @param {form} form The form that contains all of the inputs for the bundle.
	* @param {boolean} ajaxAddToCart Indicates whether the AJAX Add to Cart flexflow is enabled.
	*/
	addBundleToExistingRequisitionList:function(form,ajaxAddToCart){
		//Get all the requisition list radio button inputs
		var reqListSelection = document.getElementsByName("RequisitionListTableDisplay_RequisitionListSelection");
		
		//Retrieve the requisition list id from the radio button selection
		for (var i=0; i<reqListSelection.length; i++) {
			if (reqListSelection.item(i).checked) {
				var requisitionListId = reqListSelection.item(i).value;
			} 
		}
		
		if(ajaxAddToCart){
			var params = [];
	
			params.storeId		= this.storeId;
			params.catalogId	= this.catalogId;
			params.langId		= this.langId;
			params["requisitionListId"] = requisitionListId;
				
			var productCount = form["numberOfProduct"].value;
			for(var i = 1; i <= productCount; i++){
				var catEntryId = form["catEntryId_" + i].value;
				if(this.selectedProducts[catEntryId]) {
					catEntryId = this.getCatalogEntryIdforBundleProduct(catEntryId,this.selectedProducts[catEntryId]);
				}
				
				var qty = form["quantity_" + i].value;
				if(qty == null || qty == "" || qty<=0 || !RequisitionList.isNumber(qty)){ 
					MessageHelper.displayeErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']); 
					return;
				} else if(qty!=null && qty!='' && catEntryId!=null){
					this.updateParamObject(params,"catEntryId",catEntryId,false,-1);
					this.updateParamObject(params,"quantity",qty,false,-1);
					this.baseItemAddedToCart=true;
				} else{
					MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_REQ_LIST']);
					return;
				}
			}
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}   		
			cursor_wait();		
			wc.service.invoke("requisitionListAddItem_popup", params);
		} else {
			form.action = "RequisitionListItemUpdate?requisitionListId="+requisitionListId;
			
			if(this.ajaxMyAccount){
				form.URL.value = "AjaxLogonForm?page=editrequisitionlist&requisitionListId=" + requisitionListId + "&editable=true";
			} else {
				form.URL.value = "RequisitionListDetailView?requisitionListId=" + requisitionListId + "&editable=true";
			}			
			
			//For Handling multiple clicks
			if(!submitRequest()){
				return;
			}   		
			cursor_wait();
			form.submit();
		}	
	},	

	/**
	* Adds the resolved SKU of an item to an existing requisition list.
	* Assumes that the catalogEntryId is a resolved SKU.
	*
	* @param {string} catalogEntryId The resolved catalog entry ID of the item to add to the requisition list.
	* @param {string} quantityElemId The ID of the Quantity field.
	* @param {boolean} ajaxAddToCart Indicates whether the AJAX Add to Cart flexflow is enabled.
	*/
	addItemToExistingRequisitionList:function (catalogEntryId,quantityElemId,ajaxAddToCart) {
		if(catalogEntryId!=null){
			//Validate the quantity value
			var quantity = document.getElementById(quantityElemId).value;
			if (!RequisitionList.isNumber(quantity) || quantity <= 0) {
				if(quantityElemId == "productPopUpQty"){
					MessageHelper.displayErrorMessage(MessageHelper.messages['QUANTITY_INPUT_ERROR']);
					//Close the quick info pop-up if it exists
					if(dijit.byId('second_level_category_popup') != null){
						hidePopup('second_level_category_popup');
					}
					return;
				} else {
					MessageHelper.formErrorHandleClient(quantityElemId,MessageHelper.messages["QUANTITY_INPUT_ERROR"]); 
					return;
				}
			}		
	
			//Get all the requisition list radio button inputs
			var reqListSelection = document.getElementsByName("RequisitionListTableDisplay_RequisitionListSelection");
			
			//Retrieve the requisition list id from the radio button selection
			for (var i=0; i<reqListSelection.length; i++) {
				if (reqListSelection.item(i).checked) {
					var requisitionListId = reqListSelection.item(i).value;
				} 
			}
						
			//For Ajax "Add to Cart" flexflow, add item and remain on the same page
			if(ajaxAddToCart){
				var params = {};
				
				params["requisitionListId"] = requisitionListId;
				params["catEntryId"] = catalogEntryId;
				params["quantity"] = quantity;
				params.storeId = this.storeId;
				params.catalogId = this.catalogId;
				params.langId = this.langId;
				
				/*For Handling multiple clicks. */
				if(!submitRequest()){
					return;
				}			
				cursor_wait();
				wc.service.invoke('requisitionListAddItem_popup',params);				
			} else { 
				//For Non-Ajax add to cart
				var form = document.forms["RequisitionListPopupForm"];
				form.requisitionListId.value = requisitionListId;
				form.quantity.value = quantity;
				form.catEntryId.value = catalogEntryId;
				
				if(this.ajaxMyAccount){
					form.URL.value = "AjaxLogonForm?page=editrequisitionlist&requisitionListId=" + requisitionListId + "&editable=true";
				} else {
					form.URL.value = "RequisitionListDetailView?requisitionListId=" + requisitionListId + "&editable=true";
				}
				
				/*For Handling multiple clicks. */
				if(!submitRequest()){
					return;
				}			
				cursor_wait();
				form.submit();
			}
		} else{
			MessageHelper.displayErrorMessage(MessageHelper.messages['ERR_RESOLVING_SKU_REQ_LIST']);
		}		
	},
	
	/**
	* Sets the currentPageType variable. 
	* This variable determines the type of catalog pages that are being viewed, such as product or item pages.
	*
	* @param {Boolean} pageType Indicates the type of catalog page viewed by the customer.
	*
	**/
	setCurrentPageType:function(pageType){
		this.currentPageType = pageType;
	},	
	
	/**
	* Sets the currentCatalogEntryId variable. 
	* This variable stores the catalogEntryId of the catalog item being viewed.
	*
	* @param {Boolean} catalogEntryId The ID of the new catalog item viewed by the customer.
	*
	**/
	setCurrentCatalogEntryId:function(catalogEntryId){
		this.currentCatalogEntryId = catalogEntryId;
	},
	
	buyItemQuickInfo:function(){
		var quantity;
		var catEntryId;
		var catEntryType;
		if(dojo.byId("catalogEntryPage")!=null && document.getElementById("catalogEntryPage")!=undefined){
			if(dojo.byId("catalogEntryPage").value=="quickInfoDialog"){
				if(dojo.byId("productPopUpQty")!=null && dojo.byId("productPopUpQty")!=undefined){
					quantity=dojo.byId("productPopUpQty").value;
				}
				if(dojo.byId("productIdQuickInfo")!=null && dojo.byId("productIdQuickInfo")!=undefined){
					catEntryId=dojo.byId("productIdQuickInfo").innerHTML;
				}
				if(dojo.byId("catalogEntryTypeCode")!=null && dojo.byId("catalogEntryTypeCode")!=undefined){
					if(dojo.byId("catalogEntryTypeCode").value=="ProductBean"){
						catEntryType="product";
					}else if(dojo.byId("catalogEntryTypeCode").value=="ItemBean"){
						catEntryType="item";	
					}
				}
		
			}else{
				quantity=dojo.byId("quantity_"+dojo.byId("entitledItem_catalogEntryID").value).value;
				catEntryId=dojo.byId("entitledItem_catalogEntryID").value;
				if(dojo.byId("catalogEntryPage").value=="productPage"){
					catEntryType="product";
				}else if (dojo.byId("catalogEntryPage").value=="itemPage"){
					catEntryType="item";
				}
			}			
		}
		
			cursor_wait();	
			if(catEntryType=="product"){
				categoryDisplayJS.Add2ShopCartAjax('entitledItem_'+catEntryId,quantity, false);
				}else if(catEntryType=="item"){
				categoryDisplayJS.AddItem2ShopCartAjax(catEntryId , quantity);
			}
	},
	/**
	 * Submits a category subscription request.
	 * If AjaxAddToCart is enabled, then invoke the AjaxCategorySubscribe service; otherwise submit the form and reload the page.
	 * 
	 * @param {String} formId The form Id.
	 * @param {Boolean} ajaxEnabled A true/false value that indicates if AjaxAddToCart is enabled.
	 */
	handleCategorySubscription:function(formId, ajaxEnabled){
		if(ajaxEnabled == true || ajaxEnabled == "true"){
			var form = document.forms[formId];
			var params = {};
			params["DM_ReqCmd"] = form.DM_ReqCmd.value;
			params["storeId"] = form.storeId.value;
			params["catalogId"] = form.catalogId.value;
			params["langId"] = form.langId.value;
			params["categoryId"] = form.categoryId.value;
			if(!submitRequest()){
				return;
			}
			cursor_wait();
			wc.service.invoke("AjaxCategorySubscribe", params);
		}else{
			var form = document.forms[formId];
			form.URL.value = location.href;
			form.submit();
		}
	},
	
	createFlyoutViewer:function(mainURL,theStoreName,partNumber,productViewerName,videoURL,contentURL){
		this.storeName = theStoreName;
		var mixedMediaViewer = new s7viewers.MixedMediaViewer();
		mixedMediaViewer.setContainerId("flyout");
		mixedMediaViewer.setParam("videoserverurl", videoURL);
		mixedMediaViewer.setParam("serverurl", mainURL);
		mixedMediaViewer.setParam("config", "FlyoutZoom_DHTML_PARIS");//productViewerName);
		mixedMediaViewer.setParam("contenturl", contentURL);
		mixedMediaViewer.setParam("asset", this.storeName.concat(partNumber));
		mixedMediaViewer.init();
		this.flyout=mixedMediaViewer;
	},
	 
	updateFlyoutViewer:function(partNumber){
		if((partNumber.substring(partNumber.length-1,partNumber.length))=='-'){
			partNumber = partNumber.substring(0,partNumber.length-1);
		}
		this.flyout.setAsset(this.storeName.concat(partNumber));
	},
	
/* START :REQ#725 Swatches */

	/**
	*setSKUImageId Sets the ID of the image to use for swatch.
	**/
	setSKUImageId:function(skuImageId){
		this.skuImageId = skuImageId;
	},
	
	/**
	*set attribute value ,Sets the ID of the image to use for swatch.
	**/
	setSwatchAttributeValue : function(selectedAttributeValue,id){ 
		if(document.getElementById("oneSKUAttribute_heading")!=null && document.getElementById("oneSKUAttribute_heading") !=undefined){
			document.getElementById("oneSKUAttribute_heading").innerHTML = selectedAttributeValue;
		}
		if (id != undefined){
			var element = document.getElementById("swatches_pdp").children;
			for(var i=0;i<element.length; i++){
				if(element[i].id=='color_btn'){
					if(element[i].children[0].children[0].id == id.replace(/\s/g," ")){
						element[i].className = "picked";
					}else{
						element[i].className = " ";
					}	
				}
				
				
		}
	}
		
	
},
/**
*set attribute value ,Sets the ID of the image to use for swatch.
**/
setSwatchAttributeValueForQuickView : function(selectedAttributeValue,id){ 
	if(document.getElementById("oneSKUAttribute_heading")!=null && document.getElementById("oneSKUAttribute_heading") !=undefined){
		document.getElementById("oneSKUAttribute_heading").innerHTML = selectedAttributeValue;
		this.selectedAttributeValueForQuickView =selectedAttributeValue.replace(/\u00a0/g," ").replace(/&nbsp;/g," ");
	}
	if (id != undefined){
		var element = document.getElementById("swatches_pdp").children;
		for(var i=0;i<element.length; i++){
			if(element[i].id=='color_btn'){
				if(element[i].children[0].children[0].id == id.replace(/\s/g," ")){
					element[i].className = "picked";
				}else{
					element[i].className = " ";
				}	
			}
			
			
	}
}

},
/**
*To give emphasis to selected attribute value
**/
setSizeCheckedValue:function(id){ 
	
	if(document.getElementById("oneSKUAttribute_headingForSize")!=null && document.getElementById("oneSKUAttribute_headingForSize") !=undefined){
		document.getElementById("oneSKUAttribute_headingForSize").innerHTML = id;
	}
	if (id != undefined){
		//swatches 1022 req start 
		var element = document.getElementById("size_swatches_pdp").children;
		for(var i=0;i<element.length; i++){
			if(element[i].id=='color_btn'){
				if(element[i].children[0].children[0].id == id.replace(/\s/g," ")){
					element[i].className = "picked";
				}else{
					element[i].className = " ";
				}	
			}
		}
		//swatches 1022 req end 
	}
},
/**
*To give emphasis to selected attribute value
**/
setSizeCheckedValueForQuickView:function(id){ 
	if(document.getElementById("oneSKUAttribute_headingForSize")!=null && document.getElementById("oneSKUAttribute_headingForSize") !=undefined){
		document.getElementById("oneSKUAttribute_headingForSize").innerHTML = id;
	}
	if (id != undefined){
		//swatches 1022 req start 
		var element = document.getElementById("size_swatches_pdp").children;
		for(var i=0;i<element.length; i++){
			if(element[i].id=='color_btn'){
				if(element[i].children[0].children[0].id == id.replace(/\s/g," ")){
					element[i].className = "picked";
				}else{
					element[i].className = " ";
				}	
			}
		}
		//swatches 1022 req end 
		}
},
/**
*set attribute value, Sets the ID of the image to use for swatch.
**/
setSwatchAttributeValueForPLP : function(swatchName,id){ 
	if (id != undefined){
		var element="";
		
		if(document.getElementsByName(swatchName)!=null && document.getElementsByName(swatchName)!=undefined){
			element = document.getElementsByName(swatchName).item(0).children;
			if(element != null && element!=undefined){
			// PLP - Performance Improvement
			for(var i=0;i<element.length; i++){
				if(element[i].children[0].children[0].id == id){
					element[i].className = "picked";
				}else{
					element[i].className = " ";
				}
				
		}
		}
		}
}
	

},

/**
*find swatch for a particular catId
**/
findSwatchForCatId:function(entitledItemId, swatchCatId, swatchValue){
	if (dojo.byId(entitledItemId)!=null) {
		//the json object for entitled items are already in the HTML. 
		 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		 var swatchFound= "";
			for(var index = 0; index <= entitledItemJSON.length; index++){
				if(entitledItemJSON[index]  && swatchCatId == entitledItemJSON[index].catentry_id){
					if( entitledItemJSON[index].Attributes){
						for(entitledItem in entitledItemJSON[index].Attributes){
							var objAttr = dojo.trim(entitledItem);
							if(objAttr != ""){
								if(objAttr == dojo.trim(swatchValue)){
									swatchFound="true";
									break;
								}
							}				
						}
						
					}
				}
				
			} 
			if(swatchFound=="true"){
				document.getElementById('color_btn_dummy').className='picked';
				document.getElementById("oneSKUAttribute_heading").innerHTML = swatchValue.split('_')[1];
			}
			document.getElementById('color_btn_dummy').id='color_btn';
	}

},

/**
*set swatch images in plp.
**/

setSwatchImagePLP : function(entitledItemId,isPopup,displayPriceRange,swatchValue){
	this.displayPriceRange = displayPriceRange;
	this.isPopup = isPopup;
	this.fromPLP=true;
	categoryDisplayJS.isSkuResolved = false;
	var entitledItemJSON;
	
	if (dojo.byId(entitledItemId)!=null && !this.isPopup) {
		//the json object for entitled items are already in the HTML. 
		 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
	}else{
		//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
		//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
		entitledItemJSON = this.getEntitledItemJsonObject(); 
	}
	
	this.setEntitledItems(entitledItemJSON);
	for(var index = 0; index <= entitledItemJSON.length; index++){
		if(this.entitledItems[index] && this.entitledItems[index].Attributes){
			for(entitledItem in this.entitledItems[index].Attributes){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != ""){
					if(objAttr == dojo.trim(swatchValue))
					{
						catentryId = this.entitledItems[index].catentry_id;
						partnumber = this.entitledItems[index].partnumber;
						break;
					}
				}				
			}
			
		}
	}
	var productId= entitledItemId.replace("entitledItem_","");
	
	if(partnumber != ""){
		var element = document.getElementById("WC_CatalogEntryDBThumbnailDisplayJSPF_"+productId+"_div_1")
		image = element.children[0].children[0].src;
		imageurl = image.substring(0,image.lastIndexOf('/')+1) + partnumber.substring(0,partnumber.lastIndexOf('-'))+ "?$plp$";
		element.children[0].children[0].src = imageurl;
	}
	var catalogEntryId = this.getCatalogEntryId();
	if((catalogEntryId!=null)&&(catalogEntryId!="")){
		//check if the json object is already present for the catEntry.
		var parameters = {};
			parameters.storeId = this.storeId;
			parameters.langId= this.langId;
			parameters.catalogId= this.catalogId;
			parameters.productId= catalogEntryId;
			parameters.onlyCatalogEntryPrice = 'false';
			parameters.parentProductId =productId;
			
			dojo.xhrPost({
				url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",				
				handleAs: "json-comment-filtered",
				content: parameters,
				service: this,
				load: categoryDisplayJS.displaySwatchServiceResponseForPLP,
				error: function(errObj,ioArgs) {
					console.debug("CategoryDisplay.changePrice: Unexpected error occurred during an xhrPost request.");
				}
			});
		
		
	}
	
},

/**
*display swatch images in a particular PLP
**/
displaySwatchServiceResponseForPLP : function(serviceResponse, ioArgs){
	
	
	if(categoryDisplayJS.isSkuResolved){
		//stores the json object, so that the service is not called when same catEntry is selected.
		categoryDisplayJS.itemPriceJsonOject[serviceResponse.catalogEntry.catalogEntryIdentifier.uniqueID] = serviceResponse;
		var productId = ioArgs.args.content.parentProductId; 
		var image = document.getElementById("WC_CatalogEntryDBThumbnailDisplayJSPF_"+productId+"_div_1")
		image.children[0].children[0].alt = serviceResponse.catalogEntry.description[0].name;
		image.children[0].href += "?swatchCatId="+serviceResponse.catalogEntry.catalogEntryIdentifier.uniqueID+"&swatchPartNumber="+serviceResponse.catalogEntry.catalogEntryIdentifier.externalIdentifier.partNumber;
		
		var title = document.getElementById("WC_CatalogEntryDBThumbnailDisplayJSPF_"+productId+"_link_9b")
		title.innerHTML =  serviceResponse.catalogEntry.description[0].name;
		title.href += "?swatchCatId="+serviceResponse.catalogEntry.catalogEntryIdentifier.uniqueID+"&swatchPartNumber="+serviceResponse.catalogEntry.catalogEntryIdentifier.externalIdentifier.partNumber;
		
		var offerprice = document.getElementById("WC_CatalogEntryDBThumbnailDisplayJSPF_"+productId+"_div_10").children.offerPrice
		if(offerprice!=null && offerprice!=undefined){
			//updated for 1099
			var innercode= offerprice.innerHTML;
			offerprice.innerHTML = innercode.substring(0,innercode.indexOf('$'))+serviceResponse.catalogEntry.offerPrice;
		}
		var listprice = document.getElementById("WC_CatalogEntryDBThumbnailDisplayJSPF_"+productId+"_div_10").children.listPrice
		if(listprice!=null && listprice!=undefined){
			//updated for 1099
			var innercode= listprice.innerHTML;
			listprice.innerHTML = innercode.substring(0,innercode.indexOf('$'))+ serviceResponse.catalogEntry.listPrice;	
		}
	}
	
 },
	/**
	* getImageForSKU Returns the full image of the catalog entry with the selected attributes as specified in the {@link fastFinderJS.selectedAttributes} value.
	*					This method uses resolveImageForSKU to find the SKU image with the selected attributes values.
	*
	* @param {String} imageField, the field name from which the image should be picked
	* @return {String} path to the SKU image.
	* 
	*
	**/
	getImageForSKU : function(entitledItemId, imageField){
		var attributeArray = [];
		var selectedAttributes = this.selectedAttributesList[entitledItemId];
		for(attribute in selectedAttributes){
			attributeArray.push(attribute + "_" + selectedAttributes[attribute]);
		}
		return this.resolveImageForSKU(attributeArray, imageField);
	},
	
	/**
	* resolveImageForSKU Resolves image of a SKU using an array of defining attributes.
	*
	* @param {String[]} attributeArray An array of defining attributes upon which to resolve a SKU.
	* @param {String} imageField, the field name from which the image should be picked
	*
	* @return {String} imagePath The location of SKU image.
	*
	**/
	resolveImageForSKU : function(attributeArray, imageField){
	
		console.debug("Resolving SKU >> " + attributeArray +">>"+ this.entitledItems);
		var imagePath = "";
		var attributeArrayCount = attributeArray.length;
		
		for(x in this.entitledItems){
			if(null != imageField){
				var imagePath = this.entitledItems[x][imageField];
			} else {
			var imagePath = this.entitledItems[x].ItemImage467;
			}
			
			var Attributes = this.entitledItems[x].Attributes;
			var attributeCount = 0;
			for(index in Attributes){
				attributeCount ++;
			}

			// Handle special case where a catalog entry has one sku with no attributes
			if (attributeArrayCount == 0 && attributeCount == 0){
				return imagePath;
			}
			if(attributeCount != 0 && attributeArrayCount >= attributeCount){
				var matchedAttributeCount = 0;

				for(attributeName in attributeArray){
					var attributeValue = attributeArray[attributeName];
					if(attributeValue in Attributes){
						matchedAttributeCount ++;
					}
				}
				
				if(attributeCount == matchedAttributeCount){
					console.debug("ItemImage:" + imagePath + " for Attribute: " + attributeArray);
					var imageArray = [];
					imageArray.push(imagePath);
					imageArray.push(this.entitledItems[x].ItemThumbnailImage);
					if(this.entitledItems[x].ItemAngleThumbnail != null && this.entitledItems[x].ItemAngleThumbnail != undefined){
						imageArray.push(this.entitledItems[x].ItemAngleThumbnail);
						imageArray.push(this.entitledItems[x].ItemAngleFullImage);
					}
					return imageArray;
				}
			}
		}
		return null;
	},



	
	
	/**
	* Handles the case when a swatch is selected. Set the border of the selected swatch.
	* @param {String} selectedAttributeName The name of the selected swatch attribute.
	* @param {String} selectedAttributeValue The value of the selected swatch attribute.
	* @param {String} entitledItemId The ID of the SKU
	* @param {String} doNotDisable The name of the swatch attribute that should never be disabled.
	* @param {String} imageField, the field name from which the image should be picked
	* @return boolean Whether the swatch is available for selection
	**/
	selectSwatch: function(selectedAttributeName, selectedAttributeValue, entitledItemId, doNotDisable, skuImageId, imageField) {
		if(dojo.hasClass("swatch_" + entitledItemId + "_" + selectedAttributeValue, "color_swatch_disabled")){
			return;
		}
		
		var selectedAttributes = this.selectedAttributesList[entitledItemId];
		for (attribute in selectedAttributes) {
			if (attribute == selectedAttributeName) {
				// case when the selected swatch is already selected with a value, if the value is different than
				// what's being selected, reset other swatches and deselect the previous value and update selection
				if (selectedAttributes[attribute] != selectedAttributeValue) {
					// deselect previous value and update swatch selection
					var swatchElement = dojo.byId("swatch_" + entitledItemId + "_" + selectedAttributes[attribute]);
					swatchElement.className = "color_swatch";
					swatchElement.src = swatchElement.src.replace("_disabled.png","_enabled.png");
					
					//change the title text of the swatch link
					dojo.byId("swatch_link_" + entitledItemId + "_" + selectedAttributes[attribute]).title = swatchElement.alt;
				}
			}
			if (document.getElementById("swatch_link_" + entitledItemId + "_" + selectedAttributes[attribute]) != null) {
				document.getElementById("swatch_link_" + entitledItemId + "_" + selectedAttributes[attribute]).setAttribute("aria-checked", "false");
			}
		}
		this.makeSwatchSelection(selectedAttributeName, selectedAttributeValue, entitledItemId, doNotDisable, skuImageId, imageField);
	},
	

	/**
* Make swatch selection - add to selectedAttribute, select image, and update other swatches and SKU image based on current selection.
* @param {String} swatchAttrName The name of the selected swatch attribute.
* @param {String} swatchAttrValue The value of the selected swatch attribute.
* @param {String} entitledItemId The ID of the SKU.
* @param {String} doNotDisable The name of the swatch attribute that should never be disabled.	
* @param {String} skuImageId This is optional. The element id of the product image - image element id is different in product page and category list view. Product page need not pass it because it is set separately
* @param {String} imageField This is optional. The json field from which image should be picked. Pass value if a different size image need to be picked
**/
makeSwatchSelection: function(swatchAttrName, swatchAttrValue, entitledItemId, doNotDisable, skuImageId, imageField) {
	var e = document.getElementById("swatchImage");
	// setSelectedAttribute internally calls changeProdImage method to change product image.
	this.setSelectedAttribute(swatchAttrName, swatchAttrValue, entitledItemId, skuImageId, imageField);
	document.getElementById("swatch_" + entitledItemId + "_" + swatchAttrValue).className = "color_swatch_selected";
	document.getElementById("swatch_link_" + entitledItemId + "_" + swatchAttrValue).setAttribute("aria-checked", "true");
	//document.getElementById("swatch_selection_label_" + entitledItemId + "_" + swatchAttrName).className = "header color_swatch_label left";
	//if (document.getElementById("swatch_selection_" + entitledItemId + "_" + swatchAttrName).style.display == "none") {
	//	document.getElementById("swatch_selection_" + entitledItemId + "_" + swatchAttrName).style.display = "inline";
	//}
	//document.getElementById("swatch_selection_" + entitledItemId + "_" + swatchAttrName).innerHTML = swatchAttrValue;
	//this.updateSwatchImages(swatchAttrName, entitledItemId, doNotDisable,imageField);
},


/**
* Update swatch images - this is called after selection of a swatch is made, and this function checks for
* entitlement and disable swatches that are not available
* @param selectedAttrName The attribute that is selected
* @param {String} entitledItemId The ID of the SKU.
* @param {String} doNotDisable The name of the swatch attribute that should never be disabled.	
**/
updateSwatchImages: function(selectedAttrName, entitledItemId, doNotDisable,imageField) {
	var swatchToUpdate = new Array();
	var selectedAttributes = this.selectedAttributesList[entitledItemId];
	//var selectedAttrValue = selectedAttributes[selectedAttrName];
	//var swatchList = this.allSwatchesArrayList[entitledItemId];
	
	// finds out which swatch needs to be updated, add to swatchToUpdate array
	for(var i=0; i<swatchList.length; i++) {
		var attrName = swatchList[i][0];
		var attrValue = swatchList[i][1];
		var attrImg1 = swatchList[i][2];
		var attrImg2 = swatchList[i][3];
		var attrOnclick = swatchList[i][4];
		
		if (attrName != doNotDisable && attrName != selectedAttrName) {
			var swatchRecord = new Array();
			swatchRecord[0] = attrName;
			swatchRecord[1] = attrValue;
			swatchRecord[2] = attrImg1;
			swatchRecord[4] = attrOnclick;
			swatchRecord[5] = false;
			swatchToUpdate.push(swatchRecord);
		}
	}
	
	// finds out which swatch is entitled, if it is, image should be set to enabled
	// go through entitledItems array and find out swatches that are entitled 
	for (x in this.entitledItems) {
		var Attributes = this.entitledItems[x].Attributes;

		for(y in Attributes){
			var index = y.indexOf("_");
			var entitledSwatchName = y.substring(0, index);
			var entitledSwatchValue = y.substring(index+1);	
			
			//the current entitled item has the selected attribute value
			if (entitledSwatchName == selectedAttrName && entitledSwatchValue == selectedAttrValue) {
				//go through the other attributes that are available to the selected attribute
				//exclude the one that is selected
				for (z in Attributes) {
					var index2 = z.indexOf("_");
					var entitledSwatchName2 = z.substring(0, index2);
					var entitledSwatchValue2 = z.substring(index2+1);
					
					if(y != z){ //only check the attributes that are not the one selected
						for (i in swatchToUpdate) {
							var swatchToUpdateName = swatchToUpdate[i][0];
							var swatchToUpdateValue = swatchToUpdate[i][1];
							
							if (entitledSwatchName2 == swatchToUpdateName && entitledSwatchValue2 == swatchToUpdateValue) {
								swatchToUpdate[i][5] = true;
							}
						}
					}
				}
			}
		}
	}

	// Now go through swatchToUpdate array, and update swatch images
	var disabledAttributes = [];
	for (i in swatchToUpdate) {
		var swatchToUpdateName = swatchToUpdate[i][0];
		var swatchToUpdateValue = swatchToUpdate[i][1];
		var swatchToUpdateImg1 = swatchToUpdate[i][2];
		var swatchToUpdateImg2 = swatchToUpdate[i][3];
		var swatchToUpdateOnclick = swatchToUpdate[i][4];
		var swatchToUpdateEnabled = swatchToUpdate[i][5];		
		
		if (swatchToUpdateEnabled) {
			if(document.getElementById("swatch_" + entitledItemId + "_" + swatchToUpdateValue).className != "color_swatch_selected"){
				var swatchElement = dojo.byId("swatch_" + entitledItemId + "_" + swatchToUpdateValue);
				swatchElement.className = "color_swatch";
				swatchElement.src = swatchElement.src.replace("_disabled.png","_enabled.png");
				
				//change the title text of the swatch link
				dojo.byId("swatch_link_" + entitledItemId + "_" + swatchToUpdateValue).title = swatchElement.alt;
			}
			document.getElementById("swatch_link_" + entitledItemId + "_" + swatchToUpdateValue).setAttribute("aria-disabled", "false");
			document.getElementById("swatch_link_" + entitledItemId + "_" + swatchToUpdateValue).onclick = swatchToUpdateOnclick;
		} else {
			if(swatchToUpdateName != doNotDisable){
				var swatchElement = dojo.byId("swatch_" + entitledItemId + "_" + swatchToUpdateValue);
				var swatchLinkElement = dojo.byId("swatch_link_" + entitledItemId + "_" + swatchToUpdateValue);
				swatchElement.className = "color_swatch_disabled";					
				swatchLinkElement.onclick = null;
				swatchElement.src = swatchElement.src.replace("_enabled.png","_disabled.png");
				
				//change the title text of the swatch link
				var titleText = storeNLS["INV_ATTR_UNAVAILABLE"];
				swatchLinkElement.title = dojo.string.substitute(titleText,{0: swatchElement.alt});
				
				document.getElementById("swatch_link_" + entitledItemId + "_" + swatchToUpdateValue).setAttribute("aria-disabled", "true");
				
				//The previously selected attribute is now unavailable for the new selection
				//Need to switch the selection to an available value
				if(selectedAttributes[swatchToUpdateName] == swatchToUpdateValue){
					disabledAttributes.push(swatchToUpdate[i]);
				}
			}
		}
	}
	
	//If there were any previously selected attributes that are now unavailable
	//Find another available value for that attribute and update other attributes according to the new selection
	for(i in disabledAttributes){
		var disabledAttributeName = disabledAttributes[i][0];
		var disabledAttributeValue = disabledAttributes[i][1];

		for (i in swatchToUpdate) {
			var swatchToUpdateName = swatchToUpdate[i][0];
			var swatchToUpdateValue = swatchToUpdate[i][1];
			var swatchToUpdateEnabled = swatchToUpdate[i][5];	
			
			if(swatchToUpdateName == disabledAttributeName && swatchToUpdateValue != disabledAttributeValue && swatchToUpdateEnabled){
					this.makeSwatchSelection(swatchToUpdateName, swatchToUpdateValue, entitledItemId, doNotDisable,imageField);
				break;
			}
		}
	}
},

setSelectedColor : function(selectedAttributeValue){ 
	this.selectedColor = selectedAttributeValue.replace(/\u00a0/g," ").replace(/&nbsp;/g," ");//modified for swatches 1022 req 
},
setSelectedSize : function(selectedAttributeValue){ 
	this.selectedSize = selectedAttributeValue.replace(/\u00a0/g," ").replace(/&nbsp;/g," ");//modified for swatches 1022 req 
},
//Req-1079 Pending
setSelectedSizeForQuickView : function(selectedAttributeValue){ 
	this.selectedSizeForQuickView = selectedAttributeValue.replace(/\u00a0/g," ").replace(/&nbsp;/g," ");
},

setSelectedSizeForSwatch : function(){ 
	if(this.selectedSize != ""){
		this.setSelectedAttribute("Talla",this.selectedSize);
	}
},
setAttrForCurrentAttr : function(selectedAttributeName,selectedAttributeValue,entitledItemId,fromPage){ 
	if(selectedAttributeName == "Color"){
		this.setSelectedColor(selectedAttributeValue);
		this.setSelectedAttribute('Color',this.selectedColor);
		this.setSizeForColorDropDown(entitledItemId,selectedAttributeName,fromPage);
	}else if(selectedAttributeName == "Talla"){
		this.setSelectedSize(selectedAttributeValue,selectedAttributeName);
		this.setSelectedAttribute('Talla',this.selectedSize);
		this.setSizeForColorDropDown(entitledItemId,selectedAttributeName,fromPage);
		
	}
},
setSizeSwatchForColor: function(entitledItemId,fromPage){
	//this.setSelectedAttribute('Color',this.selectedColor);
	if(this.selectedAttributes['Talla']!=undefined){
		delete this.selectedAttributes.Talla;
	}
	var entitledItemJSON ="";
	if (dojo.byId(entitledItemId)!=null ){
		 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		 this.setEntitledItems(entitledItemJSON);
		}else{
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
	
	var attributeArray = [];
	var sizeArray = [];
	var catarray = [];
	for(var index = 0; index <= entitledItemJSON.length; index++){
		if(this.entitledItems[index] && this.entitledItems[index].Attributes){
			for(entitledItem in this.entitledItems[index].Attributes){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != ""){
					if(objAttr == 'Color_'+dojo.trim(this.selectedColor))
					{
						attributeArray.push(this.entitledItems[index].Attributes);
						catarray.push(this.entitledItems[index].catentry_id)
					}
				}				
			}
			
		}
	}
	
	for(var index = 0; index <= attributeArray.length; index++){
			for(entitledItem in attributeArray[index]){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != "" && objAttr.startsWith('Talla')){
					sizeArray.push(objAttr.substring(6,objAttr.length));
				}				
			}
			
	}
	
	
var mobileView=false;
	
	if( window.matchMedia ) {
		if(window.matchMedia('only screen and (max-width: 667px) and (orientation : portrait) ').matches){
			mobileView = true;
		}else if(window.matchMedia('only screen and (max-width: 780px) and (orientation : landscape) ').matches){
			mobileView = true;
		}else if (window.matchMedia('only screen and (min-device-width: 768px) and (max-device-width: 1024px)and (-webkit-min-device-pixel-ratio: 1) and (orientation: portrait)').matches){
			mobileView = true;
		}else if (window.matchMedia('only screen and (min-device-width: 768px) and (max-device-width: 1024px)and  (orientation: landscape)').matches){
			mobileView = true;
		}
		
	}
	var maxLength;
	if(fromPage=='fromPDP'){
		if( mobileView) {
			maxLength=6;
		}else{
			maxLength=8;
		}
		 
	}else if(fromPage=='fromQuickView'){
		 maxLength=6;
	}
	if(sizeArray.length!=0){
	if(sizeArray.length<maxLength){
		//modified for swatches 1022 req start
		var productId= entitledItemId.replace("entitledItem_","");
		var parameters = {};
		parameters.storeId = this.storeId;
		parameters.langId= this.langId;
		parameters.catalogId= this.catalogId;
		parameters.productId= productId;
		parameters.onlyCatalogEntryPrice = 'false';
		parameters.sizeArray=sizeArray;
		parameters.fromPage=fromPage;
		
		dojo.xhrPost({
			url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",	
			handleAs: "json-comment-filtered",
			content: parameters,
			service: this,
			load: categoryDisplayJS.displaySwatchServiceResponseForColor,
			error: function(errObj,ioArgs) {
				console.debug("CategoryDisplay.setSizeSwatchForColor: Unexpected error occurred during an xhrPost request.");
			}
		});
		
		//modified for swatches 1022 req end
	}else{
		var innerhtml='<div class="attribute_list"><span class="required-field"> *</span><span class="attr_text">Talla:</span><div class="styled_select" id="PDPAttributeSelect">';
		if(fromPage=='fromPDP'){
			innerhtml=innerhtml+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("Talla",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\''+entitledItemId+'\',false,false);>'
		}else if(fromPage=='fromQuickView'){
			innerhtml=innerhtml+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("Talla",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\''+entitledItemId+'\',true,false);>'
		}
		
		innerhtml=innerhtml+' <option value="">Selecciona...</option>';
		for(var i=0; i<sizeArray.length; i++){
			innerhtml=innerhtml+'<option value="'+sizeArray[i]+'"';
			if(this.selectedSize==sizeArray[i]){
				innerhtml=innerhtml+'selected="selected"';
			}
			innerhtml=innerhtml+'>'+sizeArray[i]+'</option>';
		}
		innerhtml=innerhtml+'</select></div>';	
		if(null!=document.getElementById('sizeDiv')){
			document.getElementById('sizeDiv').innerHTML=innerhtml; 
		}
	}
}
},
setColorSwatchForSize: function(entitledItemId,fromPage){
	if(this.selectedAttributes['Color']!=undefined){
		delete this.selectedAttributes.Color;
	}
	var entitledItemJSON ="";
	if (dojo.byId(entitledItemId)!=null ){
	 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
	 this.setEntitledItems(entitledItemJSON);
	}else{
		entitledItemJSON = this.getEntitledItemJsonObject(); 
	}
	
	var attributeArray = [];
	var colorArray = [];
	
	for(var index = 0; index <= entitledItemJSON.length; index++){
		if(this.entitledItems[index] && this.entitledItems[index].Attributes){
			for(entitledItem in this.entitledItems[index].Attributes){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != ""){
					if(objAttr == 'Talla_'+dojo.trim(this.selectedSize))
					{
						attributeArray.push(this.entitledItems[index].Attributes);
					}
				}				
			}
			
		}
	}
	
	for(var index = 0; index <= attributeArray.length; index++){
			for(entitledItem in attributeArray[index]){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != "" && objAttr.startsWith('Color')){
					colorArray.push(objAttr.substring(6,objAttr.length));
				}				
			}
			
	}
	
var mobileView=false;
	
	if( window.matchMedia ) {
		if(window.matchMedia('only screen and (max-width: 667px) and (orientation : portrait) ').matches){
			mobileView = true;
		}else if(window.matchMedia('only screen and (max-width: 780px) and (orientation : landscape) ').matches){
			mobileView = true;
		}else if (window.matchMedia('only screen and (min-device-width: 768px) and (max-device-width: 1024px)and (-webkit-min-device-pixel-ratio: 1) and (orientation: portrait)').matches){
			mobileView = true;
		}else if (window.matchMedia('only screen and (min-device-width: 768px) and (max-device-width: 1024px)and  (orientation: landscape)').matches){
			mobileView = true;
		}
		
	}
	var maxLength;
	if(fromPage=='fromPDP'){
		if( mobileView) {
			maxLength=6;
		}else{
			maxLength=8;
		}
		 
	}else if(fromPage=='fromQuickView'){
		 maxLength=6;
	}
	if(colorArray.length!=0 ){
	if(colorArray.length<maxLength){
		var productId= entitledItemId.replace("entitledItem_","");
		var parameters = {};
		parameters.storeId = this.storeId;
		parameters.langId= this.langId;
		parameters.catalogId= this.catalogId;
		parameters.productId= productId;
		parameters.onlyCatalogEntryPrice = 'false';
		parameters.colorArray=colorArray;
		parameters.fromPage=fromPage;
		
		dojo.xhrPost({
			url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",	
			handleAs: "json-comment-filtered",
			content: parameters,
			service: this,
			load: categoryDisplayJS.displaySwatchServiceResponseForSize,
			error: function(errObj,ioArgs) {
				console.debug("CategoryDisplay.setColorSwatchForSize: Unexpected error occurred during an xhrPost request.");
			}
		});
	
	}else{
		var innerhtml='<div class="attribute_list"><span class="required-field"> *</span><span class="attr_text">Color:</span><div class="styled_select" id="PDPAttributeSelect">';
		if(fromPage=='fromPDP'){
			innerhtml=innerhtml+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("Color",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\''+entitledItemId+'\',false,false);>'
		}else if(fromPage=='fromQuickView'){
			innerhtml=innerhtml+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("Color",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\''+entitledItemId+'\',true,false);>'
		}
		
		innerhtml=innerhtml+' <option value="">Selecciona...</option>';
		for(var i=0; i<colorArray.length; i++){
			innerhtml=innerhtml+'<option value="'+colorArray[i]+'"';
			if(this.selectedColor==colorArray[i]){
				innerhtml=innerhtml+'selected="selected"';
			}
			innerhtml=innerhtml+'>'+colorArray[i]+'</option>';
		}
		innerhtml=innerhtml+'</select></div>';	
		if(null!=document.getElementById('colorDiv')){
			document.getElementById('colorDiv').innerHTML=innerhtml; 
		}
	}
}
},
displaySwatchServiceResponseForSize : function(serviceResponse, ioArgs){
	var colorArray = ioArgs.args.content.colorArray; 
	var catEntryID = ioArgs.args.content.productId;
	var fromPage = ioArgs.args.content.fromPage
	var swatchCount = 0;
	var attributesHTML;
	for (var a in serviceResponse.catalogEntryAttributes.attributes) {
		if (serviceResponse.catalogEntryAttributes.attributes[a].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[a].attributeIdentifier.externalIdentifier.identifier == 'Color') {
			for (var val in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue) {
				for (var valArr in colorArray){
					if(serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].value == colorArray[valArr] ){
						if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
							for (var ext in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
								if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue[ext].key == 'Image1' ) {
									swatchCount++;
								}
							}
						}
					}
				}
			}
		}
	}
	if(colorArray.length == swatchCount ){
		categoryDisplayJS.setSelectedColor(colorArray[0]);
		for (var i in serviceResponse.catalogEntryAttributes.attributes) {
			if (serviceResponse.catalogEntryAttributes.attributes[i].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Color') {
				attributesHTML = '<span class="oneSKUAttribute_Title">'+serviceResponse.catalogEntryAttributes.attributes[i].name+': </span><span id= "oneSKUAttribute_heading"></span>';
				attributesHTML = attributesHTML +  '<div id="swatches_pdp">';
				var count=0;
				for (var j in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
					swatchImg="";
					for (var m in colorArray){
						if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == colorArray[m]){
							if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
								for (var k in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
									if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].key == 'Image1' ) {
										swatchImg =serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].value.trim();
									}
								}
							}
						}
					}
					
				if (swatchImg != "") {
					//Req-1079 -pending
					if(count==0){
						//categoryDisplayJS.setSwatchAttributeValue(defaultSwatchColor+',swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));	
						categoryDisplayJS.setSelectedAttribute(serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;"),serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value);
						categoryDisplayJS.setSelectedColor(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
						attributesHTML = attributesHTML +'<div id="color_btn"  class="picked">';
						//req-1079 Pending
						if(fromPage=='fromPDP'){
							categoryDisplayJS.changePrice('entitledItem_'+catEntryID+'',false,false);
						}
							if(fromPage=='fromQuickView'){
							categoryDisplayJS.changePrice('entitledItem_'+catEntryID+'',true,false);
						}
					}
					else{
						attributesHTML = attributesHTML +'<div id="color_btn" >';
					}
					
					//attributesHTML = attributesHTML +'<div id="color_btn" >';
					count++;
					attributesHTML = attributesHTML + '<div class="colorpick"> ';
					if(fromPage=='fromPDP'){
						attributesHTML = attributesHTML +'<a href=JavaScript:categoryDisplayJS.setSKUImageId("productMainImage");categoryDisplayJS.setSelectedAttribute(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSwatchAttributeValue(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\',\'swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSelectedColor(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',false,false); id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="/wcsstore/CencosudStorefrontAssetStore///'+swatchImg.trim()+'" class="color_swatch_selected" /></a>'
					}else if(fromPage=='fromQuickView'){
						attributesHTML = attributesHTML +'<a href=JavaScript:categoryDisplayJS.setSKUImageId("productMainImage");categoryDisplayJS.setSelectedAttribute(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSwatchAttributeValue(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\',\'swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSelectedColor(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false); id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="/wcsstore/CencosudStorefrontAssetStore///'+swatchImg.trim()+'" class="color_swatch_selected" /></a>'
					}
					
					attributesHTML = attributesHTML +  '</div></div>';   																								 																																																
				}	
				}attributesHTML = attributesHTML + '</div>';
			}
			
			}
		/*if(fromPage=='fromQuickView' && null != document.getElementById("productQuantity")){
			document.getElementById("productQuantity").style.marginTop="-36px"; 
		}*/
		}else{
			if(colorArray.length>1){
				if(fromPage=='fromQuickView' && null != document.getElementById("productQuantity")){
					document.getElementById("productQuantity").style.marginTop="10px"; 
				}
				attributesHTML='<span class="required-field"> *</span><span class="attr_text">Color: </span><div class="styled_select" id="PDPAttributeSelect">';
				if(fromPage=='fromPDP'){
					attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS(Color,this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',false,false);>'
				}else if(fromPage=='fromQuickView'){
					attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS(Color,this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);>'
				}
				
				attributesHTML=attributesHTML+' <option value="">Selecciona...</option>';
				for(var i=0; i<colorArray.length; i++){
					attributesHTML=attributesHTML+'<option value="'+colorArray[i]+'"';
					if(this.selectedColor==colorArray[i]){
						attributesHTML=attributesHTML+'selected="selected"';
					}
					attributesHTML=attributesHTML+'>'+colorArray[i]+'</option>';
				}
				attributesHTML=attributesHTML+'</select>';	
			}else{
				categoryDisplayJS.setSelectedColor(colorArray[0]);
				categoryDisplayJS.setSelectedAttribute('Color',categoryDisplayJS.selectedColor);
				attributesHTML = '<span class="oneSKUAttribute_Title">Color: </span><span id= "oneSKUAttribute_heading">'+colorArray[0]+'</span>';
			}
			
		}
	if(null != document.getElementById('colorDiv')){
		document.getElementById('colorDiv').innerHTML=attributesHTML; 
	}else if(null!=document.getElementById('Color')){
		document.getElementById('Color').innerHTML=attributesHTML; 
	}
	
	
 },
 
 displaySwatchServiceResponseForColor : function(serviceResponse, ioArgs){
		var sizeArray = ioArgs.args.content.sizeArray; 
		var catEntryID = ioArgs.args.content.productId;
		var fromPage = ioArgs.args.content.fromPage
		var swatchCount = 0;
		var attributesHTML;
		for (var a in serviceResponse.catalogEntryAttributes.attributes) {
			if (serviceResponse.catalogEntryAttributes.attributes[a].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[a].attributeIdentifier.externalIdentifier.identifier == 'Talla') {
				for (var val in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue) {
					for (var valArr in sizeArray){
						if(serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].value == sizeArray[valArr] ){
							if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
								for (var ext in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
									if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue[ext].key == 'Image1' ) {
										swatchCount++;
									}
								}
							}
						}
					}
				}
			}
		}
		if(sizeArray.length == swatchCount ){
			categoryDisplayJS.setSelectedSize(sizeArray[0]);
			for (var i in serviceResponse.catalogEntryAttributes.attributes) {
				if (serviceResponse.catalogEntryAttributes.attributes[i].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Talla') {
					attributesHTML = '<span class="oneSKUAttribute_Title">'+serviceResponse.catalogEntryAttributes.attributes[i].name+': </span><span id= "oneSKUAttribute_headingForSize"></span>';
					attributesHTML = attributesHTML +  '<div id="size_swatches_pdp">';
					var count=0;
					for (var j in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
						swatchImg="";
						for (var m in sizeArray){
							if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == sizeArray[m]){
								if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
									for (var k in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
										if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].key == 'Image1' ) {
											swatchImg =serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].value.trim();
										}
									}
								}
							}
						}
						
					if (swatchImg != "") {
						//new - 1079 
						if (sizeArray.length==1){
							categoryDisplayJS.setSelectedAttribute('Talla',categoryDisplayJS.selectedSize);
							attributesHTML = attributesHTML +'<div id="color_btn" class="picked" >';
						}
						else{
							attributesHTML = attributesHTML +'<div id="color_btn">';
						}
						count++;
						attributesHTML = attributesHTML + '<div class="colorpick"> ';
						if(fromPage=='fromPDP'){
							attributesHTML = attributesHTML +'<a href=JavaScript:categoryDisplayJS.setSelectedAttribute(\'Talla\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSizeCheckedValue(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSelectedSize(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',false,false); id="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="/wcsstore/CencosudStorefrontAssetStore///'+swatchImg.trim()+'" class="color_swatch_selected" /></a>'
						}else if(fromPage=='fromQuickView'){
							attributesHTML = attributesHTML +'<a href=JavaScript:categoryDisplayJS.setSelectedAttribute(\'Talla\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSizeCheckedValue(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSelectedSize(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false); id="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="/wcsstore/CencosudStorefrontAssetStore///'+swatchImg.trim()+'" class="color_swatch_selected" /></a>'
						}
						
						attributesHTML = attributesHTML +  '</div></div>';   																								 																																																
					}	
					}attributesHTML = attributesHTML + '</div>';
				}
				
				}
		/*	if(fromPage=='fromQuickView' && null != document.getElementById("productQuantity")){
				document.getElementById("productQuantity").style.marginTop="-36px"; 
			}*/
			}else{
				if(sizeArray.length>1){
					if(fromPage=='fromQuickView' && null != document.getElementById("productQuantity")){
						document.getElementById("productQuantity").style.marginTop="10px"; 
					}
					//1079 Defect Fix--
					attributesHTML='<div class="attribute_list"><span class="required-field"> *</span><span class="attr_text">Talla: </span><div class="styled_select" id="PDPAttributeSelect">';
					if(fromPage=='fromPDP'){
						attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS(\'Talla\',this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',false,false);>'
					}else if(fromPage=='fromQuickView'){
						attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS(\'Talla\',this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);>'
					}
					
					attributesHTML=attributesHTML+' <option value="">Selecciona...</option>';
					for(var i=0; i<sizeArray.length; i++){
						attributesHTML=attributesHTML+'<option value="'+sizeArray[i]+'"';
						if(this.selectedSize==sizeArray[i]){
							attributesHTML=attributesHTML+'selected="selected"';
						}
						attributesHTML=attributesHTML+'>'+sizeArray[i]+'</option>';
					}
					attributesHTML=attributesHTML+'</select>';	
				}else{
					categoryDisplayJS.setSelectedSize(sizeArray[0]);
					categoryDisplayJS.setSelectedAttribute('Talla',categoryDisplayJS.selectedSize);
					attributesHTML = '<span class="oneSKUAttribute_Title">Talla: </span><span id= "oneSKUAttribute_headingForSize">'+sizeArray[0]+'</span>';
				}
				
			}
		if(null != document.getElementById('sizeDiv')){
			document.getElementById('sizeDiv').innerHTML=attributesHTML; 
		}else if(null!=document.getElementById('Talla')){
			document.getElementById('Talla').innerHTML=attributesHTML; 
		}
		
		
	 },
 resolveBuyable : function(){
	 var entitledItemJSON;
	 var catArray = [];
	 var hasColor="";
	 var hasSize="";
	 var entitledItemId='entitledItem_'+this.mainProductId;
		if (dojo.byId(entitledItemId)!=null) {
			//the json object for entitled items are already in the HTML. 
			 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		}else{
			//if dojo.byId(entitledItemId) is null, that means there's no <div> in the HTML that contains the JSON object. 
			//in this case, it must have been set in catalogentryThumbnailDisplay.js when the quick info
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
		var selectedSize=this.selectedAttributes["Talla"];
		var selectedColor = this.selectedAttributes["Color"]
		if(null!=entitledItemJSON ){
        if( entitledItemJSON.length>0){
			var color="";
			var size="";
			if(entitledItemJSON[0] && entitledItemJSON[0].Attributes){
				for(entitledItem in entitledItemJSON[0].Attributes){
					var objAttr = dojo.trim(entitledItem);
					if(objAttr != ""){
						if(objAttr.indexOf('Color')!=-1 ) {
							hasColor="true";
						}
						if(objAttr.indexOf('Talla')!=-1 ) {
							hasSize="true";
						}
					}
				}
			
			}
		}
		 var buyable=true;
		for(var i=0;i<entitledItemJSON.length;i++){
			if(entitledItemJSON[i] && entitledItemJSON[i].Attributes){
				for(entitledItem in entitledItemJSON[i].Attributes){
					var objAttr = dojo.trim(entitledItem);
					if(objAttr != "" && hasColor=='true'){
						if(objAttr.indexOf('Color')!=-1 && objAttr.substring(6,objAttr.length)==selectedColor) {
							if(hasSize=='true'){
								catArray.push(entitledItemJSON[i]);
							}else{
								if(entitledItemJSON[i].item_buyable==0){
									buyable=false;
								}	
							}
							
						}
						
					}else if(objAttr != "" && hasSize=='true'){
						if(objAttr.indexOf('Talla')!=-1 && objAttr.substring(6,objAttr.length)==selectedSize) {
							if(entitledItemJSON[i].item_buyable==0){
								buyable=false;
							}
						}
					}
				}
			
			}
		}
		for(var index = 0; index <= catArray.length; index++){
			if(catArray[index] && catArray[index].Attributes){
			for(entitledItem in catArray[index].Attributes){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != "" && objAttr.startsWith('Talla')){
					if(objAttr.substring(6,objAttr.length)==selectedSize){
						if(catArray[index].item_buyable==0){
							buyable=false;
						}
					}
				}				
			}
			}
	}
		if(!buyable){
			if(document.getElementById('addToCartArea')!=null){
				document.getElementById('addToCartArea').style.display='none';
				if(document.getElementById('ooStock_pdp') !=null){
					document.getElementById('ooStock_pdp').style.display='block';
				}
			}else if(document.getElementById('productQuantity')!=null){
				document.getElementById('productQuantity').style.display='none';
				if(document.getElementById('outofstockstockdisplayid_QV') !=null){
					document.getElementById('outofstockstockdisplayid_QV').style.display='block';
				}
			}
			
		}else{
			if(document.getElementById('addToCartArea')!=null){
				document.getElementById('addToCartArea').style.display='block';
				if(document.getElementById('ooStock_pdp') !=null){
					document.getElementById('ooStock_pdp').style.display='none';
				}
			}else if(document.getElementById('productQuantity')!=null){
				document.getElementById('productQuantity').style.display='block';
				if(document.getElementById('outofstockstockdisplayid_QV') !=null){
					document.getElementById('outofstockstockdisplayid_QV').style.display='none';
				}
			}
		}
		 
 }
 },
setSizeForColorDropDown: function(entitledItemId,selectedAttributeName,fromPage){
	var entitledItemJSON ="";
	if (dojo.byId(entitledItemId)!=null ){
		 entitledItemJSON = eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		 this.setEntitledItems(entitledItemJSON);
		}else{
			entitledItemJSON = this.getEntitledItemJsonObject(); 
		}
	var attributeArray = [];
	var sizecolorArray = [];
	
	for(var index = 0; index <= entitledItemJSON.length; index++){
		if(this.entitledItems[index] && this.entitledItems[index].Attributes){
			for(entitledItem in this.entitledItems[index].Attributes){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != ""){
					if(selectedAttributeName=='Color' && objAttr == 'Color_'+dojo.trim(this.selectedColor))
					{
						attributeArray.push(this.entitledItems[index].Attributes);
					}else if(selectedAttributeName=='Talla' && objAttr == 'Talla_'+dojo.trim(this.selectedSize))
					{
						attributeArray.push(this.entitledItems[index].Attributes);
					}
				}				
			}
			
		}
	}
	var otherAttrName="";
	if(selectedAttributeName=='Talla'){
		otherAttrName='Color';
	}else if (selectedAttributeName=='Color'){
		otherAttrName='Talla';
	}
	if(this.selectedAttributes[otherAttrName]!=undefined){
		if(otherAttrName=='Color'){
			delete this.selectedAttributes.Color;
		}else if(otherAttrName=='Talla'){
			delete this.selectedAttributes.Talla;
		}
	}
	for(var index = 0; index <= attributeArray.length; index++){
			for(entitledItem in attributeArray[index]){
				var objAttr = dojo.trim(entitledItem);
				if(objAttr != "" && objAttr.startsWith(otherAttrName)){
					sizecolorArray.push(objAttr.substring(6,objAttr.length));
				}				
			}
			
	}
	var mobileView=false;
	
	if( window.matchMedia ) {
		if(window.matchMedia('only screen and (max-width: 667px) and (orientation : portrait) ').matches){
			mobileView = true;
		}else if(window.matchMedia('only screen and (max-width: 780px) and (orientation : landscape) ').matches){
			mobileView = true;
		}else if (window.matchMedia('only screen and (min-device-width: 768px) and (max-device-width: 1024px)and (-webkit-min-device-pixel-ratio: 1) and (orientation: portrait)').matches){
			mobileView = true;
		}else if (window.matchMedia('only screen and (min-device-width: 768px) and (max-device-width: 1024px)and  (orientation: landscape)').matches){
			mobileView = true;
		}
		
	}
	var maxLength;
	if(fromPage=='fromPDP'){
		if( mobileView) {
			maxLength=6;
		}else{
			maxLength=8;
		}
		 
	}else if(fromPage=='fromQuickView'){
		 maxLength=6;
	}
	if(sizecolorArray.length!=0 ){
	if( sizecolorArray.length<maxLength){
		if(selectedAttributeName == 'Color'){
			//modified for swatches 1022 req 
			var productId= entitledItemId.replace("entitledItem_","");
			var parameters = {};
			parameters.storeId = this.storeId;
			parameters.langId= this.langId;
			parameters.catalogId= this.catalogId;
			parameters.productId= productId;
			parameters.onlyCatalogEntryPrice = 'false';
			parameters.sizeArray=sizecolorArray;
			parameters.fromPage=fromPage;
			
			dojo.xhrPost({
				url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",	
				handleAs: "json-comment-filtered",
				content: parameters,
				service: this,
				load: categoryDisplayJS.displaySwatchServiceResponseForColor,
				error: function(errObj,ioArgs) {
					console.debug("CategoryDisplay.changePrice: Unexpected error occurred during an xhrPost request.");
				}
			});
			
		}else if(selectedAttributeName == 'Talla'){
			
			var productId= entitledItemId.replace("entitledItem_","");
			var parameters = {};
			parameters.storeId = this.storeId;
			parameters.langId= this.langId;
			parameters.catalogId= this.catalogId;
			parameters.productId= productId;
			parameters.onlyCatalogEntryPrice = 'false';
			parameters.colorArray=sizecolorArray;
			parameters.fromPage=fromPage;
			
			dojo.xhrPost({
				url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",	
				handleAs: "json-comment-filtered",
				content: parameters,
				service: this,
				load: categoryDisplayJS.displaySwatchServiceResponseForSize,
				error: function(errObj,ioArgs) {
					console.debug("CategoryDisplay.changePrice: Unexpected error occurred during an xhrPost request.");
				}
			});
		}
		//swatch
	}else{
		var selectedattr="";
		if(selectedAttributeName == 'Talla'){
			selectedattr=this.selectedSize;
		}else if(selectedAttributeName == 'Color'){
			selectedattr=this.selectedColor;
		}
		var innerhtml='<span class="required-field"> *</span><span class="attr_text">'+otherAttrName+': </span><div class="styled_select" id="PDPAttributeSelect">';
		if(fromPage=='fromPDP'){
			innerhtml=innerhtml+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("'+otherAttrName+'",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\''+entitledItemId+'\',false,false);>'
		}else if(fromPage=='fromQuickView'){
			innerhtml=innerhtml+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("'+otherAttrName+'",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\''+entitledItemId+'\',true,false);>'
		}
		
		innerhtml=innerhtml+' <option value="">Selecciona...</option>';
		for(var i=0; i<sizecolorArray.length; i++){
			innerhtml=innerhtml+'<option value="'+sizecolorArray[i]+'"';
			/*if(selectedattr==sizecolorArray[i]){
				innerhtml=innerhtml+'selected="selected"';
			}*/
			innerhtml=innerhtml+'>'+sizecolorArray[i]+'</option>';
		}
		innerhtml=innerhtml+'</select>';	
		document.getElementById(otherAttrName).innerHTML=innerhtml; 
		if(fromPage=='fromQuickView' && null != document.getElementById("productQuantity")){
			document.getElementById("productQuantity").style.marginTop="10px"; 
		}
		//dropdown
	}
 }
},

/* END :REQ#725 Swatches */

/*Req 1045 Swatches in Facets*/
setSwatchSelectedForFacets: function(selectedAttributeName){
	if(document.getElementsByName("swatchFacets")!=null && document.getElementsByName("swatchFacets")!=undefined){
		for(var i=0;i<document.getElementsByName("swatchFacets").length; i++){
			element = document.getElementsByName("swatchFacets").item(i);
			if(element.children[0].children[0].id==selectedAttributeName){
				element.className = "picked";
			}else{
				element.className = " ";
			}
		}
		
		
	}
},
setSizeSelectedForFacets: function(selectedAttributeName){
	if(document.getElementsByName("sizeFacets")!=null && document.getElementsByName("sizeFacets")!=undefined){
		for(var i=0;i<document.getElementsByName("sizeFacets").length; i++){
			element = document.getElementsByName("sizeFacets").item(i);
			if(element.id==selectedAttributeName){
				element.className = "picked";
			}else{
				element.className = " ";
			}
		}
		
		
	}
},
//Req-1079 Pending
getCatalogEntryIdForQuickView : function(){
	var attributeArray = [];
	for(attribute in this.selectedAttributes){
		if(dojo.trim(this.selectedAttributes[attribute]) != ""){
			attributeArray.push(attribute + "_" + this.selectedAttributes[attribute]);
		}
	}
	attributeArray.push("Talla_"+this.selectedSizeForQuickView)
	return this.resolveSKU(attributeArray);
},
/*Req 1045 Swatches in Facets*/
/*Req 1072  Swatches: Mostrar sku con el color/imagen por el cual se filtra en facets */
setSwatchImagePLPOnFacetChange : function(entitledItemId){
	
	var breadcrumbsForFacet = document.getElementById('breadcrumbsForFacets').value;
	var breadcrumbsForFacetsArray = breadcrumbsForFacet.split("/");
	var partnumber="";
	if(null != dojo.byId(entitledItemId)){
		var entitledItemJSON=eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		this.setEntitledItems(entitledItemJSON);
		for(var i = 0; i < breadcrumbsForFacetsArray.length; i++){
			var swatchValue = "Color_"+breadcrumbsForFacetsArray[i];
			for(var index = 0; index <= entitledItemJSON.length; index++){
				if(this.entitledItems[index] && this.entitledItems[index].Attributes){
					for(entitledItem in this.entitledItems[index].Attributes){
						var objAttr = dojo.trim(entitledItem);
						if(objAttr != ""){
							if(objAttr == dojo.trim(swatchValue))
							{
								catentryId = this.entitledItems[index].catentry_id;
								partnumber = this.entitledItems[index].partnumber;
								break;
							}
						}				
					}
					
				}
			}
		}
		
		var productId= entitledItemId.replace("entitledItem_","");
		
		if(partnumber!=undefined &&  partnumber != ""){
			var element = document.getElementById("WC_CatalogEntryDBThumbnailDisplayJSPF_"+productId+"_div_1")
			image = element.children[0].children[0].src;
			imageurl = image.substring(0,image.lastIndexOf('/')+1) + partnumber.substring(0,partnumber.lastIndexOf('-'))+ "?$plp$";
			element.children[0].children[0].src = imageurl;
		}
	}
	
},
/*Req 1072  Swatches: Mostrar sku con el color/imagen por el cual se filtra en facets */

/*REQ-1079 Pending*/
setSelectedImageForSwatch :  function(swatchvalue,entitledItemId){ 
	if(null != dojo.byId(entitledItemId)){
		var entitledItemJSON=eval('('+ dojo.byId(entitledItemId).innerHTML +')');
		this.setEntitledItems(entitledItemJSON);
		var swatchValue = 'Color_'+swatchvalue;
		var partnumber="";
			for(var index = 0; index <= entitledItemJSON.length; index++){
				if(this.entitledItems[index] && this.entitledItems[index].Attributes){
					for(entitledItem in this.entitledItems[index].Attributes){
						var objAttr = dojo.trim(entitledItem);
						if(objAttr != ""){
							if(objAttr == dojo.trim(swatchValue))
							{
								catentryId = this.entitledItems[index].catentry_id;
								partnumber = this.entitledItems[index].partnumber;
								break;
							}
						}				
					}
					
				}
			}
			if(partnumber!= undefined &&  partnumber != ""){
				this.updateFlyoutViewer(partnumber);
			}
		
	}
	
}
/*REQ-1079 Pending*/
}

categoryDisplayJS.HistoryTracker.prototype.back = categoryDisplayJS.goBack;
categoryDisplayJS.HistoryTracker.prototype.forward=categoryDisplayJS.goForward;


	
//-----------------------------------------------------------------
// Licensed Materials - Property of IBM
//
// WebSphere Commerce
//
// (C) Copyright IBM Corp. 2008, 2010 All Rights Reserved.
//
// US Government Users Restricted Rights - Use, duplication or
// disclosure restricted by GSA ADP Schedule Contract with
// IBM Corp.
//-----------------------------------------------------------------

/** 
 * @fileOverview This file is to be included in all full pages that use the CatalogEntryThumbnailDisplay.jspf.
 * It prepares all the code required for the Product Quick Info pop-up reveal.
 */

	//Make the Product Quick Info pop-up window movable.
	dojo.require("dojo.dnd.move");
	dojo.require("dijit.Dialog");
	dojo.require("dojo._base.event");
	
	/** The variable stores the Product Quick Info pop-up window. */
	var m1;
	
	/** 
	 * This variable is the id of element to display the pop-up around on <Enter> key click.
	 * Its default value is set to empty.
	 */
	var nodeId = "";
	/** 
	 * Used by the Brazil store, this variable is the id of the product entry to use. The ProductID
	 * in the Madisons store has been increment by one, so its really productID + 1. Hence, Brazil
	 * store will use the original productID, called origProductID. Its default value is set to empty.
	 */
	var origProductID = "";
	
	/** The variable stores the identifier of the order item to be replaced */
	var replaceOrderItemId;
	
	/** The response from the server */
	var responseJSON;
	
	/** 
	 * Initializes the Product Quick Info pop-up window to a movable dialog.
	 */	
	var initPopup = function(){
		m1 = new dojo.dnd.Moveable("second_level_category_popup", {handle: "popupHeader"});
	};
	
	var changeAttrId = "";
	var changeContractId = "";
	
	var showQTYBox = false;
	
	dojo.addOnLoad(initPopup);


	function setUpdateOrderItemIdsForItem(changeAttr, itemPosition) {
		changeAttrId = changeAttr;
		if (itemPosition != "") {
			changeContractId = 'B2BContractSelectExt_id_' + itemPosition;
		}
	}
	 
	 /** 
		 * Overrides the hidePopupButton function above by also checking to see if the user clicks shift+tab.
		 * 
		 * @param {string} id The id of the div area to hide. 
		 * @param {event} event The keystroke event entered by the user. 
		 */	
	 function shiftTabHidePopupButton(id, e){
		 if ((e.shiftKey) && (dojo.keys.TAB)){
				 
				 hidePopupButton(id);
			 } 
			 
		}
		 
//Start : Manhattan States Code Changes	 	 
		function getXInventoryStatus(catEntryId) {
			//catEntryId = catEntryId.replace("popupButton__", ""); 
			 
			var parameters = {};
			parameters.catEntryId = catEntryId;
			
			dojo.publish("ajaxRequestInitiated");
			dojo.xhrPost({
					url: getAbsoluteURL() +"cenXInventoryStatusControllerAjaxCmd",
					handleAs: "json-comment-filtered",
					content: parameters,
					service: this,
					load: getXInventoryDetails,
					error: function(errObj,ioArgs) {
						console.debug("CatalogEntryThumbnailDisplay.showPopup: Unexpected error occurred during an xhrPost request.");
						dojo.publish("ajaxRequestCompleted");
					}
			});
		 
		}
		function getXInventoryDetails(serviceResponse, ioArgs) {
			if (serviceResponse.inventoryStatus != null) {
				if(serviceResponse.inventoryStatus=="Out of Stock"){
					document.getElementById('addToCartAjaxButton1').style.display="none";
					document.getElementById('outofstockstockdisplayid').style.display="";
					 document.getElementById('productPopUpQty').style.display = "none";
					 document.getElementById('productPopUpQty_lbl').style.display = "none";
					 document.getElementById('limitedstockdisplayid').style.display="none";
					 document.getElementById('inventoryMsg_qv').innerHTML = "" ;
				}else if(serviceResponse.inventoryStatus=="Limited Stock"){
					document.getElementById('addToCartAjaxButton1').style.display="";
					document.getElementById('outofstockstockdisplayid').style.display="none";
					 document.getElementById('productPopUpQty').style.display = "";
					 document.getElementById('productPopUpQty_lbl').style.display = "";
					 document.getElementById('limitedstockdisplayid').style.display="";
					 document.getElementById('inventoryMsg_qv').innerHTML = "" ;
				}  else if(serviceResponse.inventoryStatus=="In Stock"){
					document.getElementById('addToCartAjaxButton1').style.display="";
					document.getElementById('outofstockstockdisplayid').style.display="none";
					 document.getElementById('productPopUpQty').style.display = "";
					 document.getElementById('productPopUpQty_lbl').style.display = "";
					 document.getElementById('limitedstockdisplayid').style.display="none";
					 document.getElementById('inventoryMsg_qv').innerHTML = "" ;
				} 
			}  
		}
		
		// MHTN: Add to cart button display logic - DEFECT 645
		function populateAddToCart (serviceResponse) {
			if (serviceResponse != null && serviceResponse != 'undefinded' && serviceResponse != ""
				&& serviceResponse.catalogEntry != null && serviceResponse.catalogEntry != "") {
				if(serviceResponse.catalogEntry.displayAddToCartButton == 'false'  || serviceResponse.catalogEntry.availabe_msg == 'Producto sin stock'){
					document.getElementById('addToCartAjaxButton1').style.display="none";
					document.getElementById('outofstockstockdisplayid').style.display="";
					document.getElementById('productPopUpQty').style.display = "none";
					document.getElementById('productPopUpQty_lbl').style.display = "none";
					document.getElementById('limitedstockdisplayid').style.display="none";
					document.getElementById('inventoryMsg_qv').innerHTML = "" ;
				} else {
					document.getElementById('addToCartAjaxButton1').style.display="";
					document.getElementById('outofstockstockdisplayid').style.display="none";
					document.getElementById('productPopUpQty').style.display = "";
					document.getElementById('productPopUpQty_lbl').style.display = "";
					
					// Availble message options - Producto sin stock | Limited Stock | ""
					// No need to display limited stock message for combo
					if(serviceResponse.catalogEntry.availabe_msg != "" && serviceResponse.catalogEntry.catalogEntryTypeCode != 'PackageBean'){
						document.getElementById('limitedstockdisplayid').style.display="";
					}	
					
					document.getElementById('inventoryMsg_qv').innerHTML = "" ;
				} 
			}  
		}
	/** 
	 * Displays the Product Quick Info pop-up containing product information.
	 * Retrieves product information in JSON format via an Ajax call.
	 * 
	 * @param {string} productId The id of the product to display.
	 * @param {string} event The event triggered from user actions.
	 * @param {string} targetId The id of the dojo element to display the pop-up next to.
	 * @param {string} nodeId The id of element to display the pop-up around on <Enter> key click.
	 * @param {object} productActionList The object containing Product Quick Info pop-up action list settings.
	 * @param {string} popUpQty The quantity to be displayed for this product.
	 */		
	function showPopup(productId,event,targetId,nodeId,productActionList,popUpQty,containerId) {
		//Start : Manhattan States Code Changes	 
		//getXInventoryStatus(productId);
		if(event == null || (event != null && event.type!="keypress") || (event != null && event.type=="keypress" && event.keyCode==13)){
			resetPopUp();
			
			var container = (containerId) ? containerId : "second_level_category_popup";

			if ( typeof(isBrazilStore) != 'undefined' && isBrazilStore ){
				this.nodeId = nodeId; //save the parent node
	        }
			//Default action list is used if it is not passed into this method
			if(productActionList == null){
				productActionList = new popupActionProperties();
			}
			
			//document.getElementById('productQuantity_qv').style.display = 'none';
			document.getElementById('addToCartAjaxButton1').style.display = '';
			document.getElementById('limitedstockdisplayid').style.display="none";
			
			showQTYBox = productActionList.showAddToCart;
			//From the productActionList object properties
			//hide/show the action links from the Quick Info 		
			if(productActionList.showAddToCart){
				if(document.getElementById('addToCartAjaxButton')){
					document.getElementById('addToCartAjaxButton').style.display='block';
				} else if(document.getElementById('addToCartButton')){
					document.getElementById('addToCartButton').style.display='block';
				}
				if(document.getElementById('skuNotBuyableButton')){
					document.getElementById('skuNotBuyableButton').style.display='none';
				}				
			} else {
				if(document.getElementById('addToCartAjaxButton')){
					document.getElementById('addToCartAjaxButton').style.display='none';
					document.getElementById('productQuantity_qv').style.display = 'none';
				} else if(document.getElementById('addToCartButton')){
					document.getElementById('addToCartButton').style.display='none';
				}
				if(document.getElementById('skuNotBuyableButton')){
					document.getElementById('skuNotBuyableButton').style.display='block';
				}
			}
	
			if(productActionList.showWishList){
				if(document.getElementById('addToWishListLinkAjax')){
					document.getElementById('addToWishListLinkAjax').style.display='block';
				} else if(document.getElementById('addToWishListLink')){
					document.getElementById('addToWishListLink').style.display='block';					
				}
			} else {
				if(document.getElementById('addToWishListLinkAjax')){
					dojo.style("addToWishListLinkAjaxDivContainer","display","none");
				} else if(document.getElementById('addToWishListLink')){
					dojo.style("addToWishListLinkContainer","display","none");
				}
			}
					
			if(productActionList.showProductCompare && document.getElementById('compare')){
				if(document.getElementById('addToCompareLink')){
					document.getElementById('addToCompareLink').style.display='block';
					dojo.style("addToCompareLinkContainer","display","block");
				}
			} else {
				if(document.getElementById('addToCompareLink')){
					dojo.style("addToCompareLinkContainer","display","none");
				}
			}		
			
			if(productActionList.showReplaceCartItem){
				if(document.getElementById('replaceCartItemAjax')){
					dojo.style("replaceCartItemAjaxContainer","display","block");
					document.getElementById('replaceCartItemAjax').style.display = 'block';
				} else if(document.getElementById('replaceCartItemNonAjax')){
					dojo.style("replaceCartItemNonAjaxContainer","display","block");
					document.getElementById('replaceCartItemNonAjax').style.display = 'block';
				}		

				//When showing the quick info pop-up for replace item flow
				//Don't show the requisition list links
				if(document.getElementById('addToNewRequisitionList')){
					dojo.style("addToNewRequisitionListContainer","display","none");

				}
				if(document.getElementById('addToExistingRequisitionList')){
					dojo.style("addToExistingRequisitionListContainer","display","none");

				}				
			} else {
				if(document.getElementById('replaceCartItemAjax')){
					dojo.style("replaceCartItemAjaxContainer","display","none");
				} else if(document.getElementById('replaceCartItemNonAjax')){
					dojo.style("replaceCartItemNonAjaxContainer","display","none");
				}		
			}		
			
			//Do not display the Quantity field if the product is not buyable
			if(!productActionList.showAddToCart && !productActionList.showWishList){
				if(document.getElementById('productPopUpQty')){
					document.getElementById('productPopUpQty').disabled = true;
				}
			} else {
				if(document.getElementById('productPopUpQty')){
					document.getElementById('productPopUpQty').disabled = false;
					
				}
			}
			//Set the quantity to Quantity field
			if(popUpQty == null)
			{
				if(document.getElementById('productPopUpQty')){
					document.getElementById('productPopUpQty').value = 1;
				}
			}else {
				if(document.getElementById('productPopUpQty')){
					document.getElementById('productPopUpQty').value = popUpQty;
				}
			}
		
			dijit.byId(container).closeButtonNode.style.display='none';
			closeAllDialogs(); // close all dijit.dialogs first
			dijit.byId(container).show();
			this.setDialogEscapeKey(container);
			
			// hides the DialogUnderlayWrapper component, the component that grays out the screen behind,
			// as we do not want the background to be greyed out
			dojo.query('.dijitDialogUnderlayWrapper', document).forEach(function(tag) {		
				tag.style.display='none';
			});		
			
			var parameters = {};
			parameters.storeId = CommonContextsJS.storeId;
			parameters.langId=CommonContextsJS.langId;
			parameters.catalogId=CommonContextsJS.catalogId;
			parameters.productId=productId;	
			parameters.containerId=container;
			
			displayOverView();
			
			dojo.publish("ajaxRequestInitiated");
			dojo.xhrPost({
					url: getAbsoluteURL() + "GetCatalogEntryDetailsByID",				
					handleAs: "json-comment-filtered",
					content: parameters,
					service: this,
					load: populatePopUp,
					error: function(errObj,ioArgs) {
						console.debug("CatalogEntryThumbnailDisplay.showPopup: Unexpected error occurred during an xhrPost request.");
						dojo.publish("ajaxRequestCompleted");
						hideOverView();
					}
				});
		}
	}

	/** 
	 * Displays the Product Add to Cart pop-up containing product information.
	**/
	function showAddToCartModal(){	

		/*TCS Toma total de carro en escritorio y lo agrega en carro responsivo*/	
		try{
			var TotalCarro=document.getElementById("CarroProdTotal").value;
			document.getElementById("CarroProdTotalMobile2").innerHTML = TotalCarro;
			
			//se quita estado checked a los incluidos
			var incluidos = dojo.query("span.incluido");

			for(var i = 0; i < incluidos.length; i++){
			  incluidos[i].innerHTML = "Incluir en el carro";
			}

			var containers = dojo.query(".incluido");

			for(var i = 0; i < containers.length; i++){
			  dojo.removeClass(containers[i], 'incluido');
			}
			
		}catch(e){}
		
		dijit.byId('add_to_cart_popup').closeButtonNode.style.display='none';
		closeAllDialogs(); // close all dijit.dialogs first
		if(dojo.byId('add_to_cart_popup')){
			dijit.byId('add_to_cart_popup').show();
			this.setDialogEscapeKey('add_to_cart_popup');
			displayOverView();
		}else{
			console.debug("ID: add_to_cart_popup, is missing.");
		}
		//1079- swatches start
		if(null!=document.getElementById("swatches_pdp")){
			var element = document.getElementById("swatches_pdp").children;
		for(var i=1;i<element.length; i++){
			if(i==1 && element[i].id=='color_btn'){
				element[i].className = "picked";
				swatchValue = element[i].children[0].children[0].title;
				categoryDisplayJS.setSelectedColor(swatchValue);
				categoryDisplayJS.setSelectedAttribute("Color",swatchValue);
				categoryDisplayJS.setSizeSwatchForColor(element[1].children[0].children[0].id.substring(12,34),"fromPDP");
			}else{
				if(element[i].id=='color_btn'){
					element[i].className = "";
				}
			}
			
			
			}
		}
		if(null!=document.getElementById("colorDiv")){
			if(null!=document.getElementById("swatches_pdp")){
				var element = document.getElementById("swatches_pdp").children;
			for(var i=0;i<element.length; i++){
				if(element[i].id=='color_btn'){
						element[i].className = "";
					}
				
				}
			}
			}
		
		
		if(null!=document.getElementById("size_swatches_pdp")){
			var element = document.getElementById("size_swatches_pdp").children;
		for(var i=1;i<element.length; i++){
			if(i==1 && element[i].id=='color_btn' && document.getElementById("colorDiv")!=null && document.getElementById("colorDiv") != undefined){
				element[i].className = "picked";
				swatchValue = element[i].children[0].children[0].title;
				categoryDisplayJS.setSelectedSize(swatchValue);
				categoryDisplayJS.setSelectedAttribute("Talla",swatchValue);
				categoryDisplayJS.setColorSwatchForSize(element[1].children[0].children[0].children[0].id.substring(7,29),"fromPDP");
			}
			else if(element[i].id=='color_btn'){
					element[i].className = "";
				}
			}
		}
		if(null!=document.getElementById("sizeDiv")){
			if(null!=document.getElementById("size_swatches_pdp")){
				var element = document.getElementById("size_swatches_pdp").children;
			for(var i=0;i<element.length; i++){
				if(element[i].id=='color_btn'){
						element[i].className = "";
					}
				
				}
			}
			}
		
		
		//1079- swatches end
	}
	
	function setDialogEscapeKey(container){
		dojo.connect(dojo.byId(container), 'onkeypress', function(evt) {
			key = evt.keyCode;
			if (key == dojo.keys.ESCAPE) {
				hideOverView();
				hidePopup(container);
			}
		});	
	}

	/** 
	 * Populates all the contents of the Product Quick Info pop-up with the JSON returned from the server.
	 * 
	 * @param {object} serviceRepsonse The JSON response from the service.
	 * @param {object} ioArgs The arguments from the service call.
	 */		
	function populatePopUp(serviceResponse, ioArgs) {
		
		responseJSON = serviceResponse;
		var defaultSwatchColor ="";//for swatches req#725
		// MHTN: Quick view addtocart logic change
		populateAddToCart(serviceResponse);
		
		document.getElementById('inventoryMsg_qv').innerHTML = "" ;
		categoryDisplayJS.setEntitledItemJsonObject(serviceResponse.productAttributes);

		var catEntryID = serviceResponse.catalogEntry.catalogEntryIdentifier.uniqueID, modalId = (ioArgs.args.content.containerId) && ioArgs.args.content.containerId;
		
		if(document.getElementById('star_rating_qv')){
			if((serviceResponse.catalogEntry.bazaarVoice_Stars != null) && (serviceResponse.catalogEntry.bazaarVoice_Stars != '')){
				document.getElementById('star_rating_qv').className = 'BazaarVoice_'+serviceResponse.catalogEntry.bazaarVoice_Stars;
				document.getElementById('star_rating_qv').style.display = 'inline-block';
			}else{
				document.getElementById('star_rating_qv').style.display = 'none';
			}
		}
		
		if((document.getElementById('productNumReviews')) && (document.getElementById('productNumReviews'))){
			if(serviceResponse.catalogEntry.bazaarVoice_Reviews > 0){
				document.getElementById('productReviewsContainer').style.display = 'inline-block';
				document.getElementById('productNumReviews').innerHTML = serviceResponse.catalogEntry.bazaarVoice_Reviews;	
				dojo.byId('write_review').innerHTML = dojo.byId('bazaarvoiceReviews').innerHTML;
				
			}else{
				document.getElementById('productReviewsContainer').style.display = 'none';
				dojo.byId('write_review').innerHTML = dojo.byId('bethefirst').innerHTML;		

			}
		}

		var isProductBean = false;
		var singleSKUProduct = false;
		var singleSKUProduct_catEntryId = "";
		if(serviceResponse.catalogEntry.catalogEntryTypeCode=='ProductBean') {
			isProductBean = true;
			if(dojo.byId("catalogEntryTypeCode")!=null && dojo.byId("catalogEntryTypeCode")!=undefined){
				dojo.byId("catalogEntryTypeCode").value="ProductBean";
			}
			if(serviceResponse.singleSKUProduct_catEntryId && serviceResponse.singleSKUProduct_catEntryId!='') {
				singleSKUProduct = true;
				singleSKUProduct_catEntryId = serviceResponse.singleSKUProduct_catEntryId;
			}
		}
		
		var isBundleBean = false;
		if(serviceResponse.catalogEntry.catalogEntryTypeCode=='BundleBean') {
			isBundleBean = true;
		}
		
		var isItemBean = false;
		if(serviceResponse.catalogEntry.catalogEntryTypeCode=='ItemBean') {
			isItemBean = true;
			
			if(document.getElementById('inventoryMsg_qv')){
				if(serviceResponse.catalogEntry.inventoryMsg != null 
				   && serviceResponse.catalogEntry.inventoryMsg != 'undefined'){
					//document.getElementById('inventoryMsg_qv').innerHTML =  serviceResponse.catalogEntry.inventoryMsg;
				}else{
					document.getElementById('inventoryMsg_qv').innerHTML = "";
				}
			}
			
			if(dojo.byId("catalogEntryTypeCode")!=null && dojo.byId("catalogEntryTypeCode")!=undefined){
				dojo.byId("catalogEntryTypeCode").value="ItemBean";
			}
		}
		
		var isPackageBean = false;
		if(serviceResponse.catalogEntry.catalogEntryTypeCode=='PackageBean') {
			isPackageBean = true;
		}
		
		var isDynamicKitBean = false;
		if(serviceResponse.catalogEntry.catalogEntryTypeCode=='DynamicKitBean') {
			isDynamicKitBean = true;
		}
		
		var showDynamicKit = false;
		if(serviceResponse.catalogEntry.showDynamicKit) {
			showDynamicKit = true;
		}
			
		var showAddToCart = false;
		var showConfigure = false;
		var hasComponents = false;
		var isBuyable = (serviceResponse.catalogEntry.buyable=='1');
		if(isDynamicKitBean && showDynamicKit){
			if(serviceResponse.catalogEntry.components.length>0){
				hasComponents = true;
			}
			showAddToCart = isBuyable && (serviceResponse.catalogEntry.components.length>0) && serviceResponse.catalogEntry.hasPriceForDK;
			showConfigure = isBuyable && serviceResponse.catalogEntry.isDKConfigurable;
		}
		
		document.getElementById('productIdQuickInfo').innerHTML = catEntryID;
		document.getElementById('productName').innerHTML = serviceResponse.catalogEntry.description[0].name;
		
		if((serviceResponse.catalogEntry.displayPromoText!=null) && (serviceResponse.catalogEntry.displayPromoText==true)){
			document.getElementById('quick_promotional_description').innerHTML = serviceResponse.catalogEntry.promoText;	
		}
		
		var baseImageUrl = "";
		if(dojo.byId('baseUrlImageDir') != null  && dojo.byId('baseUrlImageDir') != undefined){
			var baseImageUrl = dojo.byId('baseUrlImageDir').innerHTML;
		}
		
		if ( serviceResponse.catalogEntry.description[0].fullImage != serviceResponse.catalogEntry.objectPath){
			if(document.getElementById('productFullImage_quickInfo') != null  && document.getElementById('productFullImage_quickInfo') !=  undefined) {
				document.getElementById('productFullImage_quickInfo').src = serviceResponse.catalogEntry.description[0].fullImage;
			}
		}
		else{
			if(document.getElementById('productFullImage_quickInfo') != null  && document.getElementById('productFullImage_quickInfo') != undefined) {
				document.getElementById('productFullImage_quickInfo').src = baseImageUrl + "images/NoImageIcon.jpg";
			}
		}

		dojo.style(dojo.query('.quick_info_img_placeholder')[0], 'display', 'none');
		dojo.style(dojo.byId('productFullImage_quickInfo'),'display','block');
		/*START REQ 291: 3rd Price*/
		var elem = dojo.byId("productQuantity");
		if(elem)elem.style.marginTop="0px";
		/*END REQ 291: 3rd Price*/
		
        /*Brazil - display non-payment promotion price */
        if ( typeof(isBrazilStore) != 'undefined' && isBrazilStore ){
			if ( isProductBean ){//if its a 'product', get the first item  
				origProductID = serviceResponse.productAttributes[0].catentry_id;
			}
			else {
				//get 'productId' from parent node because the 'productId' parameter that was
				// passed in, has been increment by 1
				// for example, productId = catentry_id+1.  
				origProductID = nodeId.match(/\d+/)[0];
			}
			// check to see if there's an existing promotion within given node 
        	var brazilFeaturedNonPaymentPromotion =  dojo.byId('WC_RightSidebarESpotDisplay_'+origProductID+'_div_1_BrazilFeaturedNonPaymentPromotion'); 		
			if ( brazilFeaturedNonPaymentPromotion != null && (dojo.query('.discount_price', brazilFeaturedNonPaymentPromotion).length != 0)){
	            dojo.style(dojo.byId('productPrice'),"display","none");
	            var id = dojo.byId('WC_PromotionDiscountDisplay_'+origProductID+'_0');            
	            dojo.addClass(dojo.byId('WC_PromotionDiscountDisplay_'+origProductID+'_0'),'promo_desc');            
	        	dojo.byId('BrazilFeaturedNonPaymentPromotion').innerHTML = brazilFeaturedNonPaymentPromotion.innerHTML;
	        }else{
				if (serviceResponse.catalogEntry.offerPrice) {
					document.getElementById('productPrice').innerHTML = serviceResponse.catalogEntry.offerPrice;
		            dojo.style(dojo.byId('productPrice'),"display","inline");
				}
			}
		}//end of Brazil store Promotion display
        else{ //Madisons store..display offerPrice
        	if(isDynamicKitBean && !hasComponents){
        		document.getElementById('productPrice').innerHTML = serviceResponse.catalogEntry.pricePending;        		        		
        	}else{
    			var innerHTML = "";
    			if(serviceResponse.catalogEntry.isTarjetaMas){
    				var tmp = "";
    				/*START REQ 291: 3rd Price*/
    				if((serviceResponse.catalogEntry.listPriced) && parseFloat(serviceResponse.catalogEntry.listPriceAmount) > parseFloat(serviceResponse.catalogEntry.offerPriceAmount)){
    					tmp = "margin-bottom: 2px;";
    				}
    				/*END REQ 291: 3rd Price style='"+tmp+"'*/
    				innerHTML = "<span class='price-first'>" + serviceResponse.catalogEntry.tarjetaPrice + "</span>"+
    							"<span class='tarjeta_mas_img'></span>"+
    							"<div class='price-second precio_internet'>" + MessageHelper.messages['INTERNET_PRICE'] + serviceResponse.catalogEntry.offerPrice + "</div>";
    				/*START REQ 291: 3rd Price*/
    				if((serviceResponse.catalogEntry.listPriced) && parseFloat(serviceResponse.catalogEntry.listPriceAmount) > parseFloat(serviceResponse.catalogEntry.offerPriceAmount)){
        				innerHTML += "<div class='price-second precio_normal'>" + MessageHelper.messages['NORMAL_PRICE'] + serviceResponse.catalogEntry.listPrice + "</div>";
        				var elem = dojo.byId("productQuantity");
        				//if(elem)elem.style.marginTop="15px";
        				if(elem)elem.style.marginTop="5px";
        			}
    				/*END REQ 291: 3rd Price*/
    			}
    			else if((serviceResponse.catalogEntry.listPriced) && parseFloat(serviceResponse.catalogEntry.listPriceAmount) > parseFloat(serviceResponse.catalogEntry.offerPriceAmount)){
    				innerHTML = "<span class='price-first'>" + serviceResponse.catalogEntry.offerPrice + "</span>"+
    							"<div class='price-second precio_normal'>" + MessageHelper.messages['NORMAL_PRICE'] + serviceResponse.catalogEntry.listPrice + "</div>";
    			}
    			else{
    				innerHTML = "<span class='price-first'>" + serviceResponse.catalogEntry.offerPrice + "</span>";
    			}
    			document.getElementById('productPrice').innerHTML = innerHTML;
			}
		}
        
        /*Brazil - display featured installment option price */
        if ( typeof(isBrazilStore) != 'undefined' && isBrazilStore )
        {
            var catalogEntryFeaturedInstallmentPrice = dojo.byId('WC_CatalogEntryFeaturedInstallmentOption_'+origProductID+'_div');
            if ( catalogEntryFeaturedInstallmentPrice != null ){
                var featuredInstallmentPrice = catalogEntryFeaturedInstallmentPrice.innerHTML.replace(/^\s+|\s+$/g,"");//Remove leading and trailing blanks
                
                //display the installment option; i.e, 3x of $50.23
                if ( featuredInstallmentPrice.length != 0){
    				dojo.byId('BrazilCatalogEntryFeaturedInstallmentOption').innerHTML = catalogEntryFeaturedInstallmentPrice.innerHTML;
        	        dojo.style(dojo.byId('promoDetails'),"display","inline");

                }else{//no installment price, hide the span
                	dojo.style(dojo.byId('BrazilCatalogEntryFeaturedInstallmentOption'),"display","none");
            	}
    		}
        }//end of Brazil Store installments

		var descAttributesHTML = "";
		for (var i in serviceResponse.catalogEntryAttributes.attributes) {
			if (serviceResponse.catalogEntryAttributes.attributes[i].usage == "Descriptive" ) 
			{				
				descAttributesHTML = descAttributesHTML + serviceResponse.catalogEntryAttributes.attributes[i].name + ' : ';
				if (serviceResponse.catalogEntryAttributes.attributes[i].value != null )
				{
					descAttributesHTML = descAttributesHTML + serviceResponse.catalogEntryAttributes.attributes[i].value.value + '<br />';
				}
				else
				{
					descAttributesHTML = descAttributesHTML + '<br />';
				}			
			}
		}
		
		document.getElementById('productSKUValue').innerHTML = serviceResponse.catalogEntry.catalogEntryIdentifier.externalIdentifier.partNumber;
		document.getElementById('productMoreInfoLink').href = serviceResponse.catalogEntryURL;
		if(document.getElementById('write_review')){
			document.getElementById('write_review').href = serviceResponse.bazaarVoicePDPCommentURL;
		}
		
		/*Brazil - show the free shipping image */
		if ( typeof(isBrazilStore) != 'undefined' && isBrazilStore ){
        	var free_shipping_div = dojo.byId('free_shipping_promotion_div');
        	var brazilFeaturedShippingPromotionDiv  = dojo.byId('WC_RightSidebarESpotDisplay_'+origProductID+'_div_1_BrazilFeaturedShippingPromotion');

        	//get innerHtml to show Free Shipping
            if ( free_shipping_div != null && brazilFeaturedShippingPromotionDiv != null ){
            	free_shipping_div.innerHTML = brazilFeaturedShippingPromotionDiv.parentNode.innerHTML + '<br />';
            }
	 	}

		if(document.getElementById("selectedAttr_"+replaceOrderItemId) !=null) {
			var selectedAttributesString = document.getElementById("selectedAttr_"+replaceOrderItemId).value.replace(/'/g,"&#039;");
			var selectedAttributeArray = selectedAttributesString.split("|");
		}
		categoryDisplayJS.moreInfoUrl='ProductDisplay?storeId='+storeId+'&catalogId='+catalogId+'&langId='+langId+'&productId='+catEntryID;

		//save well known subscription attributes
		var fulfillmentFrequencyAttrName = "";
		var fulfillmentFrequency = "";
		var paymentFrequencyAttrName = "";
		var paymentFrequency = "";
		var timePeriodAttrName = "";
		var validTimePeriodValues = new Array();
		var timePeriodValuesCounter = 0;
		var sizecount=0;
		var colorcount=0;
		var count=0;
		for (var i in serviceResponse.catalogEntryAttributes.attributes) {
			count++;
			if (serviceResponse.catalogEntryAttributes.attributes[i].usage == "Defining") {
				if (serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == subsFulfillmentFrequencyAttrName) {
					fulfillmentFrequencyAttrName = serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;");
				} else if (serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == subsPaymentFrequencyAttrName) {
					paymentFrequencyAttrName = serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;");
				} else if (serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == subsTimePeriodAttrName) {
					timePeriodAttrName = serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;");
				}else if(serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Color' && serviceResponse.catalogEntryAttributes.attributes[i].allowedValue.length>0){ 
                    colorcount=count; 
                } else if(serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Talla' && serviceResponse.catalogEntryAttributes.attributes[i].allowedValue.length>0){ 
                        sizecount=count; 
                } 
			}
		}
		if (fulfillmentFrequencyAttrName != "" && paymentFrequencyAttrName != "") {
			for (var i in serviceResponse.productAttributes) {
				var catalogEntry = serviceResponse.productAttributes[i];
				var definingAttributes = catalogEntry.Attributes;
				for(attributeName in definingAttributes){
					var tempStr = attributeName.split("_");
					if (tempStr[0] == fulfillmentFrequencyAttrName) {
						fulfillmentFrequency = tempStr[1];
					} else if (tempStr[0] == paymentFrequencyAttrName) {
						paymentFrequency = tempStr[1];
					} else if (tempStr[0] == timePeriodAttrName) {
						validTimePeriodValues[timePeriodValuesCounter] = tempStr[1];
						timePeriodValuesCounter++;
					}
				}
			}
		}
		
		var attributesHTML = "";
		var allowedValues = {};
		var valueArray =[];// to store color atributes of a particular sku Req#725
		var valueSizeArray =[];
		var attributesNum = 0;//number of color attributes in a particular sku Req#725
		var tallaAttributesNum = 0;
		
		
		var primaryattr="";
		var bothcolorandsize="false";
		for (var index in serviceResponse.productAttributes) {
			
			for (var attr in serviceResponse.productAttributes[index].Attributes) {
				
				var parts = attr.split("_");
				var name = parts[0];
				var value = parts[1];
				//if attribute name is color save the value to value array and increase the attribute count Req#725 start
				if(name == 'Color'){
					if(valueArray.indexOf(parts[1])<=-1){
						valueArray[attributesNum]=parts[1];
					attributesNum+=1;
					}
				}
				if(name == 'Talla'){
					if(valueSizeArray.indexOf(parts[1])<=-1){
						valueSizeArray[tallaAttributesNum]=parts[1];
						tallaAttributesNum+=1;
					}
				}
				////for swatches req#725 end
				var allowed = allowedValues[name];
				if (allowed == null) {
					allowed = {};
					allowedValues[name]=allowed;
				}
				allowed[value]=1;
			}
		}
		var fromComparePageSingleSKU=false;
		if(serviceResponse.catalogEntry.catalogEntryTypeCode=='ProductBean'){
				if (serviceResponse.productAttributes[0].attributes) {
					fromComparePageSingleSKU=true;
				}
		}
		
		if(sizecount>0 && colorcount>0 ){
			bothcolorandsize="true";
			if(sizecount>colorcount ){
				primaryattr="Color";
			}else{
				primaryattr="Talla"
			}
		}
		var swatchdisplayed="false";
		if (isProductBean && !fromComparePageSingleSKU) {
			for (var i in serviceResponse.catalogEntryAttributes.attributes) {
				if (serviceResponse.catalogEntryAttributes.attributes[i].usage == "Defining") {
					if (serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == subsFulfillmentFrequencyAttrName) {
						categoryDisplayJS.setSelectedAttribute(fulfillmentFrequencyAttrName, fulfillmentFrequency);
						categoryDisplayJS.changePrice('entitledItem_'+catEntryID,true,false);
						updateMoreInfoUrl();
					} else if (serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == subsPaymentFrequencyAttrName) {
						categoryDisplayJS.setSelectedAttribute(paymentFrequencyAttrName, paymentFrequency);
						categoryDisplayJS.changePrice('entitledItem_'+catEntryID,true,false);
						updateMoreInfoUrl();
					} else {//Req#725 swatches start
						//changes for swatches to display color Req#725
						 var swatchCount=0;
						for (var val in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
							for (var valArr in valueArray){
								if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].value == valueArray[valArr]){
									if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].extendedValue) {
										for (var ext in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].extendedValue) {
											if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].extendedValue[ext].key == 'Image1' ) {
												swatchCount++;
											}
										}
									}
								}
							}
						}
						var swatchsizeCount=0;
						for (var val in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
							for (var valArr in valueSizeArray){
								if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].value == valueSizeArray[valArr]){
									if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].extendedValue) {
										for (var ext in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].extendedValue) {
											if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[val].extendedValue[ext].key == 'Image1' ) {
												swatchsizeCount++;
											}
										}
									}
								}
							}
						}
						//
						 if(serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Color' && attributesNum <=5 && valueArray.length == swatchCount &&(bothcolorandsize == 'false'||(bothcolorandsize == 'true' && primaryattr == 'Color'))  ){
							 swatchdisplayed ="Color";
							 if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue.length>0){
							 attributesHTML = attributesHTML + '<div class="item-attributes" style="margin-bottom: 30px;">';
								attributesHTML = attributesHTML +'<span class="oneSKUAttribute_Title">'+serviceResponse.catalogEntryAttributes.attributes[i].name+':</span><span id= "oneSKUAttribute_heading"></span>';
								attributesHTML = attributesHTML +  '<div id="swatches_pdp">';
								if(attributesNum>=1){
									var count=0;
									for (var j in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
										swatchImg="";
										for (var m in valueArray){
											if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == valueArray[m]){
												if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
													for (var k in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
														if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].key == 'Image1' ) {
															swatchImg =serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].value.trim();
														}
													}
												}
											}
										}
									var isValidValue = (allowedValues[serviceResponse.catalogEntryAttributes.attributes[i].name][serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value] == 1);
									if (isValidValue && swatchImg != "") {
										//req 1079-swatches
										if(count==0){
											defaultSwatchColor=serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value;
											categoryDisplayJS.setSelectedAttribute(serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;"),serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value);
											categoryDisplayJS.setSelectedColor(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
											attributesHTML = attributesHTML +'<div id="color_btn"  class="picked">';
											//Req-1079 Pending
											if(bothcolorandsize == 'false'){
											categoryDisplayJS.changePrice('entitledItem_'+catEntryID+'/',true,false);
											}
										}
										else{
											attributesHTML = attributesHTML +'<div id="color_btn" >';
										}
										//attributesHTML = attributesHTML +'<div id="color_btn" >';
										count++;
										attributesHTML = attributesHTML + '<div class="colorpick"> ';
										//831259 - Edited the width and height as 22px for swatches
										attributesHTML = attributesHTML +'<a href="JavaScript:categoryDisplayJS.setSelectedAttributeJS(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSwatchAttributeValueForQuickView(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\',\'swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false); categoryDisplayJS.setSelectedColor(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSizeSwatchForColor(\'entitledItem_'+catEntryID+'\',\'fromQuickView\');" id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="'+baseImageUrl.trim().concat(swatchImg).trim()+'" class="color_swatch_selected" style="width: 22px;height:22px"/></a>'
										attributesHTML = attributesHTML +  '</div></div>';    
									}														  
								}
								}
								attributesHTML = attributesHTML + '</div>';
								
								if(bothcolorandsize == 'true'){
									var attributeArray = [];
									var sizeArray = [];
									var catarray = [];
									for(var index = 0; index <= serviceResponse.productAttributes.length; index++){
										if(serviceResponse.productAttributes[index] && serviceResponse.productAttributes[index].Attributes){
											for(entitledItem in serviceResponse.productAttributes[index].Attributes){
												var objAttr = dojo.trim(entitledItem);
												if(objAttr != ""){
													if(objAttr == 'Color_'+dojo.trim(categoryDisplayJS.selectedColor.replace(/&nbsp;/g," ")))
													{
														attributeArray.push(serviceResponse.productAttributes[index].Attributes);
													}
												}				
											}
											
										}
									}
									for(var index = 0; index <= attributeArray.length; index++){
										for(entitledItem in attributeArray[index]){
											var objAttr = dojo.trim(entitledItem);
											if(objAttr != "" && objAttr.startsWith('Talla')){
												sizeArray.push(objAttr.substring(6,objAttr.length));
											}				
										}
										
								}
									if(sizeArray.length!=0 && sizeArray.length<6){
										//modified for swatches 1022 req 
										var sizeSwatchCount=0;
										for (var a in serviceResponse.catalogEntryAttributes.attributes) {
											if (serviceResponse.catalogEntryAttributes.attributes[a].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[a].attributeIdentifier.externalIdentifier.identifier == 'Talla') {
												for (var val in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue) {
													for (var valArr in sizeArray){
														if(serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].value == sizeArray[valArr] ){
															if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
																for (var ext in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
																	if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue[ext].key == 'Image1' ) {
																		sizeSwatchCount++;
																	}
																}
															}
														}
													}
												}
											}
										}
										if(sizeArray.length == sizeSwatchCount ){
											for (var i in serviceResponse.catalogEntryAttributes.attributes) {
												if (serviceResponse.catalogEntryAttributes.attributes[i].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Talla') {
													attributesHTML = attributesHTML+'<div id="sizeDiv"><span class="oneSKUAttribute_Title">'+serviceResponse.catalogEntryAttributes.attributes[i].name+': </span><span id= "oneSKUAttribute_headingForSize"></span>';
													attributesHTML = attributesHTML +  '<div id="size_swatches_pdp">';
													var count=0;
													for (var j in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
														swatchImg="";
														for (var m in sizeArray){
															if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == sizeArray[m]){
																if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
																	for (var k in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
																		if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].key == 'Image1' ) {
																			swatchImg =serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].value.trim();
																		}
																	}
																}
															}
														}
														
													if (swatchImg != "") {
														//Req-1079 Pending
														if(count==0){
																categoryDisplayJS.setSelectedSizeForQuickView(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
																categoryDisplayJS.changePrice('entitledItem_'+catEntryID+'/',true,false);
														}
														
														//Req-1079 Pending 
														if (sizeArray.length==1){
															categoryDisplayJS.setSelectedSize(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
															categoryDisplayJS.setSelectedAttribute('Talla',serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
															attributesHTML = attributesHTML +'<div id="color_btn" class="picked" >';
															
														}
														else{
															attributesHTML = attributesHTML +'<div id="color_btn">';
														}
														//attributesHTML = attributesHTML +'<div id="color_btn" >';
														count++;
														attributesHTML = attributesHTML + '<div class="colorpick"> ';
														attributesHTML = attributesHTML +'<a href="JavaScript:categoryDisplayJS.setSelectedAttribute(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSizeCheckedValue(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);" id="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="/wcsstore/CencosudStorefrontAssetStore///'+swatchImg.trim()+'" class="color_swatch_selected" /></a>'
														attributesHTML = attributesHTML +  '</div></div>';   																								 																																																
													}	
													}attributesHTML = attributesHTML + '</div></div>';
												}
												
												}
											/*if(null != document.getElementById("productQuantity")){
												document.getElementById("productQuantity").style.marginTop="-36px"; 
											}*/
											}else{

												if(sizeArray.length>1){
													if(null != document.getElementById("productQuantity")){
														document.getElementById("productQuantity").style.marginTop="10px"; 
													}
													attributesHTML=attributesHTML+'<div id="sizeDiv"><span class="required-field"> *</span><span class="attr_text">Talla: </span><div class="styled_select" id="PDPAttributeSelect">';
													//req 1079-swatches
													attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("Talla",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);>'
													attributesHTML=attributesHTML+' <option value="">Selecciona...</option>';
													for(var i=0; i<sizeArray.length; i++){
//Req-1079 Pending
														if(i==0){
															if(count==0){
																categoryDisplayJS.setSelectedSizeForQuickView(sizeArray[i].replace(/ /g,"&nbsp;"));
																categoryDisplayJS.changePrice('entitledItem_'+catEntryID+'/',true,false);
														}
														}
														attributesHTML=attributesHTML+'<option value="'+sizeArray[i]+'"';
														if(categoryDisplayJS.selectedSize==sizeArray[i]){
															attributesHTML=attributesHTML+'selected="selected"';
														}
														attributesHTML=attributesHTML+'>'+sizeArray[i]+'</option>';
													}
													attributesHTML=attributesHTML+'</select></div>';	
												}else{
													categoryDisplayJS.setSelectedSize(sizeArray[0]);
													categoryDisplayJS.setSelectedAttribute('Talla',categoryDisplayJS.selectedSize);
													attributesHTML =attributesHTML+'<span class="oneSKUAttribute_Title">Talla: </span><span id= "oneSKUAttribute_headingForSize"> '+sizeArray[0]+'</span>';
												}
												
											
											}
									
										
										
									}else{
										if(null != document.getElementById("productQuantity")){
											document.getElementById("productQuantity").style.marginTop="10px"; 
										}
										attributesHTML=attributesHTML+'<div id="sizeDiv"><div class="attribute_list"><span class="required-field"> *</span><span class="attr_text">Talla:</span><div class="styled_select" id="PDPAttributeSelect">';
										//req 1079-swatches
										attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("Talla",this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);>'
										attributesHTML=attributesHTML+' <option value="">Selecciona...</option>';
										for(var i=0; i<sizeArray.length; i++){
											attributesHTML=attributesHTML+'<option value="'+sizeArray[i]+'"';
											if(categoryDisplayJS.selectedSize==sizeArray[i]){
												attributesHTML=attributesHTML+'selected="selected"';
											}
											attributesHTML=attributesHTML+'>'+sizeArray[i]+'</option>';
										}
										attributesHTML=attributesHTML+'</select></div></div>';	
									}
								}
								attributesHTML = attributesHTML + '</div>';
						 }
								//changes for swatches to display sizes Req#725
						 } else if(serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Talla' && tallaAttributesNum <=5 && valueSizeArray.length == swatchsizeCount && (bothcolorandsize == 'false'||(bothcolorandsize == 'true' && primaryattr == 'Talla')) ){
							 if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue.length>0){
							 swatchdisplayed ="Talla";
							//modified for swatches 1022 req start
							 attributesHTML = attributesHTML + '<div class="item-attributes" style="margin-bottom: 30px;">';
								attributesHTML = attributesHTML +'<span class="oneSKUAttribute_Title">'+serviceResponse.catalogEntryAttributes.attributes[i].name+':</span><span id= "oneSKUAttribute_headingForSize"></span>';
								attributesHTML = attributesHTML +  '<div id="size_swatches_pdp">';
								if(tallaAttributesNum>=1){
									var count=0;
									for (var j in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
										swatchImg="";
										for (var m in valueSizeArray){
											if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == valueSizeArray[m]){
												if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
													for (var k in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
														if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].key == 'Image1' ) {
															swatchImg =serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].value.trim();
														}
													}
												}
											}
										}
									var isValidValue = (allowedValues[serviceResponse.catalogEntryAttributes.attributes[i].name][serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value] == 1);
									if (isValidValue && swatchImg != "") {
										// req-1079 - pending
										if(count==0){
												if(bothcolorandsize == 'true'){
												categoryDisplayJS.setSelectedSize(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
												categoryDisplayJS.setSelectedAttribute('Talla',serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
												attributesHTML = attributesHTML +'<div id="color_btn" class="picked">';
												}else{
													attributesHTML = attributesHTML +'<div id="color_btn" >';
												}
											}else{
												attributesHTML = attributesHTML +'<div id="color_btn" >';
											 }
										//attributesHTML = attributesHTML +'<div id="color_btn" >';
										count++;
										attributesHTML = attributesHTML + '<div class="colorpick"> ';
										attributesHTML = attributesHTML +'<a href="JavaScript:categoryDisplayJS.setSelectedAttributeJS(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSizeCheckedValueForQuickView(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false); categoryDisplayJS.setSelectedSize(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setColorSwatchForSize(\'entitledItem_'+catEntryID+'\',\'fromQuickView\');" id="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="'+baseImageUrl.trim().concat(swatchImg).trim()+'" class="color_swatch_selected" style="width: 22px;height:22px"/></a>'
										attributesHTML = attributesHTML +  '</div></div>';    
									}														  
								}
								}
								attributesHTML = attributesHTML + '</div>';
								//modified for swatches 1022 req end
							 if(bothcolorandsize == 'true'){
									var attributeArray = [];
									var colorArray = [];
									var catarray = [];
									for(var index = 0; index <= serviceResponse.productAttributes.length; index++){
										if(serviceResponse.productAttributes[index] && serviceResponse.productAttributes[index].Attributes){
											for(entitledItem in serviceResponse.productAttributes[index].Attributes){
												var objAttr = dojo.trim(entitledItem);
												if(objAttr != ""){
													if(objAttr == 'Talla_'+dojo.trim(categoryDisplayJS.selectedSize.replace(/&nbsp;/g," ")))
													{
														attributeArray.push(serviceResponse.productAttributes[index].Attributes);
													}
												}				
											}
											
										}
									}
									for(var index = 0; index <= attributeArray.length; index++){
										for(entitledItem in attributeArray[index]){
											var objAttr = dojo.trim(entitledItem);
											if(objAttr != "" && objAttr.startsWith('Color')){
												colorArray.push(objAttr.substring(6,objAttr.length));
											}				
										}
										
								}
									if(colorArray.length!=0 && colorArray.length<6){
										var colorSwatchCount=0;
										for (var a in serviceResponse.catalogEntryAttributes.attributes) {
											if (serviceResponse.catalogEntryAttributes.attributes[a].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[a].attributeIdentifier.externalIdentifier.identifier == 'Color') {
												for (var val in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue) {
													for (var valArr in colorArray){
														if(serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].value == colorArray[valArr] ){
															if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
																for (var ext in serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue) {
																	if (serviceResponse.catalogEntryAttributes.attributes[a].allowedValue[val].extendedValue[ext].key == 'Image1' ) {
																		colorSwatchCount++;
																	}
																}
															}
														}
													}
												}
											}
										}
										if(colorArray.length == colorSwatchCount ){
											for (var i in serviceResponse.catalogEntryAttributes.attributes) {
												if (serviceResponse.catalogEntryAttributes.attributes[i].usage == "Defining" && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == 'Color') {
													attributesHTML = attributesHTML+'<div id="colorDiv"><span class="oneSKUAttribute_Title">'+serviceResponse.catalogEntryAttributes.attributes[i].name+': </span><span id= "oneSKUAttribute_heading"></span>';
													attributesHTML = attributesHTML +  '<div id="swatches_pdp">';
													var count=0;
													for (var j in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
														swatchImg="";
														for (var m in colorArray){
															if(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == colorArray[m]){
																if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
																	for (var k in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
																		if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].key == 'Image1' ) {
																			swatchImg =serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].value.trim();
																		}
																	}
																}
															}
														}
														
													if (swatchImg != "") {
														/* Req-1079 Pending */
														if(count==0){
															defaultSwatchColor=serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value;
															categoryDisplayJS.setSelectedAttribute(serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;"),serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value);
															categoryDisplayJS.setSelectedColor(serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;"));
															attributesHTML = attributesHTML +'<div id="color_btn"  class="picked">';
															//Req-1079 Pending
															categoryDisplayJS.changePrice('entitledItem_'+catEntryID+'/',true,false);
														}
														else{
															attributesHTML = attributesHTML +'<div id="color_btn" >';
														}
														count++;
														attributesHTML = attributesHTML + '<div class="colorpick"> ';
														//attributesHTML = attributesHTML +'<a href="JavaScript:categoryDisplayJS.setSKUImageId("productMainImage");categoryDisplayJS.setSelectedAttribute(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSwatchAttributeValue(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'\',\'swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSelectedColor(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSizeSwatchForColor(\'entitledItem_'+catEntryID+'\',\'fromQuickView\')categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);" id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="/wcsstore/CencosudStorefrontAssetStore///'+swatchImg.trim()+'" class="color_swatch_selected" /></a>'
														
														  attributesHTML = attributesHTML +'<a href=JavaScript:categoryDisplayJS.setSKUImageId("productMainImage");categoryDisplayJS.setSelectedAttribute(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSwatchAttributeValue(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\',\'swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSelectedColor(\''+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false); id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value+'" src="/wcsstore/CencosudStorefrontAssetStore///'+swatchImg.trim()+'" class="color_swatch_selected" /></a>'
														  attributesHTML = attributesHTML +  '</div></div>';   																								 																																																
													}	
													}attributesHTML = attributesHTML + '</div></div>';
												}
												
												}
											/*if(null != document.getElementById("productQuantity")){
												document.getElementById("productQuantity").style.marginTop="-36px"; 
											}*/
											}else{

												if(colorArray.length>1){
													if(null != document.getElementById("productQuantity")){
														document.getElementById("productQuantity").style.marginTop="10px"; 
													}
													attributesHTML=attributesHTML+'<div id="colorDiv"><span class="required-field"> *</span><span class="attr_text">Color: </span><div class="styled_select" id="PDPAttributeSelect">';
													attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS('+(serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'")+',this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);>'
													attributesHTML=attributesHTML+' <option value="">Selecciona...</option>';
													for(var i=0; i<colorArray.length; i++){
														attributesHTML=attributesHTML+'<option value="'+colorArray[i]+'"';
														if(categoryDisplayJS.selectedColor==colorArray[i]){
															attributesHTML=attributesHTML+'selected="selected"';
														}
														attributesHTML=attributesHTML+'>'+colorArray[i]+'</option>';
													}
													attributesHTML=attributesHTML+'</select></div>';	
												}else{
													categoryDisplayJS.setSelectedColor(colorArray[0]);
													categoryDisplayJS.setSelectedAttribute('Color',categoryDisplayJS.selectedColor);
													attributesHTML = attributesHTML+ '<span class="oneSKUAttribute_Title">Color: </span><span id= "oneSKUAttribute_heading">'+colorArray[0]+'</span>';
												}
												
											
											}
									
									}else{
										if(null != document.getElementById("productQuantity")){
											document.getElementById("productQuantity").style.marginTop="10px"; 
										}
										attributesHTML=attributesHTML+'<div id="colorDiv"><div class="attribute_list"><span class="required-field"> *</span><span class="attr_text">Color:</span><div class="styled_select" id="PDPAttributeSelect">';
										attributesHTML=attributesHTML+'<select name="attrValue" class="drop_down_attr"  onChange=JavaScript:categoryDisplayJS.setSelectedAttributeJS("Color",this.options[this.selectedIndex].value);categoryDisplayJS.selectedColor(this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);>'
										attributesHTML=attributesHTML+' <option value="">Selecciona...</option>';
										for(var i=0; i<colorArray.length; i++){
											attributesHTML=attributesHTML+'<option value="'+colorArray[i]+'"';
											if(categoryDisplayJS.selectedColor==colorArray[i]){
												attributesHTML=attributesHTML+'selected="selected"';
											}
											attributesHTML=attributesHTML+'>'+colorArray[i]+'</option>';
										}
										attributesHTML=attributesHTML+'</select></div></div>';	
									}
								}
								attributesHTML = attributesHTML + '</div>';
							 }
						 }//Req#725 swatches end
						 else if((serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier!= 'Color' && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier != 'Talla' )|| (bothcolorandsize != 'true') || (swatchdisplayed!= primaryattr)){
							 attributesHTML = attributesHTML +'<div id="'+serviceResponse.catalogEntryAttributes.attributes[i].name+'">'
							 attributesHTML = attributesHTML + '<label for="attrValue_'+ i + '" class="nodisplay">'+serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;")+document.getElementById('requiredFieldText').innerHTML+'</label><span class="required-field">* </span><span>' + serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;") + ' : </span>';
								attributesHTML = attributesHTML + '<div class="styled_select"  ><select name="attrValue" class="drop_down" id="attrValue_' + i + '" onChange="JavaScript:categoryDisplayJS.setSelectedAttributeJS(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',this.options[this.selectedIndex].value);categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);updateMoreInfoUrl();';
								if(serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == primaryattr){
									attributesHTML = attributesHTML + 'categoryDisplayJS.setAttrForCurrentAttr(\'' + (serviceResponse.catalogEntryAttributes.attributes[i].name).replace("'","\\'") + '\',this.options[this.selectedIndex].value,\'entitledItem_'+catEntryID+'\',\'fromQuickView\');';
								}
								attributesHTML = attributesHTML + '">';
								attributesHTML = attributesHTML + '<option value="">'+document.getElementById("selectText").innerHTML+'</option>';
								for (var j in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue) {
									var displayValue = serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value;
									var selectedAttributeCounter = "";
									if(document.getElementById("selectedAttr_"+replaceOrderItemId) !=null) {
										for (var k=0; k<selectedAttributeArray.length; k++) {
											if (serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;") == selectedAttributeArray[k]) {
												selectedAttributeCounter = k+1;
												break;
											}
										}
									}
										
									if (serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier != null && serviceResponse.catalogEntryAttributes.attributes[i].attributeIdentifier.externalIdentifier.identifier == subsTimePeriodAttrName) {
										var isValidValue = false;
										for (var m=0; m<validTimePeriodValues.length; m++) {
											if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == validTimePeriodValues[m]) {
												isValidValue = true;
												break;
											}
										}
											
										var unitOfMeasureKey = "attribute_UOM_";
										if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
											for (var k in serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue) {
												if (serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].key == 'UnitOfMeasure') {
													unitOfMeasureKey = unitOfMeasureKey + serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].extendedValue[k].value;
												}
											}
										}
										displayValue = document.getElementById(unitOfMeasureKey).innerHTML.replace("{0}",displayValue);
											
										if (isValidValue) {
											if(document.getElementById("selectedAttr_"+replaceOrderItemId) !=null && serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == selectedAttributeArray[selectedAttributeCounter]){
												var selected = 'selected';
												categoryDisplayJS.setSelectedAttribute(serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;"),selectedAttributeArray[selectedAttributeCounter]);
												categoryDisplayJS.changePrice('entitledItem_'+catEntryID,true,false);
												updateMoreInfoUrl();
												attributesHTML = attributesHTML + '<option value="' + serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace('"','inches') +'"selected='+selected+'>' + displayValue + '</option>';
											} else {
												attributesHTML = attributesHTML + '<option value="' + serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace('"','inches') +'">' + displayValue + '</option>';	
											}
										}
									} else {
										//regression issue -quick info view not working for certain categories
										//var isValidValue = (allowedValues[serviceResponse.catalogEntryAttributes.attributes[i].name][serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value] == 1);
										var isValidValue = false;
										if(allowedValues[serviceResponse.catalogEntryAttributes.attributes[i].name] !=undefined){
											 isValidValue = (allowedValues[serviceResponse.catalogEntryAttributes.attributes[i].name][serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value] == 1);
										}
										//regression issue -quick info view not working for certain categories
										if (isValidValue) {
											if(document.getElementById("selectedAttr_"+replaceOrderItemId) !=null && serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value == selectedAttributeArray[selectedAttributeCounter]){
												var selected = 'selected';
												categoryDisplayJS.setSelectedAttribute(serviceResponse.catalogEntryAttributes.attributes[i].name.replace(/'/g,"&#039;"),selectedAttributeArray[selectedAttributeCounter]);
												categoryDisplayJS.changePrice('entitledItem_'+catEntryID,true,false);
												updateMoreInfoUrl();
												attributesHTML = attributesHTML + '<option value="' + serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace('"','inches') +'"selected='+selected+'>' + displayValue + '</option>';
											} else{
												attributesHTML = attributesHTML + '<option value="' + serviceResponse.catalogEntryAttributes.attributes[i].allowedValue[j].value.replace('"','inches') +'">' + displayValue + '</option>';	
											}
										}
									}
								}
								attributesHTML = attributesHTML + '</select></div></div>'; 
						 }
						
					}
				}
			}
		} else if (isItemBean || fromComparePageSingleSKU) {
			var color="";
			var size="";
			for(var i in serviceResponse.productAttributes[0].attributes ){
				if(serviceResponse.productAttributes[0].attributes[i].attrname=='Color'){
					color=serviceResponse.productAttributes[0].attributes[i].attrvalue;
				}
				if(serviceResponse.productAttributes[0].attributes[i].attrname=='Talla'){
					size=serviceResponse.productAttributes[0].attributes[i].attrvalue;
				}
			}
			for (var attr in serviceResponse.catalogEntryAttributes.attributes) { 
			 if (serviceResponse.catalogEntryAttributes.attributes[attr].usage == "Defining") {
				if(serviceResponse.catalogEntryAttributes.attributes[attr].attributeIdentifier.externalIdentifier.identifier == 'Color' && color!=""){
					if(null != document.getElementById("productQuantity")){
						document.getElementById("productQuantity").style.marginTop="80px"; 
					}
					attributesHTML = attributesHTML + serviceResponse.catalogEntryAttributes.attributes[attr].name + ' : ' + color + '<br />';
					for (var val in serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue) {

							if(serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].value == color){

								if (serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue) {

									for (var ext in serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue) {

										if (serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue[ext].key == 'Image1' ) {

											swatchImg =serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue[ext].value.trim();
											 attributesHTML = attributesHTML + '<div class="item-attributes">';
												attributesHTML = attributesHTML +  '<div id="swatches_pdp" style="padding: 0px 0 10px 6px;">';
												categoryDisplayJS.setSelectedAttribute(serviceResponse.catalogEntryAttributes.attributes[attr].name.replace(/'/g,"&#039;"),color);
												attributesHTML = attributesHTML +'<div id="color_btn"  class="picked">';
												attributesHTML = attributesHTML + '<div class="colorpick"> ';
												attributesHTML = attributesHTML +'<a href="JavaScript:categoryDisplayJS.setSelectedAttributeJS(\'' + (serviceResponse.catalogEntryAttributes.attributes[attr].name).replace("'","\\'") + '\',\''+color.replace(/ /g,"&nbsp;")+'\');updateMoreInfoUrl();categoryDisplayJS.setSwatchAttributeValueForQuickView(\''+serviceResponse.catalogEntryAttributes.attributes[attr].name+'\',\'swatch_link_entitledItem_'+catEntryID+'_'+color.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);" id="swatch_link_entitledItem_'+catEntryID+'_'+color+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+color+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[attr].name+'" src="'+baseImageUrl.trim().concat(swatchImg).trim()+'" class="color_swatch_selected" style="width: 22px;height:22px"/></a>'
												attributesHTML = attributesHTML +  '</div></div>';    
												attributesHTML = attributesHTML + '</div></div>';
											}
									}
								}
							}
					}
				}else if (serviceResponse.catalogEntryAttributes.attributes[attr].attributeIdentifier.externalIdentifier.identifier == 'Talla' && size!=""){
					if(null != document.getElementById("productQuantity")){
						document.getElementById("productQuantity").style.marginTop="80px"; 
					}
					//modified for swatches 1022 req 
					attributesHTML = attributesHTML + serviceResponse.catalogEntryAttributes.attributes[attr].name + ' : ' + size + '<br />';
					for (var val in serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue) {

							if(serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].value == size){

								if (serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue) {

									for (var ext in serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue) {

										if (serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue[ext].key == 'Image1' ) {

											swatchImg =serviceResponse.catalogEntryAttributes.attributes[attr].allowedValue[val].extendedValue[ext].value.trim();
											 attributesHTML = attributesHTML + '<div class="item-attributes">';
												attributesHTML = attributesHTML +  '<div id="size_swatches_pdp" style="padding: 0px 0 10px 6px;">';
												categoryDisplayJS.setSelectedAttribute(serviceResponse.catalogEntryAttributes.attributes[attr].name.replace(/'/g,"&#039;"),size);
												attributesHTML = attributesHTML +'<div id="color_btn"  class="picked">';
												attributesHTML = attributesHTML + '<div class="colorpick"> ';
												attributesHTML = attributesHTML +'<a href="JavaScript:categoryDisplayJS.setSelectedAttributeJS(\'' + (serviceResponse.catalogEntryAttributes.attributes[attr].name).replace("'","\\'") + '\',\''+size.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.setSizeCheckedValueForQuickView(\''+size.replace(/ /g,"&nbsp;")+'\');categoryDisplayJS.changePrice(\'entitledItem_'+catEntryID+'\',true,false);" id="'+size+'"><img id="swatch_link_entitledItem_'+catEntryID+'_'+size+'" alt="'+serviceResponse.catalogEntryAttributes.attributes[attr].name+'" src="'+baseImageUrl.trim().concat(swatchImg).trim()+'" class="color_swatch_selected" style="width: 22px;height:22px"/></a>'
												attributesHTML = attributesHTML +  '</div></div>';    
												attributesHTML = attributesHTML + '</div></div>';
											}
									}
								}
							}
					}
				}
				else{
					for(var othr in serviceResponse.productAttributes[0].attributes ){
						if(serviceResponse.productAttributes[0].attributes[othr].attrname== serviceResponse.catalogEntryAttributes.attributes[attr].name){
							attributesHTML = attributesHTML + serviceResponse.catalogEntryAttributes.attributes[attr].name + ' : ' + serviceResponse.productAttributes[0].attributes[othr].attrvalue + '<br />';
						}
						
					}
				}
			 }
			}
		}  
		
		if (attributesHTML != '') {
			attributesHTML = attributesHTML + '<br />';
		}
		if (isProductBean) {
			if(dojo.isIE) {
				var container = document.getElementById('productAttributes');
				if (container.hasChildNodes()) {
					container.removeChild(container.firstChild);
				}
				var newDiv = document.createElement("div");
				newDiv.innerHTML = attributesHTML;				
				container.appendChild(newDiv);
			} else {
				document.getElementById('productAttributes').innerHTML = attributesHTML;
			}
			//req#725 changes for swatches start 
			for(var c in serviceResponse.catalogEntryAttributes.attributes) {
				if(serviceResponse.catalogEntryAttributes.attributes[c].name == 'Color'  && defaultSwatchColor !="" ){
					 categoryDisplayJS.setSwatchAttributeValue(defaultSwatchColor);
					 defaultSwatchColor ="";
				 }
			}
			//req#725 changes for swatches end 
		}
		
		if(isItemBean) {
			document.getElementById('itemAttributes').innerHTML = attributesHTML;
		}
		
		dojo.query("select.drop_down").connect("onchange", function(){
			this.blur();
		})
		
		
		if(isBundleBean){
			if(document.getElementById('productPopUpQty')){
				document.getElementById('productPopUpQty').disabled = true;
			}
			document.getElementById('productActions').style.display = 'none';
			document.getElementById('moreinfo').style.display = 'block';
		}
		else{
			document.getElementById('productActions').style.display = 'block';
			document.getElementById('moreinfo').style.display = 'none';
			
			categoryDisplayJS.setCurrentCatalogEntryId(catEntryID);
			if (isProductBean && singleSKUProduct) {
				categoryDisplayJS.setCurrentCatalogEntryId(singleSKUProduct_catEntryId);
			}
			
			if(isDynamicKitBean){
				if(hasComponents){
					if(document.getElementById('productSpecification')){
						document.getElementById('productSpecification').style.display='block';
						var componentsHTML ='';
						for(var k in serviceResponse.catalogEntry.components){
							componentsHTML = componentsHTML + '<li>'+serviceResponse.catalogEntry.components[k];
						}					
						document.getElementById('productSpec').innerHTML = componentsHTML;
					}
				}else{
					if(document.getElementById('productSpecification')){
						document.getElementById('productSpecification').style.display='none';
					}
				}
			}else{
				if(document.getElementById('productSpecification')){
					document.getElementById('productSpecification').style.display='none';
				}
			}
			
			//Populate the links for adding items/products/packages to requisition list
			if(isProductBean){
				if(document.getElementById('addToNewRequisitionList')){
					if (singleSKUProduct) {
						categoryDisplayJS.setCurrentPageType("item");
						document.getElementById('addToNewRequisitionListContainer').style.display='block';
						document.getElementById('addToExistingRequisitionListContainer').style.display='block';
						document.getElementById('addToNewRequisitionList').href = "javascript:categoryDisplayJS.addItemToNewListFromProductDetail('" + singleSKUProduct_catEntryId + "', 'productPopUpQty', document.location.href);";
						document.getElementById('addToExistingRequisitionList').href = "javascript:RequisitionList.showReqListPopup('productPopUpQty');";
					} else {
						categoryDisplayJS.setCurrentPageType("product");
						document.getElementById('addToNewRequisitionListContainer').style.display='block';
						document.getElementById('addToExistingRequisitionListContainer').style.display='block';
						document.getElementById('addToNewRequisitionList').href = "javascript:categoryDisplayJS.addToNewListFromProductDetail('entitledItem_"+catEntryID+"', 'productPopUpQty', document.location.href);";
						document.getElementById('addToExistingRequisitionList').href = "javascript:RequisitionList.showReqListPopupForItem('entitledItem_"+catEntryID+"', 'productPopUpQty');";
					}
				}				
			} else if(isItemBean || isPackageBean || isDynamicKitBean){
				if(document.getElementById('addToNewRequisitionList')){
					if(isItemBean){
						categoryDisplayJS.setCurrentPageType("item");
					} else if(isPackageBean){
						categoryDisplayJS.setCurrentPageType("package");
					} else{
						categoryDisplayJS.setCurrentPageType("dynamicKit");
					}
					if(isDynamicKitBean && !showAddToCart){
						document.getElementById('addToNewRequisitionListContainer').style.display='none';
						document.getElementById('addToExistingRequisitionListContainer').style.display='none';
					}else{
						document.getElementById('addToNewRequisitionListContainer').style.display='block';
						document.getElementById('addToExistingRequisitionListContainer').style.display='block';
						document.getElementById('addToNewRequisitionList').href = "javascript:categoryDisplayJS.addItemToNewListFromProductDetail('" + catEntryID + "', 'productPopUpQty', document.location.href);";
						document.getElementById('addToExistingRequisitionList').href = "javascript:RequisitionList.showReqListPopup('productPopUpQty');";
					}
				}		
			}
		}
		
		if(isDynamicKitBean){
			if(showConfigure){
				document.getElementById('configureButton').style.display='block';
				document.getElementById('configure').href="JavaScript:categoryDisplayJS.ConfigureDynamicKit('"+catEntryID+"',document.getElementById('productPopUpQty').value);";
			}else{
				document.getElementById('configureButton').style.display='none';
			}
		}else{
			document.getElementById('configureButton').style.display='none';
		}
		
		// Setup addToCart button
		if(isBundleBean){
			// Disable add to cart for Bundles in all cases
			if(document.getElementById('addToCartAjaxButton')){
				document.getElementById('addToCartAjaxButton').style.display='none';
			} else if(document.getElementById('addToCartButton')){
				document.getElementById('addToCartButton').style.display='none';
			}
		} else if(isDynamicKitBean && !showAddToCart){
			if(document.getElementById('addToCartAjaxButton')){
				document.getElementById('addToCartAjaxButton').style.display='none';
			} else if(document.getElementById('addToCartButton')){
				document.getElementById('addToCartButton').style.display='none';
			}
		} else {
			var addtoCart;
			if(document.getElementById('addToCartLinkAjax')){
				if(isProductBean) {
					if (singleSKUProduct) {
						addtoCart = document.getElementById('addToCartLinkAjax');
						addtoCart.href = "JavaScript:categoryDisplayJS.AddItem2ShopCartAjax('"+singleSKUProduct_catEntryId+"',document.getElementById('productPopUpQty').value); hidePopup('second_level_category_popup');";
					} else {
						addtoCart = document.getElementById('addToCartLinkAjax');	
						addtoCart.href = "JavaScript:categoryDisplayJS.Add2ShopCartAjax('entitledItem_"+catEntryID+"',document.getElementById('productPopUpQty').value, true);";
					}
				}else if(isDynamicKitBean) {
					addtoCart = document.getElementById('addToCartLinkAjax');
					addtoCart.href = "JavaScript:categoryDisplayJS.AddItem2ShopCartAjax('"+catEntryID+"',document.getElementById('productPopUpQty').value,{catalogEntryType: 'dynamicKit'}); hidePopup('second_level_category_popup');";
				} else {
					addtoCart = document.getElementById('addToCartLinkAjax');
					addtoCart.href = "JavaScript:categoryDisplayJS.AddItem2ShopCartAjax('"+catEntryID+"',document.getElementById('productPopUpQty').value); hidePopup('second_level_category_popup');";
				}
			}
			if(document.getElementById('addToCartLinkAjax_QuickInfoDisplay')){
				if(isProductBean) {
					if (singleSKUProduct) {
						addtoCart = document.getElementById('addToCartLinkAjax_QuickInfoDisplay');
						addtoCart.href = "JavaScript:categoryDisplayJS.AddItem2ShopCartAjax('"+singleSKUProduct_catEntryId+"',document.getElementById('productPopUpQty').value); hidePopup('second_level_category_popup');";
					} else {
						addtoCart = document.getElementById('addToCartLinkAjax_QuickInfoDisplay');	
						addtoCart.href = "JavaScript:categoryDisplayJS.Add2ShopCartAjax('entitledItem_"+catEntryID+"',document.getElementById('productPopUpQty').value, true);";
					}
				}else if(isDynamicKitBean) {
					addtoCart = document.getElementById('addToCartLinkAjax_QuickInfoDisplay');
					addtoCart.href = "JavaScript:categoryDisplayJS.AddItem2ShopCartAjax('"+catEntryID+"',document.getElementById('productPopUpQty').value,{catalogEntryType: 'dynamicKit'}); hidePopup('second_level_category_popup');";
				} else {
					addtoCart = document.getElementById('addToCartLinkAjax_QuickInfoDisplay');
					addtoCart.href = "JavaScript:categoryDisplayJS.AddItem2ShopCartAjax('"+catEntryID+"',document.getElementById('productPopUpQty').value); hidePopup('second_level_category_popup');";
				}
			}
			if(document.getElementById('addToCartLink')){
				if(isProductBean) {
					addtoCart = document.getElementById('addToCartLink');
					addtoCart.href = "#";
					//Must dynamically set the onclick event as follows for IE6
					if (singleSKUProduct) {
						addtoCart.onclick = new Function("categoryDisplayJS.AddItem2ShopCart(document.getElementById('OrderItemAddForm_"+singleSKUProduct_catEntryId+"'),document.getElementById('productPopUpQty').value); hidePopup('second_level_category_popup');return false;");
					} else {
						addtoCart.onclick = new Function("categoryDisplayJS.Add2ShopCart('entitledItem_"+catEntryID+"',document.getElementById('OrderItemAddForm_"+catEntryID+"'),document.getElementById('productPopUpQty').value, true); return false;");
					}
				} else {
					addtoCart = document.getElementById('addToCartLink');
					addtoCart.href = "#";
					//Must dynamically set the onclick event as follows for IE6
					addtoCart.onclick = new Function("categoryDisplayJS.AddItem2ShopCart(document.getElementById('OrderItemAddForm_"+catEntryID+"'),document.getElementById('productPopUpQty').value); hidePopup('second_level_category_popup');return false;");
				}
			}
		}

		
		if (document.getElementById('addToWishListLinkAjax')) {
			if(isItemBean || isPackageBean || isDynamicKitBean){
				document.getElementById('addToWishListLinkAjax').href = "JavaScript:categoryDisplayJS.AddItem2WishListAjax("+catEntryID+"); hidePopup('second_level_category_popup');";
			} else if (isProductBean && singleSKUProduct) {
				document.getElementById('addToWishListLinkAjax').href = "JavaScript:categoryDisplayJS.AddItem2WishListAjax("+singleSKUProduct_catEntryId+"); hidePopup('second_level_category_popup');";
			} else {
				document.getElementById('addToWishListLinkAjax').href = "JavaScript:categoryDisplayJS.Add2WishListAjax('entitledItem_"+catEntryID+"'); hidePopup('second_level_category_popup');";
			}
		} else if(document.getElementById('addToWishListLink')) {
			document.getElementById('addToWishListLink').href = "#";
			//Must dynamically set the onclick event as follows for IE6
			if(isItemBean || isPackageBean || isDynamicKitBean){
				document.getElementById('addToWishListLink').onclick = new Function("categoryDisplayJS.AddItem2WishList(document.getElementById('OrderItemAddForm_"+catEntryID+"'));hidePopup('second_level_category_popup');return false;");
			} else if (isProductBean && singleSKUProduct) {
				document.getElementById('addToWishListLink').onclick = new Function("categoryDisplayJS.AddItem2WishList(document.getElementById('OrderItemAddForm_"+singleSKUProduct_catEntryId+"'));hidePopup('second_level_category_popup');return false;");
			} else {
				document.getElementById('addToWishListLink').onclick = new Function("categoryDisplayJS.Add2WishList('entitledItem_"+catEntryID+"',document.getElementById('OrderItemAddForm_"+catEntryID+"')); hidePopup('second_level_category_popup');return false;");
			}
		}
		if (document.getElementById('addToCompareLink')) {
			document.getElementById('addToCompareLink').href = "JavaScript:compareProductJS.Add2CompareAjax('"+catEntryID+"', '" + serviceResponse.productCompareImagePath +"', '" + serviceResponse.catalogEntryURL+ "','"+serviceResponse.compareImageDescription+"'); delayHidePopup();";
		}
		if (document.getElementById('replaceCartItemAjax')) {
			document.getElementById('replaceCartItemAjax').href = "JavaScript:dojo.byId('" + changeAttrId + "').disabled=1; if (dojo.byId('" + changeContractId + "') != null) {dojo.byId('" + changeContractId + "').disabled=1;} categoryDisplayJS.ReplaceItemAjax('entitledItem_"+catEntryID+"',document.getElementById('productPopUpQty').value); hidePopup('second_level_category_popup'); ";
		}
		if (document.getElementById('replaceCartItemNonAjax')) {
			document.getElementById('replaceCartItemNonAjax').href = "#";
			//Must dynamically set the onclick event as follows for IE6			
			document.getElementById('replaceCartItemNonAjax').onclick = new Function("categoryDisplayJS.ReplaceItemNonAjax('entitledItem_"+catEntryID+"',document.getElementById('productPopUpQty').value,document.getElementById('ReplaceItemForm')); hidePopup('second_level_category_popup');return false;");
		}

		if(dojo.trim(serviceResponse.catalogEntry.displayAddToCartButton)=="false"){
			//Start : Manhattan States Code Changes	 
			//document.getElementById('addToCartLinkAjax').style.display = "none";
			//End : Manhattan States Code Changes	 
			document.getElementById('availability_msg_qv').style.display = "block";
			document.getElementById('productQuantity_qv').style.display = "none";
			document.getElementById('availability_msg_qv').innerHTML = serviceResponse.catalogEntry.availabe_msg;
		}else{
			document.getElementById('availability_msg_qv').style.display = "none";
			document.getElementById('addToCartLinkAjax').style.display = "block";
			
			if (showQTYBox){
				document.getElementById('productQuantity_qv').style.display = "block";
			}
		}
		
		gobackFocus();//set the default focus to the Close button
		dojo.publish("ajaxRequestCompleted");
	}
	
	/**
	 *  This function is used to dynamically update the more info link url based on the selection of attributes in the 
	 *  Quickinfo popup.
	 */

	function updateMoreInfoUrl() {
			document.getElementById('productMoreInfoLink').href = categoryDisplayJS.moreInfoUrl;
	}
	/** 
	 * Reset all contents of the Product Quick Info pop-up.
	 * This dialog will be re-used across all products on the page.
	 */			
	function resetPopUp() {
		if (document.getElementById('productName')) document.getElementById('productName').innerHTML = "";
		document.getElementById('productPrice').innerHTML = "";
		document.getElementById('productLongDescription').innerHTML = "";
		document.getElementById('productDescriptiveAttributes').innerHTML = "";
		document.getElementById('productSKUValue').innerHTML = "";
		document.getElementById('productMoreInfoLink').href = "";
		document.getElementById('productPromotions').innerHTML = "";
        if ( typeof(isBrazilStore) != 'undefined' && isBrazilStore ){
        	dojo.byId('free_shipping_promotion_div').innerHTML = "";
        	dojo.byId('BrazilCatalogEntryFeaturedInstallmentOption').innerHTML = "";
        	dojo.style(dojo.byId('BrazilCatalogEntryFeaturedInstallmentOption'),"display","inline");
        	dojo.byId('BrazilFeaturedNonPaymentPromotion').innerHTML = "";
            

        }
        
		if (document.getElementById('productPopUpQty')){
			document.getElementById('productPopUpQty').disabled = false;
			document.getElementById('productPopUpQty').value = "1";
		}
		
		if (document.getElementById('productAttributes')) {
			document.getElementById('productAttributes').innerHTML = "";
		}
		
		if (document.getElementById('itemAttributes')) {
			document.getElementById('itemAttributes').innerHTML = "";
		}
		
		if (document.getElementById('addToCartLinkAjax')) {
			document.getElementById('addToCartLinkAjax').href = "";
			document.getElementById('addToCartLinkAjax').style.display = "block";
		} else if (document.getElementById('addToCartLink')) {
			document.getElementById('addToCartLink').href = "";
		}
		
		if (document.getElementById('addToWishListLinkAjax')) {
			document.getElementById('addToWishListLinkAjax').href = "";
		} else if (document.getElementById('addToWishListLink')) {
			document.getElementById('addToWishListLink').href = "";
		}
		
		if (document.getElementById('addToCompareLink')) {
			document.getElementById('addToCompareLink').href = "";
		}
		
		if(document.getElementById('replaceCartItemAjax')){
			document.getElementById('replaceCartItemAjax').href= "";
		} else if(document.getElementById('replaceCartItemNonAjax')){
			document.getElementById('replaceCartItemNonAjax').href = "";
		}
		if(document.getElementById('addToCartAjaxButton')){
			document.getElementById('addToCartAjaxButton').style.display='none';
		} else if(document.getElementById('addToCartButton')){
			document.getElementById('addToCartButton').style.display='none';
		}
		if(document.getElementById('skuNotBuyableButton')){
			document.getElementById('skuNotBuyableButton').style.display='none';
		}
		//set the default product image - NoImageIcon.jpg
		if (dojo.byId('baseUrlImageDir')){
		    var baseImageUrl = dojo.trim(dojo.byId('baseUrlImageDir').innerHTML);
		    var productImg = dojo.byId('productFullImage_quickInfo');
		   // productImg.src = baseImageUrl + "images/NoImageIcon.jpg";
		    dojo.style(productImg,'display','none');

		}
		categoryDisplayJS.selectedAttributes = new Object();
		categoryDisplayJS.selectedProducts = new Object();
	}
	
	/** 
	 * Hides the Product Quick Info pop-up.
	 * 
	 * @param {string} id The id of the Product Quick Info pop-up to hide.
	 * @param {object} event The event triggered from user actions.
	 */		
	function hidePopup(id,event){
	if(event!=null && event.type=="keypress" && event.keyCode!="27"){
			return;
		}else{		
			var quickInfo = dijit.byId(id), productImg = dojo.byId('productFullImage_quickInfo');

			if(quickInfo != null){
				var add2CartModal = (id == 'modal_popup_pdp') && dijit.byId('second_level_category_popup');		


				quickInfo.hide();
				hideOverView();
				
				productImg.style.display = 'none';
				dojo.style(dojo.query('.quick_info_img_placeholder')[0], 'display', '');
				if (add2CartModal) {
					var add2CartDomNode = add2CartModal.domNode;
					 if (!add2CartModal._isShown()) {
					 	add2CartModal._relativePosition = {t: 0, l: 0};  // Quick fix for reseting the dijit.Dialog position
					 	add2CartModal.show();
					 } 
					//dojo.style(add2CartDomNode, 'opacity', 1); dojo.style(add2CartDomNode, 'display', 'block');
				}

			}
		}
	}


	function hideAddToCartPopup() {
		if(dijit.byId('add_to_cart_popup')){
			dijit.byId('add_to_cart_popup').hide();
			hideOverView();
		}
	}

	/** 
	 * Stores the identifier of the order item which is the candidate for replacement.
	 * 
	 * @param {string} changeOrderItemId The id of the order item to be replaced.
	 */	
	function saveChangeOrderItemId(changeOrderItemId){
		replaceOrderItemId = changeOrderItemId;
	}

	/** 
	 * Defines the list of actions that show up in the Product Quick Info pop-up.
	 * Each property corresponds to an action.
	 * Default settings show the first 3 links.
	 */	
	function popupActionProperties() {
		this.showAddToCart = true;
		this.showWishList = true;
		this.showProductCompare = true;
		this.showReplaceCartItem = false;
	}

	/** 
	 * Transfers the focus to the "Close" button,
	 * when pressing the <Tab> key on the last focusable element in the Product Quick Info pop-up.
	 */	
	function gobackFocus() {
		document.getElementById('closeLink').focus();
	}

	/** 
	 * Transfers the focus to the last focusable element present in the Product Quick Info pop-up,
	 * when pressing the <Shift+Tab> keys on the "Close" button.
	 */		
	function setbackFocus(event) {
		if(event.shiftKey && event.keyCode == dojo.keys.TAB)
		{
			if(document.getElementById('replaceCartItemNonAjax') && document.getElementById('replaceCartItemNonAjax').style.display!="none") {
				document.getElementById('replaceCartItemNonAjax').focus();
			} else if(document.getElementById('replaceCartItemAjax') && document.getElementById('replaceCartItemAjax').style.display!="none") {
				document.getElementById('replaceCartItemAjax').focus();
			} else if(document.getElementById('addToCompareLink') && document.getElementById('addToCompareLink').style.display!="none") {
				document.getElementById('addToCompareLink').focus();
			} else if(document.getElementById('addToWishListLink') && document.getElementById('addToWishListLink').style.display!="none") {
				document.getElementById('addToWishListLink').focus();
			} else if(document.getElementById('addToWishListLinkAjax') && document.getElementById('addToWishListLinkAjax').style.display!="none") {
				document.getElementById('addToWishListLinkAjax').focus();
			} else {
				document.getElementById('productMoreInfoLink').focus();
			}
			
			dojo.stopEvent(event);
		}
	}
	
	/** 
	 * Triggers a call to the hidePopup() function after a delay of a certain amount of time.
	 */			
	function delayHidePopup() {
		setTimeout(dojo.hitch(this,"hidePopup",'second_level_category_popup'),200);
	}
